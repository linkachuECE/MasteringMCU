
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c70  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e18  08000e18  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00020420  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00020420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e18  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08000e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020420  2**0
                  CONTENTS
 10 .bss          00000040  20000420  20000420  00020420  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  00020420  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000190f  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ce  00000000  00000000  00021d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00022330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  000224a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000372e  00000000  00000000  000225c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002419  00000000  00000000  00025cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cf07  00000000  00000000  0002810f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00035016  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004c4  00000000  00000000  00035068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000420 	.word	0x20000420
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e00 	.word	0x08000e00

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000424 	.word	0x20000424
 80001e4:	08000e00 	.word	0x08000e00

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <USART2_Init>:

char msg[1024] = "This is a test message...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <USART2_Init+0x3c>)
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <USART2_Init+0x40>)
 8000200:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.baudRate = USART_STD_BAUD_9600;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <USART2_Init+0x3c>)
 8000204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000208:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <USART2_Init+0x3c>)
 800020c:	2200      	movs	r2, #0
 800020e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.mode = USART_MODE_TXRX;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <USART2_Init+0x3c>)
 8000212:	2202      	movs	r2, #2
 8000214:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.noOfStopBits = USART_STOPBITS_1;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <USART2_Init+0x3c>)
 8000218:	2200      	movs	r2, #0
 800021a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.wordLength = USART_WORDLEN_8BITS;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <USART2_Init+0x3c>)
 800021e:	2200      	movs	r2, #0
 8000220:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.parityControl = USART_PARITY_DISABLE;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <USART2_Init+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <USART2_Init+0x3c>)
 800022a:	f000 fcf3 	bl	8000c14 <USART_Init>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000043c 	.word	0x2000043c
 8000238:	40004400 	.word	0x40004400

0800023c <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <USART2_GPIOInit+0x40>)
 8000244:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000256:	2307      	movs	r3, #7
 8000258:	737b      	strb	r3, [r7, #13]

	// USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800025a:	2302      	movs	r3, #2
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f93d 	bl	80004e0 <GPIO_Init>

	// USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f937 	bl	80004e0 <GPIO_Init>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <main>:

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	USART2_GPIOInit();
 8000284:	f7ff ffda 	bl	800023c <USART2_GPIOInit>

	USART2_Init();
 8000288:	f7ff ffb6 	bl	80001f8 <USART2_Init>

	USART_PeripheralControl(USART2, ENABLE);
 800028c:	2101      	movs	r1, #1
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x28>)
 8000290:	f000 fc1c 	bl	8000acc <USART_PeripheralControl>

	USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg));
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <main+0x2c>)
 8000296:	f7ff ffa7 	bl	80001e8 <strlen>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4903      	ldr	r1, [pc, #12]	; (80002ac <main+0x2c>)
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <main+0x30>)
 80002a2:	f000 fd3a 	bl	8000d1a <USART_SendData>

	while(1);
 80002a6:	e7fe      	b.n	80002a6 <main+0x26>
 80002a8:	40004400 	.word	0x40004400
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000043c 	.word	0x2000043c

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 fd69 	bl	8000db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffcb 	bl	8000280 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 80002f8:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 80002fc:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000300:	20000460 	.word	0x20000460

08000304 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC_IRQHandler>
	...

08000308 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d162      	bne.n	80003e0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a66      	ldr	r2, [pc, #408]	; (80004b8 <GPIO_PeriClockControl+0x1b0>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000322:	4b66      	ldr	r3, [pc, #408]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a65      	ldr	r2, [pc, #404]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 800032e:	e0bc      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a63      	ldr	r2, [pc, #396]	; (80004c0 <GPIO_PeriClockControl+0x1b8>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000338:	4b60      	ldr	r3, [pc, #384]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a5f      	ldr	r2, [pc, #380]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e0b1      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a5e      	ldr	r2, [pc, #376]	; (80004c4 <GPIO_PeriClockControl+0x1bc>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034e:	4b5b      	ldr	r3, [pc, #364]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a5a      	ldr	r2, [pc, #360]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e0a6      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a5a      	ldr	r2, [pc, #360]	; (80004c8 <GPIO_PeriClockControl+0x1c0>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000364:	4b55      	ldr	r3, [pc, #340]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a54      	ldr	r2, [pc, #336]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e09b      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a55      	ldr	r2, [pc, #340]	; (80004cc <GPIO_PeriClockControl+0x1c4>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800037a:	4b50      	ldr	r3, [pc, #320]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a4f      	ldr	r2, [pc, #316]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000380:	f043 0310 	orr.w	r3, r3, #16
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e090      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a51      	ldr	r2, [pc, #324]	; (80004d0 <GPIO_PeriClockControl+0x1c8>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000390:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a49      	ldr	r2, [pc, #292]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e085      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a4c      	ldr	r2, [pc, #304]	; (80004d4 <GPIO_PeriClockControl+0x1cc>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a6:	4b45      	ldr	r3, [pc, #276]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a44      	ldr	r2, [pc, #272]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e07a      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a48      	ldr	r2, [pc, #288]	; (80004d8 <GPIO_PeriClockControl+0x1d0>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003bc:	4b3f      	ldr	r3, [pc, #252]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a3e      	ldr	r2, [pc, #248]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e06f      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a43      	ldr	r2, [pc, #268]	; (80004dc <GPIO_PeriClockControl+0x1d4>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d16b      	bne.n	80004aa <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80003d2:	4b3a      	ldr	r3, [pc, #232]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a39      	ldr	r2, [pc, #228]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e064      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 80003e0:	78fb      	ldrb	r3, [r7, #3]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d161      	bne.n	80004aa <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a33      	ldr	r2, [pc, #204]	; (80004b8 <GPIO_PeriClockControl+0x1b0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80003ee:	4b33      	ldr	r3, [pc, #204]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a32      	ldr	r2, [pc, #200]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e056      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a30      	ldr	r2, [pc, #192]	; (80004c0 <GPIO_PeriClockControl+0x1b8>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a2c      	ldr	r2, [pc, #176]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800040a:	f023 0302 	bic.w	r3, r3, #2
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e04b      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <GPIO_PeriClockControl+0x1bc>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000420:	f023 0304 	bic.w	r3, r3, #4
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e040      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <GPIO_PeriClockControl+0x1c0>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000436:	f023 0308 	bic.w	r3, r3, #8
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e035      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <GPIO_PeriClockControl+0x1c4>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800044c:	f023 0310 	bic.w	r3, r3, #16
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e02a      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a1e      	ldr	r2, [pc, #120]	; (80004d0 <GPIO_PeriClockControl+0x1c8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a16      	ldr	r2, [pc, #88]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000462:	f023 0320 	bic.w	r3, r3, #32
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e01f      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <GPIO_PeriClockControl+0x1cc>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a11      	ldr	r2, [pc, #68]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 8000478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e014      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <GPIO_PeriClockControl+0x1d0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 800048e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e009      	b.n	80004aa <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <GPIO_PeriClockControl+0x1d4>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d105      	bne.n	80004aa <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a06      	ldr	r2, [pc, #24]	; (80004bc <GPIO_PeriClockControl+0x1b4>)
 80004a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00
 80004dc:	40022000 	.word	0x40022000

080004e0 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff0a 	bl	8000308 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d820      	bhi.n	8000542 <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2103      	movs	r1, #3
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	4619      	mov	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	400a      	ands	r2, r1
 800052e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e0d0      	b.n	80006e4 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d117      	bne.n	800057a <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b4c      	ldr	r3, [pc, #304]	; (800067c <GPIO_Init+0x19c>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a48      	ldr	r2, [pc, #288]	; (800067c <GPIO_Init+0x19c>)
 800055c:	430b      	orrs	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b46      	ldr	r3, [pc, #280]	; (800067c <GPIO_Init+0x19c>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a42      	ldr	r2, [pc, #264]	; (800067c <GPIO_Init+0x19c>)
 8000574:	400b      	ands	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
 8000578:	e031      	b.n	80005de <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d117      	bne.n	80005b2 <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <GPIO_Init+0x19c>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a3a      	ldr	r2, [pc, #232]	; (800067c <GPIO_Init+0x19c>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b38      	ldr	r3, [pc, #224]	; (800067c <GPIO_Init+0x19c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a34      	ldr	r2, [pc, #208]	; (800067c <GPIO_Init+0x19c>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e015      	b.n	80005de <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <GPIO_Init+0x19c>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a2e      	ldr	r2, [pc, #184]	; (800067c <GPIO_Init+0x19c>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <GPIO_Init+0x19c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <GPIO_Init+0x19c>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <GPIO_Init+0x1a0>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <GPIO_Init+0x1a0>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <GPIO_Init+0x1a4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d050      	beq.n	80006a8 <GPIO_Init+0x1c8>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <GPIO_Init+0x1a8>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d032      	beq.n	8000676 <GPIO_Init+0x196>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <GPIO_Init+0x1ac>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d02b      	beq.n	8000672 <GPIO_Init+0x192>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <GPIO_Init+0x1b0>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d024      	beq.n	800066e <GPIO_Init+0x18e>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <GPIO_Init+0x1b4>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d01d      	beq.n	800066a <GPIO_Init+0x18a>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a19      	ldr	r2, [pc, #100]	; (8000698 <GPIO_Init+0x1b8>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d016      	beq.n	8000666 <GPIO_Init+0x186>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <GPIO_Init+0x1bc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d00f      	beq.n	8000662 <GPIO_Init+0x182>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <GPIO_Init+0x1c0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d008      	beq.n	800065e <GPIO_Init+0x17e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <GPIO_Init+0x1c4>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <GPIO_Init+0x17a>
 8000656:	2308      	movs	r3, #8
 8000658:	e027      	b.n	80006aa <GPIO_Init+0x1ca>
 800065a:	2300      	movs	r3, #0
 800065c:	e025      	b.n	80006aa <GPIO_Init+0x1ca>
 800065e:	2307      	movs	r3, #7
 8000660:	e023      	b.n	80006aa <GPIO_Init+0x1ca>
 8000662:	2306      	movs	r3, #6
 8000664:	e021      	b.n	80006aa <GPIO_Init+0x1ca>
 8000666:	2305      	movs	r3, #5
 8000668:	e01f      	b.n	80006aa <GPIO_Init+0x1ca>
 800066a:	2304      	movs	r3, #4
 800066c:	e01d      	b.n	80006aa <GPIO_Init+0x1ca>
 800066e:	2303      	movs	r3, #3
 8000670:	e01b      	b.n	80006aa <GPIO_Init+0x1ca>
 8000672:	2302      	movs	r3, #2
 8000674:	e019      	b.n	80006aa <GPIO_Init+0x1ca>
 8000676:	2301      	movs	r3, #1
 8000678:	e017      	b.n	80006aa <GPIO_Init+0x1ca>
 800067a:	bf00      	nop
 800067c:	40013c00 	.word	0x40013c00
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40021400 	.word	0x40021400
 800069c:	40021800 	.word	0x40021800
 80006a0:	40021c00 	.word	0x40021c00
 80006a4:	40022000 	.word	0x40022000
 80006a8:	2300      	movs	r3, #0
 80006aa:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80006ac:	4a61      	ldr	r2, [pc, #388]	; (8000834 <GPIO_Init+0x354>)
 80006ae:	7cfb      	ldrb	r3, [r7, #19]
 80006b0:	3302      	adds	r3, #2
 80006b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b6:	7c79      	ldrb	r1, [r7, #17]
 80006b8:	7cbb      	ldrb	r3, [r7, #18]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	495c      	ldr	r1, [pc, #368]	; (8000834 <GPIO_Init+0x354>)
 80006c4:	7cfb      	ldrb	r3, [r7, #19]
 80006c6:	4302      	orrs	r2, r0
 80006c8:	3302      	adds	r3, #2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <GPIO_Init+0x358>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	7912      	ldrb	r2, [r2, #4]
 80006d6:	4611      	mov	r1, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	408a      	lsls	r2, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	4a56      	ldr	r2, [pc, #344]	; (8000838 <GPIO_Init+0x358>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	799b      	ldrb	r3, [r3, #6]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	400a      	ands	r2, r1
 8000716:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6899      	ldr	r1, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	430a      	orrs	r2, r1
 8000726:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	2103      	movs	r1, #3
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68d9      	ldr	r1, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	430a      	orrs	r2, r1
 800076a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d003      	beq.n	8000780 <GPIO_Init+0x2a0>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d11f      	bne.n	80007c0 <GPIO_Init+0x2e0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7a1b      	ldrb	r3, [r3, #8]
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	4619      	mov	r1, r3
 800079c:	2301      	movs	r3, #1
 800079e:	408b      	lsls	r3, r1
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	400a      	ands	r2, r1
 80007aa:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	605a      	str	r2, [r3, #4]
		temp = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d131      	bne.n	800082c <GPIO_Init+0x34c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	f003 0307 	and.w	r3, r3, #7
 80007d8:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7c3a      	ldrb	r2, [r7, #16]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	220f      	movs	r2, #15
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	4001      	ands	r1, r0
 80007fc:	3208      	adds	r2, #8
 80007fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7c3a      	ldrb	r2, [r7, #16]
 8000808:	3208      	adds	r2, #8
 800080a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7a5b      	ldrb	r3, [r3, #9]
 8000812:	461a      	mov	r2, r3
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	4618      	mov	r0, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	7c3a      	ldrb	r2, [r7, #16]
 8000824:	4301      	orrs	r1, r0
 8000826:	3208      	adds	r2, #8
 8000828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013800 	.word	0x40013800
 8000838:	40013c00 	.word	0x40013c00

0800083c <RCC_GetPCLK1Value>:
 *
 * @return		- APB1 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1Value(void){
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
	uint32_t pclk1, apb1p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <RCC_GetPCLK1Value+0x90>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <RCC_GetPCLK1Value+0x94>)
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e004      	b.n	8000866 <RCC_GetPCLK1Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d101      	bne.n	8000866 <RCC_GetPCLK1Value+0x2a>
		systemClk = 8000000;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <RCC_GetPCLK1Value+0x98>)
 8000864:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	//AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <RCC_GetPCLK1Value+0x90>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	f003 030f 	and.w	r3, r3, #15
 8000870:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b07      	cmp	r3, #7
 8000876:	d802      	bhi.n	800087e <RCC_GetPCLK1Value+0x42>
		ahbp = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	e005      	b.n	800088a <RCC_GetPCLK1Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b08      	subs	r3, #8
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <RCC_GetPCLK1Value+0x9c>)
 8000884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000888:	613b      	str	r3, [r7, #16]

	//APB1 prescaler starts at 10th bit
	temp = (RCC->CFGR >> 10) & 0b111;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <RCC_GetPCLK1Value+0x90>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	0a9b      	lsrs	r3, r3, #10
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d802      	bhi.n	80008a2 <RCC_GetPCLK1Value+0x66>
		apb1p = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	e005      	b.n	80008ae <RCC_GetPCLK1Value+0x72>
	else
		apb1p = APB1Prescaler[temp - 0b100];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b04      	subs	r3, #4
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <RCC_GetPCLK1Value+0xa0>)
 80008a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ac:	617b      	str	r3, [r7, #20]

	pclk1 = systemClk/(ahbp * apb1p);
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008bc:	603b      	str	r3, [r7, #0]

	return pclk1;
 80008be:	683b      	ldr	r3, [r7, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	371c      	adds	r7, #28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800
 80008d0:	00f42400 	.word	0x00f42400
 80008d4:	007a1200 	.word	0x007a1200
 80008d8:	20000400 	.word	0x20000400
 80008dc:	20000410 	.word	0x20000410

080008e0 <RCC_GetPCLK2Value>:
 *
 * @return		- APB2 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK2Value(void){
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
	uint32_t pclk2, apb2p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <RCC_GetPCLK2Value+0x90>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0303 	and.w	r3, r3, #3
 80008f2:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <RCC_GetPCLK2Value+0x20>
		systemClk = 16000000;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <RCC_GetPCLK2Value+0x94>)
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e004      	b.n	800090a <RCC_GetPCLK2Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 8000900:	7afb      	ldrb	r3, [r7, #11]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <RCC_GetPCLK2Value+0x2a>
		systemClk = 8000000;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <RCC_GetPCLK2Value+0x98>)
 8000908:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	// AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <RCC_GetPCLK2Value+0x90>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	f003 030f 	and.w	r3, r3, #15
 8000914:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d802      	bhi.n	8000922 <RCC_GetPCLK2Value+0x42>
		ahbp = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	e005      	b.n	800092e <RCC_GetPCLK2Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3b08      	subs	r3, #8
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <RCC_GetPCLK2Value+0x9c>)
 8000928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092c:	613b      	str	r3, [r7, #16]

	// APB2 prescaler starts at 13th bit
	temp = (RCC->CFGR >> 13) & 0b111;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <RCC_GetPCLK2Value+0x90>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	0b5b      	lsrs	r3, r3, #13
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d802      	bhi.n	8000946 <RCC_GetPCLK2Value+0x66>
		apb2p = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e005      	b.n	8000952 <RCC_GetPCLK2Value+0x72>
	else
		apb2p = APB2Prescaler[temp - 0b100];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b04      	subs	r3, #4
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <RCC_GetPCLK2Value+0xa0>)
 800094c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000950:	617b      	str	r3, [r7, #20]

	pclk2 = systemClk/(ahbp * apb2p);
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000960:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000962:	683b      	ldr	r3, [r7, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	40023800 	.word	0x40023800
 8000974:	00f42400 	.word	0x00f42400
 8000978:	007a1200 	.word	0x007a1200
 800097c:	20000400 	.word	0x20000400
 8000980:	20000418 	.word	0x20000418

08000984 <USART_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d141      	bne.n	8000a1a <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <USART_PeriClockControl+0x12c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 800099e:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == UART5)
			UART5_PCLK_DI();
		else if(pUSARTx == USART6)
			USART6_PCLK_DI();
	}
}
 80009aa:	e07a      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a42      	ldr	r2, [pc, #264]	; (8000ab8 <USART_PeriClockControl+0x134>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80009b4:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c0:	e06f      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a3d      	ldr	r2, [pc, #244]	; (8000abc <USART_PeriClockControl+0x138>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d6:	e064      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == UART4)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a39      	ldr	r2, [pc, #228]	; (8000ac0 <USART_PeriClockControl+0x13c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a33      	ldr	r2, [pc, #204]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ec:	e059      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == UART5)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <USART_PeriClockControl+0x140>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <USART_PeriClockControl+0x130>)
 80009fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a02:	e04e      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART6)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a30      	ldr	r2, [pc, #192]	; (8000ac8 <USART_PeriClockControl+0x144>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d14a      	bne.n	8000aa2 <USART_PeriClockControl+0x11e>
			USART6_PCLK_EN();
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a18:	e043      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
	} else if (EnOrDi == DISABLE){
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d140      	bne.n	8000aa2 <USART_PeriClockControl+0x11e>
		if(pUSARTx == USART1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <USART_PeriClockControl+0x12c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <USART_PeriClockControl+0xb2>
			USART1_PCLK_DI();
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a2e:	f023 0310 	bic.w	r3, r3, #16
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a34:	e035      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <USART_PeriClockControl+0x134>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <USART_PeriClockControl+0xc8>
			USART2_PCLK_DI();
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a4a:	e02a      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <USART_PeriClockControl+0x138>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <USART_PeriClockControl+0xde>
			USART3_PCLK_DI();
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a60:	e01f      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == UART4)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <USART_PeriClockControl+0x13c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <USART_PeriClockControl+0xf4>
			UART4_PCLK_DI();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a70:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a76:	e014      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == UART5)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <USART_PeriClockControl+0x140>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d106      	bne.n	8000a8e <USART_PeriClockControl+0x10a>
			UART5_PCLK_DI();
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a8c:	e009      	b.n	8000aa2 <USART_PeriClockControl+0x11e>
		else if(pUSARTx == USART6)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <USART_PeriClockControl+0x144>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d105      	bne.n	8000aa2 <USART_PeriClockControl+0x11e>
			USART6_PCLK_DI();
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <USART_PeriClockControl+0x130>)
 8000a9c:	f023 0320 	bic.w	r3, r3, #32
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40004800 	.word	0x40004800
 8000ac0:	40004c00 	.word	0x40004c00
 8000ac4:	40005000 	.word	0x40005000
 8000ac8:	40011400 	.word	0x40011400

08000acc <USART_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d106      	bne.n	8000aec <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60da      	str	r2, [r3, #12]
	else
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
}
 8000aea:	e005      	b.n	8000af8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <USART_GetFlagStatus>:
 *
 * @return		- SET or RESET
 *
 * @Note		- none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t* pUSARTx, uint8_t StatusFlagName){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <USART_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <USART_GetFlagStatus+0x1e>
	else
		return FLAG_RESET;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <USART_SetBaudRate>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx, usartdiv;

	// Variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]

	// Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <USART_SetBaudRate+0xd8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d003      	beq.n	8000b4e <USART_SetBaudRate+0x1e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <USART_SetBaudRate+0xdc>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d103      	bne.n	8000b56 <USART_SetBaudRate+0x26>
	   // USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b4e:	f7ff fec7 	bl	80008e0 <RCC_GetPCLK2Value>
 8000b52:	61f8      	str	r0, [r7, #28]
 8000b54:	e002      	b.n	8000b5c <USART_SetBaudRate+0x2c>
	} else {
	   PCLKx = RCC_GetPCLK1Value();
 8000b56:	f7ff fe71 	bl	800083c <RCC_GetPCLK1Value>
 8000b5a:	61f8      	str	r0, [r7, #28]
	}

	// Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00b      	beq.n	8000b80 <USART_SetBaudRate+0x50>
	{
	   // OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	441a      	add	r2, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	e00a      	b.n	8000b96 <USART_SetBaudRate+0x66>
	} else {
	   // Over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009a      	lsls	r2, r3, #2
 8000b8a:	441a      	add	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	61bb      	str	r3, [r7, #24]
	}

	// Calculate the Mantissa part
	M_part = usartdiv/100;
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <USART_SetBaudRate+0xe0>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	60fb      	str	r3, [r7, #12]

	// Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]

	// Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2264      	movs	r2, #100	; 0x64
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	617b      	str	r3, [r7, #20]

	// Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <USART_SetBaudRate+0xac>
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	3332      	adds	r3, #50	; 0x32
 8000bcc:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <USART_SetBaudRate+0xe0>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <USART_SetBaudRate+0xc0>
	} else {
	   // Over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	3332      	adds	r3, #50	; 0x32
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <USART_SetBaudRate+0xe0>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	617b      	str	r3, [r7, #20]
	}

	// Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

	// Copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	609a      	str	r2, [r3, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40011400 	.word	0x40011400
 8000c10:	51eb851f 	.word	0x51eb851f

08000c14 <USART_Init>:
 * @return            - none
 *
 * @Note              - none

 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	// Temporary variable
	uint32_t tempreg=0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	// Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff feac 	bl	8000984 <USART_PeriClockControl>

	// Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.mode == USART_MODE_ONLY_RX) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d104      	bne.n	8000c3e <USART_Init+0x2a>
		// Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e010      	b.n	8000c60 <USART_Init+0x4c>
	} else if (pUSARTHandle->USART_Config.mode == USART_MODE_ONLY_TX) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	791b      	ldrb	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d104      	bne.n	8000c50 <USART_Init+0x3c>
		// Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e007      	b.n	8000c60 <USART_Init+0x4c>

	} else if (pUSARTHandle->USART_Config.mode == USART_MODE_TXRX) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d103      	bne.n	8000c60 <USART_Init+0x4c>
		// Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f043 030c 	orr.w	r3, r3, #12
 8000c5e:	60fb      	str	r3, [r7, #12]
	}

    // Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.wordLength << USART_CR1_M;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b5b      	ldrb	r3, [r3, #13]
 8000c64:	031b      	lsls	r3, r3, #12
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]


    // Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.parityControl == USART_PARITY_EN_EVEN) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7b9b      	ldrb	r3, [r3, #14]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <USART_Init+0x74>
		// Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7c:	60fb      	str	r3, [r7, #12]

		// Implement the code to enable EVEN parity

		tempreg &= ~(1 << USART_CR1_PS);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e00b      	b.n	8000ca0 <USART_Init+0x8c>
		// Not required because by default EVEN parity will be selected once you enable the parity control

	} else if (pUSARTHandle->USART_Config.parityControl == USART_PARITY_EN_ODD ) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7b9b      	ldrb	r3, [r3, #14]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d107      	bne.n	8000ca0 <USART_Init+0x8c>
		// Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	60fb      	str	r3, [r7, #12]

	    // Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	60fb      	str	r3, [r7, #12]
	}

	// Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]

	// Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.noOfStopBits << USART_CR2_STOP;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7b1b      	ldrb	r3, [r3, #12]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]

	// Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]

	// Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7bdb      	ldrb	r3, [r3, #15]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d104      	bne.n	8000cd8 <USART_Init+0xc4>
		// Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e010      	b.n	8000cfa <USART_Init+0xe6>
	} else if (pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_RTS) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7bdb      	ldrb	r3, [r3, #15]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d104      	bne.n	8000cea <USART_Init+0xd6>
		// Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e007      	b.n	8000cfa <USART_Init+0xe6>
	} else if (pUSARTHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7bdb      	ldrb	r3, [r3, #15]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d103      	bne.n	8000cfa <USART_Init+0xe6>
		// Implement the code to enable both CTS and RTS Flow control
		tempreg |= ((1 << USART_CR3_RTSE) | (1 << USART_CR3_CTSE));
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000cf8:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	// Implement the code to configure the baud rate
	// We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.baudRate);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f7ff ff0f 	bl	8000b30 <USART_SetBaudRate>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <USART_SendData>:
 *
 * @return            -
 *
 * @Note              - Resolve all the TODOs
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len) {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   // Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < len; i++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e031      	b.n	8000d90 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_TxE_FLAG));
 8000d2c:	bf00      	nop
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fee5 	bl	8000b04 <USART_GetFlagStatus>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f6      	beq.n	8000d2e <USART_SendData+0x14>
         // Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.wordLength == USART_WORDLEN_9BITS) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7b5b      	ldrb	r3, [r3, #13]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d118      	bne.n	8000d7a <USART_SendData+0x60>
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d5a:	605a      	str	r2, [r3, #4]

			// Check for USART_ParityControl
			if(pUSARTHandle->USART_Config.parityControl == USART_PARITY_DISABLE) {
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	7b9b      	ldrb	r3, [r3, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d106      	bne.n	8000d72 <USART_SendData+0x58>
				// No parity is used in this transfer. so, 9bits of user data will be sent
				// Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	e00b      	b.n	8000d8a <USART_SendData+0x70>
			} else {
				// Parity bit is used in this transfer . so , 8bits of user data will be sent
				// The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	e007      	b.n	8000d8a <USART_SendData+0x70>
			}
		} else {
			// This is 8-bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]

			// Implement the code to increment the buffer address
			pTxBuffer++;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < len; i++) {
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3c9      	bcc.n	8000d2c <USART_SendData+0x12>
		}
	}
	// Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_TC_FLAG));
 8000d98:	bf00      	nop
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff feaf 	bl	8000b04 <USART_GetFlagStatus>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f6      	beq.n	8000d9a <USART_SendData+0x80>
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <__libc_init_array>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	4d0d      	ldr	r5, [pc, #52]	; (8000df0 <__libc_init_array+0x38>)
 8000dbc:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <__libc_init_array+0x3c>)
 8000dbe:	1b64      	subs	r4, r4, r5
 8000dc0:	10a4      	asrs	r4, r4, #2
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	42a6      	cmp	r6, r4
 8000dc6:	d109      	bne.n	8000ddc <__libc_init_array+0x24>
 8000dc8:	4d0b      	ldr	r5, [pc, #44]	; (8000df8 <__libc_init_array+0x40>)
 8000dca:	4c0c      	ldr	r4, [pc, #48]	; (8000dfc <__libc_init_array+0x44>)
 8000dcc:	f000 f818 	bl	8000e00 <_init>
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	10a4      	asrs	r4, r4, #2
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	42a6      	cmp	r6, r4
 8000dd8:	d105      	bne.n	8000de6 <__libc_init_array+0x2e>
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
 8000ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de0:	4798      	blx	r3
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7ee      	b.n	8000dc4 <__libc_init_array+0xc>
 8000de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dea:	4798      	blx	r3
 8000dec:	3601      	adds	r6, #1
 8000dee:	e7f2      	b.n	8000dd6 <__libc_init_array+0x1e>
 8000df0:	08000e18 	.word	0x08000e18
 8000df4:	08000e18 	.word	0x08000e18
 8000df8:	08000e18 	.word	0x08000e18
 8000dfc:	08000e1c 	.word	0x08000e1c

08000e00 <_init>:
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	bf00      	nop
 8000e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e06:	bc08      	pop	{r3}
 8000e08:	469e      	mov	lr, r3
 8000e0a:	4770      	bx	lr

08000e0c <_fini>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	bf00      	nop
 8000e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e12:	bc08      	pop	{r3}
 8000e14:	469e      	mov	lr, r3
 8000e16:	4770      	bx	lr
