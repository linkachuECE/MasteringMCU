
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002534  08002534  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002534  08002534  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002534  08002534  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ea8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070c  00000000  00000000  00021f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00022648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d8  00000000  00000000  00022878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d26  00000000  00000000  00022a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002861  00000000  00000000  00026776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d135  00000000  00000000  00028fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003610c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001020  00000000  00000000  0003615c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080023d8 	.word	0x080023d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080023d8 	.word	0x080023d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define	ANALOG_PIN4		4

// Arduino led
#define LED_PIN		9

void delay(void){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 50000; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d9f7      	bls.n	80002ac <delay+0xc>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a3b      	ldr	r2, [pc, #236]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 80002d8:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	220f      	movs	r2, #15
 80002de:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2202      	movs	r2, #2
 80002e4:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2203      	movs	r2, #3
 80002ea:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2205      	movs	r2, #5
 80002fc:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a30      	ldr	r2, [pc, #192]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000302:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	220e      	movs	r2, #14
 8000308:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2202      	movs	r2, #2
 800030e:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2203      	movs	r2, #3
 8000314:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2205      	movs	r2, #5
 8000326:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a26      	ldr	r2, [pc, #152]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800032c:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	220d      	movs	r2, #13
 8000332:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2202      	movs	r2, #2
 8000338:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2203      	movs	r2, #3
 800033e:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2205      	movs	r2, #5
 8000352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	220c      	movs	r2, #12
 8000360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2202      	movs	r2, #2
 8000368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2203      	movs	r2, #3
 8000370:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2205      	movs	r2, #5
 8000388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800038c:	2101      	movs	r1, #1
 800038e:	480d      	ldr	r0, [pc, #52]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000390:	f000 faf8 	bl	8000984 <GPIO_PeriClockControl>

	GPIO_Init(&(SPIPort->MOSI));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fbe0 	bl	8000b5c <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	330c      	adds	r3, #12
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fbdb 	bl	8000b5c <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3318      	adds	r3, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fbd6 	bl	8000b5c <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3324      	adds	r3, #36	; 0x24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fbd1 	bl	8000b5c <GPIO_Init>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020400 	.word	0x40020400

080003c8 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	 * - Low Clock polarity, first phase detection
	 * - Hardware controlled slave select
	 * - Single master
	 */

	SPIDevice->pSPIx = SPI2;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <SPI2_Init+0x58>)
 80003d4:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2201      	movs	r2, #1
 80003da:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_HW;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_LSBFIRST;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fe74 	bl	80010f4 <SPI_Init>

	// Enable SSOE so that NSS goes low when SPE goes high
	SPI_SSOEControl(SPIDevice->pSPIx, ENABLE);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 ff18 	bl	8001248 <SPI_SSOEControl>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40003800 	.word	0x40003800

08000424 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* USRPB){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	USRPB->pGPIOx = GPIOA;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <USRBTN_Init+0x40>)
 8000430:	601a      	str	r2, [r3, #0]
	USRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	711a      	strb	r2, [r3, #4]
	USRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	715a      	strb	r2, [r3, #5]
	USRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2202      	movs	r2, #2
 8000442:	719a      	strb	r2, [r3, #6]
	USRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	71da      	strb	r2, [r3, #7]

	GPIO_Init(USRPB);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f000 fb86 	bl	8000b5c <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	2006      	movs	r0, #6
 8000456:	f000 fd41 	bl	8000edc <GPIO_IRQInterruptConfig>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000

08000468 <SendCmdGetAckByte>:

void SendCmdGetAckByte(SPI_RegDef_t* pSPIx, uint8_t* cmdCode, uint8_t* ackByte){
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 8000474:	23ff      	movs	r3, #255	; 0xff
 8000476:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyReadByte;

	// Send command code
	SPI_SendData(pSPIx, cmdCode, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f000 ff13 	bl	80012a8 <SPI_SendData>

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 8000482:	f107 0316 	add.w	r3, r7, #22
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f000 ff3d 	bl	800130a <SPI_ReceiveData>

	// Send dummy byte so that data can be retrieved from slave
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 8000490:	f107 0317 	add.w	r3, r7, #23
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f000 ff05 	bl	80012a8 <SPI_SendData>

	// Read the acknowledge byte
	SPI_ReceiveData(pSPIx, ackByte, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 ff31 	bl	800130a <SPI_ReceiveData>
}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <SPI_Verify_Response>:

uint8_t SPI_Verify_Response(uint8_t ackbyte){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5){
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2bf5      	cmp	r3, #245	; 0xf5
 80004be:	d101      	bne.n	80004c4 <SPI_Verify_Response+0x14>
		//ack
		return 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e000      	b.n	80004c6 <SPI_Verify_Response+0x16>
	}else{
		//nack
		return 0;
 80004c4:	2300      	movs	r3, #0
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <dummyReadDelayWrite>:

void dummyReadDelayWrite(SPI_RegDef_t* pSPIx){
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 80004da:	23ff      	movs	r3, #255	; 0xff
 80004dc:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyReadByte;

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 80004de:	f107 030e 	add.w	r3, r7, #14
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 ff0f 	bl	800130a <SPI_ReceiveData>

	// Insert a delay long enough for the arduino to make a measurement
	delay();
 80004ec:	f7ff fed8 	bl	80002a0 <delay>

	// Send a dummy byte
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 80004f0:	f107 030f 	add.w	r3, r7, #15
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 fed5 	bl	80012a8 <SPI_SendData>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <main>:

int main(void){
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b09d      	sub	sp, #116	; 0x74
 800050c:	af00      	add	r7, sp, #0
	uint8_t dummy_read;
	uint8_t dummy_write;

	// Initialize the appropriate GPIO pins on port B
	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 800050e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff feda 	bl	80002cc <SPI2_GPIO_Inits>

	// Initialize the SPI2 peripheral
	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 8000518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff53 	bl	80003c8 <SPI2_Init>

	// Initialize user button and interrupts
	GPIO_Handle_t USRPB;
	memset(&USRPB, 0, sizeof(USRPB));
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	220c      	movs	r2, #12
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f000 ff48 	bl	80013c0 <memset>
	USRBTN_Init(&USRPB);
 8000530:	f107 0320 	add.w	r3, r7, #32
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff75 	bl	8000424 <USRBTN_Init>

	SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 800053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fe4a 	bl	80011d8 <SPI_PeripheralControl>
		uint8_t cmdCode;
		uint8_t ackByte;
		uint8_t args[2];

		//******** 1. CMD_LED_CTRL *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000544:	bf00      	nop
 8000546:	2100      	movs	r1, #0
 8000548:	489e      	ldr	r0, [pc, #632]	; (80007c4 <main+0x2bc>)
 800054a:	f000 fcb1 	bl	8000eb0 <GPIO_ReadFromInputPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f8      	beq.n	8000546 <main+0x3e>
		delay();
 8000554:	f7ff fea4 	bl	80002a0 <delay>

		SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 8000558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe3b 	bl	80011d8 <SPI_PeripheralControl>

		cmdCode = COMMAND_LED_CTRL;
 8000562:	2350      	movs	r3, #80	; 0x50
 8000564:	77fb      	strb	r3, [r7, #31]

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 8000566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000568:	f107 021e 	add.w	r2, r7, #30
 800056c:	f107 011f 	add.w	r1, r7, #31
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ff79 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 8000576:	7fbb      	ldrb	r3, [r7, #30]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff99 	bl	80004b0 <SPI_Verify_Response>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00d      	beq.n	80005a0 <main+0x98>
			args[0] = LED_PIN;
 8000584:	2309      	movs	r3, #9
 8000586:	773b      	strb	r3, [r7, #28]
			args[1] = LED_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	777b      	strb	r3, [r7, #29]

			SPI_SendData(mySPIDevice.pSPIx, args, 2);
 800058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058e:	f107 011c 	add.w	r1, r7, #28
 8000592:	2202      	movs	r2, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fe87 	bl	80012a8 <SPI_SendData>

			printf("LED_CTRL Executed\n");
 800059a:	488b      	ldr	r0, [pc, #556]	; (80007c8 <main+0x2c0>)
 800059c:	f000 ff9e 	bl	80014dc <puts>
		}


		//******** 2. CMD_SENSOR_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80005a0:	bf00      	nop
 80005a2:	2100      	movs	r1, #0
 80005a4:	4887      	ldr	r0, [pc, #540]	; (80007c4 <main+0x2bc>)
 80005a6:	f000 fc83 	bl	8000eb0 <GPIO_ReadFromInputPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f8      	beq.n	80005a2 <main+0x9a>
		delay();
 80005b0:	f7ff fe76 	bl	80002a0 <delay>

		cmdCode = COMMAND_SENSOR_READ;
 80005b4:	2351      	movs	r3, #81	; 0x51
 80005b6:	77fb      	strb	r3, [r7, #31]

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80005b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ba:	f107 021e 	add.w	r2, r7, #30
 80005be:	f107 011f 	add.w	r1, r7, #31
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff50 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 80005c8:	7fbb      	ldrb	r3, [r7, #30]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff70 	bl	80004b0 <SPI_Verify_Response>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d018      	beq.n	8000608 <main+0x100>
			args[0] = ANALOG_PIN0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	773b      	strb	r3, [r7, #28]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 80005da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005dc:	f107 011c 	add.w	r1, r7, #28
 80005e0:	2201      	movs	r2, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe60 	bl	80012a8 <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 80005e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff71 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t analogRead;
			SPI_ReceiveData(mySPIDevice.pSPIx, &analogRead, 1);
 80005f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	2201      	movs	r2, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fe86 	bl	800130a <SPI_ReceiveData>

			printf("Read from analog: %d\n", analogRead);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	4619      	mov	r1, r3
 8000602:	4872      	ldr	r0, [pc, #456]	; (80007cc <main+0x2c4>)
 8000604:	f000 fee4 	bl	80013d0 <iprintf>
		}

		//******** 3. COMMAND_LED_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000608:	bf00      	nop
 800060a:	2100      	movs	r1, #0
 800060c:	486d      	ldr	r0, [pc, #436]	; (80007c4 <main+0x2bc>)
 800060e:	f000 fc4f 	bl	8000eb0 <GPIO_ReadFromInputPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f8      	beq.n	800060a <main+0x102>
		delay();
 8000618:	f7ff fe42 	bl	80002a0 <delay>

		cmdCode = COMMAND_LED_READ;
 800061c:	2352      	movs	r3, #82	; 0x52
 800061e:	77fb      	strb	r3, [r7, #31]

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 8000620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000622:	f107 021e 	add.w	r2, r7, #30
 8000626:	f107 011f 	add.w	r1, r7, #31
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff1c 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 8000630:	7fbb      	ldrb	r3, [r7, #30]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff3c 	bl	80004b0 <SPI_Verify_Response>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d018      	beq.n	8000670 <main+0x168>
			args[0] = LED_PIN;
 800063e:	2309      	movs	r3, #9
 8000640:	773b      	strb	r3, [r7, #28]

			SPI_SendData(SPI2, args, 1);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	4861      	ldr	r0, [pc, #388]	; (80007d0 <main+0x2c8>)
 800064c:	f000 fe2c 	bl	80012a8 <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 8000650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff3d 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t ledread;
			SPI_ReceiveData(SPI2, &ledread, 1);
 8000658:	f107 030e 	add.w	r3, r7, #14
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	485b      	ldr	r0, [pc, #364]	; (80007d0 <main+0x2c8>)
 8000662:	f000 fe52 	bl	800130a <SPI_ReceiveData>

			printf("Read from LED: %d\n", ledread);
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	4619      	mov	r1, r3
 800066a:	485a      	ldr	r0, [pc, #360]	; (80007d4 <main+0x2cc>)
 800066c:	f000 feb0 	bl	80013d0 <iprintf>
		}

		//******** 4. COMMAND_PRINT *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000670:	bf00      	nop
 8000672:	2100      	movs	r1, #0
 8000674:	4853      	ldr	r0, [pc, #332]	; (80007c4 <main+0x2bc>)
 8000676:	f000 fc1b 	bl	8000eb0 <GPIO_ReadFromInputPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0f8      	beq.n	8000672 <main+0x16a>
		delay();
 8000680:	f7ff fe0e 	bl	80002a0 <delay>

		cmdCode = COMMAND_PRINT;
 8000684:	2353      	movs	r3, #83	; 0x53
 8000686:	77fb      	strb	r3, [r7, #31]

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 8000688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068a:	f107 021e 	add.w	r2, r7, #30
 800068e:	f107 011f 	add.w	r1, r7, #31
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fee8 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 8000698:	7fbb      	ldrb	r3, [r7, #30]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff08 	bl	80004b0 <SPI_Verify_Response>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d038      	beq.n	8000718 <main+0x210>
			uint8_t message[] = "Test message";
 80006a6:	4b4c      	ldr	r3, [pc, #304]	; (80007d8 <main+0x2d0>)
 80006a8:	463c      	mov	r4, r7
 80006aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ac:	c407      	stmia	r4!, {r0, r1, r2}
 80006ae:	7023      	strb	r3, [r4, #0]

			args[0] = strlen((char*)message);
 80006b0:	463b      	mov	r3, r7
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd9c 	bl	80001f0 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	773b      	strb	r3, [r7, #28]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	f107 011c 	add.w	r1, r7, #28
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fdee 	bl	80012a8 <SPI_SendData>

			// Dummy read
			SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 80006cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ce:	f107 016a 	add.w	r1, r7, #106	; 0x6a
 80006d2:	2201      	movs	r2, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fe18 	bl	800130a <SPI_ReceiveData>

			delay();
 80006da:	f7ff fde1 	bl	80002a0 <delay>

			// Send message
			for(int i = 0; i < args[0]; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80006e2:	e011      	b.n	8000708 <main+0x200>
				SPI_SendData(mySPIDevice.pSPIx, &message[i], 1);
 80006e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006e6:	463a      	mov	r2, r7
 80006e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ea:	4413      	add	r3, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	f000 fdda 	bl	80012a8 <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 80006f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f6:	f107 016a 	add.w	r1, r7, #106	; 0x6a
 80006fa:	2201      	movs	r2, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fe04 	bl	800130a <SPI_ReceiveData>
			for(int i = 0; i < args[0]; i++){
 8000702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000704:	3301      	adds	r3, #1
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000708:	7f3b      	ldrb	r3, [r7, #28]
 800070a:	461a      	mov	r2, r3
 800070c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800070e:	4293      	cmp	r3, r2
 8000710:	dbe8      	blt.n	80006e4 <main+0x1dc>
			}

			printf("COMMAND_PRINT executed\n");
 8000712:	4832      	ldr	r0, [pc, #200]	; (80007dc <main+0x2d4>)
 8000714:	f000 fee2 	bl	80014dc <puts>
		}


		//******** 5. COMMAND_ID_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000718:	bf00      	nop
 800071a:	2100      	movs	r1, #0
 800071c:	4829      	ldr	r0, [pc, #164]	; (80007c4 <main+0x2bc>)
 800071e:	f000 fbc7 	bl	8000eb0 <GPIO_ReadFromInputPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f8      	beq.n	800071a <main+0x212>
		delay();
 8000728:	f7ff fdba 	bl	80002a0 <delay>

		cmdCode = COMMAND_ID_READ;
 800072c:	2354      	movs	r3, #84	; 0x54
 800072e:	77fb      	strb	r3, [r7, #31]

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	f107 021e 	add.w	r2, r7, #30
 8000736:	f107 011f 	add.w	r1, r7, #31
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe94 	bl	8000468 <SendCmdGetAckByte>

		uint8_t ID[11];

		if(SPI_Verify_Response(ackByte)){
 8000740:	7fbb      	ldrb	r3, [r7, #30]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff feb4 	bl	80004b0 <SPI_Verify_Response>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d025      	beq.n	800079a <main+0x292>

			for(uint8_t i = 0; i < 10; i++){
 800074e:	2300      	movs	r3, #0
 8000750:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000754:	e015      	b.n	8000782 <main+0x27a>
				SPI_SendData(mySPIDevice.pSPIx, &dummy_write, 1);
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	f107 0169 	add.w	r1, r7, #105	; 0x69
 800075c:	2201      	movs	r2, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fda2 	bl	80012a8 <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &ID[i], 1);
 8000764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000766:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800076a:	f107 0210 	add.w	r2, r7, #16
 800076e:	4413      	add	r3, r2
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	f000 fdc9 	bl	800130a <SPI_ReceiveData>
			for(uint8_t i = 0; i < 10; i++){
 8000778:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800077c:	3301      	adds	r3, #1
 800077e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000782:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000786:	2b09      	cmp	r3, #9
 8000788:	d9e5      	bls.n	8000756 <main+0x24e>
			}

			ID[11] = '\0';
 800078a:	2300      	movs	r3, #0
 800078c:	76fb      	strb	r3, [r7, #27]

			printf("ID retrieved from COMMAND_ID_READ:%s\n", (char*)ID);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <main+0x2d8>)
 8000796:	f000 fe1b 	bl	80013d0 <iprintf>
		}

		delay();
 800079a:	f7ff fd81 	bl	80002a0 <delay>

		while(SPI_GetFlagStatus(mySPIDevice.pSPIx, SPI_BSY_FLAG));
 800079e:	bf00      	nop
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fd6b 	bl	8001280 <SPI_GetFlagStatus>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f7      	bne.n	80007a0 <main+0x298>

		SPI_PeripheralControl(mySPIDevice.pSPIx, DISABLE);
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fd0f 	bl	80011d8 <SPI_PeripheralControl>

		printf("SPI Communication closed\n");
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x2dc>)
 80007bc:	f000 fe8e 	bl	80014dc <puts>
	while(1){
 80007c0:	e6c0      	b.n	8000544 <main+0x3c>
 80007c2:	bf00      	nop
 80007c4:	40020000 	.word	0x40020000
 80007c8:	080023f0 	.word	0x080023f0
 80007cc:	08002404 	.word	0x08002404
 80007d0:	40003800 	.word	0x40003800
 80007d4:	0800241c 	.word	0x0800241c
 80007d8:	0800248c 	.word	0x0800248c
 80007dc:	08002430 	.word	0x08002430
 80007e0:	08002448 	.word	0x08002448
 80007e4:	08002470 	.word	0x08002470

080007e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
	}

return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
	}
	return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return -1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	605a      	str	r2, [r3, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f000 fd3a 	bl	800136c <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20020000 	.word	0x20020000
 8000924:	00000400 	.word	0x00000400
 8000928:	20000080 	.word	0x20000080
 800092c:	20000098 	.word	0x20000098

08000930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000934:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095e:	f000 fd0b 	bl	8001378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fdd1 	bl	8000508 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000974:	0800253c 	.word	0x0800253c
  ldr r2, =_sbss
 8000978:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800097c:	20000094 	.word	0x20000094

08000980 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d162      	bne.n	8000a5c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a66      	ldr	r2, [pc, #408]	; (8000b34 <GPIO_PeriClockControl+0x1b0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800099e:	4b66      	ldr	r3, [pc, #408]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a65      	ldr	r2, [pc, #404]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80009aa:	e0bc      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a63      	ldr	r2, [pc, #396]	; (8000b3c <GPIO_PeriClockControl+0x1b8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009b4:	4b60      	ldr	r3, [pc, #384]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a5f      	ldr	r2, [pc, #380]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c0:	e0b1      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a5e      	ldr	r2, [pc, #376]	; (8000b40 <GPIO_PeriClockControl+0x1bc>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009ca:	4b5b      	ldr	r3, [pc, #364]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a5a      	ldr	r2, [pc, #360]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d6:	e0a6      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a5a      	ldr	r2, [pc, #360]	; (8000b44 <GPIO_PeriClockControl+0x1c0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009e0:	4b55      	ldr	r3, [pc, #340]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ec:	e09b      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <GPIO_PeriClockControl+0x1c4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009f6:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a02:	e090      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a51      	ldr	r2, [pc, #324]	; (8000b4c <GPIO_PeriClockControl+0x1c8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a49      	ldr	r2, [pc, #292]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a18:	e085      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <GPIO_PeriClockControl+0x1cc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a22:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a2e:	e07a      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a48      	ldr	r2, [pc, #288]	; (8000b54 <GPIO_PeriClockControl+0x1d0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a38:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a44:	e06f      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <GPIO_PeriClockControl+0x1d4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d16b      	bne.n	8000b26 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a39      	ldr	r2, [pc, #228]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a5a:	e064      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d161      	bne.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <GPIO_PeriClockControl+0x1b0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a76:	e056      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <GPIO_PeriClockControl+0x1b8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d106      	bne.n	8000a8e <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a2c      	ldr	r2, [pc, #176]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a86:	f023 0302 	bic.w	r3, r3, #2
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8c:	e04b      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <GPIO_PeriClockControl+0x1bc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d106      	bne.n	8000aa4 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a9c:	f023 0304 	bic.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa2:	e040      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <GPIO_PeriClockControl+0x1c0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d106      	bne.n	8000aba <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000ab2:	f023 0308 	bic.w	r3, r3, #8
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab8:	e035      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <GPIO_PeriClockControl+0x1c4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d106      	bne.n	8000ad0 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000ac8:	f023 0310 	bic.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ace:	e02a      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <GPIO_PeriClockControl+0x1c8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d106      	bne.n	8000ae6 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000ade:	f023 0320 	bic.w	r3, r3, #32
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae4:	e01f      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <GPIO_PeriClockControl+0x1cc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d106      	bne.n	8000afc <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000afa:	e014      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <GPIO_PeriClockControl+0x1d0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d106      	bne.n	8000b12 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b10:	e009      	b.n	8000b26 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <GPIO_PeriClockControl+0x1d4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d105      	bne.n	8000b26 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40021c00 	.word	0x40021c00
 8000b58:	40022000 	.word	0x40022000

08000b5c <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff0a 	bl	8000984 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d820      	bhi.n	8000bbe <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	795b      	ldrb	r3, [r3, #5]
 8000b80:	461a      	mov	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	791b      	ldrb	r3, [r3, #4]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	400a      	ands	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e0d0      	b.n	8000d60 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	795b      	ldrb	r3, [r3, #5]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d117      	bne.n	8000bf6 <GPIO_Init+0x9a>
				// 1. Configure the Falling trigger selection register (FTSR)
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <GPIO_Init+0x19c>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	7912      	ldrb	r2, [r2, #4]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	408a      	lsls	r2, r1
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a48      	ldr	r2, [pc, #288]	; (8000cf8 <GPIO_Init+0x19c>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bdc:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <GPIO_Init+0x19c>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	7912      	ldrb	r2, [r2, #4]
 8000be4:	4611      	mov	r1, r2
 8000be6:	2201      	movs	r2, #1
 8000be8:	408a      	lsls	r2, r1
 8000bea:	43d2      	mvns	r2, r2
 8000bec:	4611      	mov	r1, r2
 8000bee:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <GPIO_Init+0x19c>)
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	6093      	str	r3, [r2, #8]
 8000bf4:	e031      	b.n	8000c5a <GPIO_Init+0xfe>
			} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	795b      	ldrb	r3, [r3, #5]
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	d117      	bne.n	8000c2e <GPIO_Init+0xd2>
				// 1. Configure the rising trigger selection register (RTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	7912      	ldrb	r2, [r2, #4]
 8000c06:	4611      	mov	r1, r2
 8000c08:	2201      	movs	r2, #1
 8000c0a:	408a      	lsls	r2, r1
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	7912      	ldrb	r2, [r2, #4]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2201      	movs	r2, #1
 8000c20:	408a      	lsls	r2, r1
 8000c22:	43d2      	mvns	r2, r2
 8000c24:	4611      	mov	r1, r2
 8000c26:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c28:	400b      	ands	r3, r1
 8000c2a:	60d3      	str	r3, [r2, #12]
 8000c2c:	e015      	b.n	8000c5a <GPIO_Init+0xfe>
			} else {
				// 1. Configure both registers (RSTR and FTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	7912      	ldrb	r2, [r2, #4]
 8000c36:	4611      	mov	r1, r2
 8000c38:	2201      	movs	r2, #1
 8000c3a:	408a      	lsls	r2, r1
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	7912      	ldrb	r2, [r2, #4]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	408a      	lsls	r2, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <GPIO_Init+0x19c>)
 8000c56:	430b      	orrs	r3, r1
 8000c58:	60d3      	str	r3, [r2, #12]
			}

			// 2. Configure the GPIO port selection in SYSCFG_EXTICR

			SYSCFG_PCLK_EN();
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <GPIO_Init+0x1a0>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <GPIO_Init+0x1a0>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	791b      	ldrb	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	74bb      	strb	r3, [r7, #18]

			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <GPIO_Init+0x1a4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d050      	beq.n	8000d24 <GPIO_Init+0x1c8>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <GPIO_Init+0x1a8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d032      	beq.n	8000cf2 <GPIO_Init+0x196>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <GPIO_Init+0x1ac>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d02b      	beq.n	8000cee <GPIO_Init+0x192>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <GPIO_Init+0x1b0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d024      	beq.n	8000cea <GPIO_Init+0x18e>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <GPIO_Init+0x1b4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d01d      	beq.n	8000ce6 <GPIO_Init+0x18a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <GPIO_Init+0x1b8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d016      	beq.n	8000ce2 <GPIO_Init+0x186>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <GPIO_Init+0x1bc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00f      	beq.n	8000cde <GPIO_Init+0x182>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <GPIO_Init+0x1c0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d008      	beq.n	8000cda <GPIO_Init+0x17e>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <GPIO_Init+0x1c4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <GPIO_Init+0x17a>
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	e027      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e025      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cda:	2307      	movs	r3, #7
 8000cdc:	e023      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cde:	2306      	movs	r3, #6
 8000ce0:	e021      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	e01f      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e01d      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e01b      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e019      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e017      	b.n	8000d26 <GPIO_Init+0x1ca>
 8000cf6:	bf00      	nop
 8000cf8:	40013c00 	.word	0x40013c00
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020c00 	.word	0x40020c00
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40021400 	.word	0x40021400
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40021c00 	.word	0x40021c00
 8000d20:	40022000 	.word	0x40022000
 8000d24:	2300      	movs	r3, #0
 8000d26:	747b      	strb	r3, [r7, #17]

			SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000d28:	4a5f      	ldr	r2, [pc, #380]	; (8000ea8 <GPIO_Init+0x34c>)
 8000d2a:	7cfb      	ldrb	r3, [r7, #19]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d32:	7c79      	ldrb	r1, [r7, #17]
 8000d34:	7cbb      	ldrb	r3, [r7, #18]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	495a      	ldr	r1, [pc, #360]	; (8000ea8 <GPIO_Init+0x34c>)
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	4302      	orrs	r2, r0
 8000d44:	3302      	adds	r3, #2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// 3. Enable the EXTI interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <GPIO_Init+0x350>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7912      	ldrb	r2, [r2, #4]
 8000d52:	4611      	mov	r1, r2
 8000d54:	2201      	movs	r2, #1
 8000d56:	408a      	lsls	r2, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a54      	ldr	r2, [pc, #336]	; (8000eac <GPIO_Init+0x350>)
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	799b      	ldrb	r3, [r3, #6]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	791b      	ldrb	r3, [r3, #4]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2103      	movs	r1, #3
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	400a      	ands	r2, r1
 8000d92:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6899      	ldr	r1, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	79db      	ldrb	r3, [r3, #7]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d11f      	bne.n	8000e34 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7a1b      	ldrb	r3, [r3, #8]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2301      	movs	r3, #1
 8000e12:	408b      	lsls	r3, r1
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6859      	ldr	r1, [r3, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d131      	bne.n	8000ea0 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	7c3a      	ldrb	r2, [r7, #16]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	7c3a      	ldrb	r2, [r7, #16]
 8000e6e:	4001      	ands	r1, r0
 8000e70:	3208      	adds	r2, #8
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	7c3a      	ldrb	r2, [r7, #16]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	461a      	mov	r2, r3
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7c3a      	ldrb	r2, [r7, #16]
 8000e98:	4301      	orrs	r1, r0
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
	return value;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d133      	bne.n	8000f5a <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b1f      	cmp	r3, #31
 8000ef6:	d80a      	bhi.n	8000f0e <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <GPIO_IRQInterruptConfig+0xf8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4611      	mov	r1, r2
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <GPIO_IRQInterruptConfig+0xf8>)
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e058      	b.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b1f      	cmp	r3, #31
 8000f12:	d90f      	bls.n	8000f34 <GPIO_IRQInterruptConfig+0x58>
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b3f      	cmp	r3, #63	; 0x3f
 8000f18:	d80c      	bhi.n	8000f34 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <GPIO_IRQInterruptConfig+0xfc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	f002 021f 	and.w	r2, r2, #31
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <GPIO_IRQInterruptConfig+0xfc>)
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e045      	b.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b3f      	cmp	r3, #63	; 0x3f
 8000f38:	d942      	bls.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f3e:	d83f      	bhi.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <GPIO_IRQInterruptConfig+0x100>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	f002 021f 	and.w	r2, r2, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <GPIO_IRQInterruptConfig+0x100>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e032      	b.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d80a      	bhi.n	8000f76 <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <GPIO_IRQInterruptConfig+0x104>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <GPIO_IRQInterruptConfig+0x104>)
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e024      	b.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b1f      	cmp	r3, #31
 8000f7a:	d90f      	bls.n	8000f9c <GPIO_IRQInterruptConfig+0xc0>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f80:	d80c      	bhi.n	8000f9c <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <GPIO_IRQInterruptConfig+0x108>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	f002 021f 	and.w	r2, r2, #31
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <GPIO_IRQInterruptConfig+0x108>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e011      	b.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa0:	d90e      	bls.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b5f      	cmp	r3, #95	; 0x5f
 8000fa6:	d80b      	bhi.n	8000fc0 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <GPIO_IRQInterruptConfig+0x10c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	f002 021f 	and.w	r2, r2, #31
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <GPIO_IRQInterruptConfig+0x10c>)
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f811 	bl	8000fec <GPIO_IRQPriorityConfig>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000e104 	.word	0xe000e104
 8000fdc:	e000e108 	.word	0xe000e108
 8000fe0:	e000e180 	.word	0xe000e180
 8000fe4:	e000e184 	.word	0xe000e184
 8000fe8:	e000e188 	.word	0xe000e188

08000fec <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3304      	adds	r3, #4
 800100e:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001018:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800101c:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	431a      	orrs	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d120      	bne.n	8001090 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <SPI_PeriClockControl+0xa8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d106      	bne.n	8001064 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <SPI_PeriClockControl+0xac>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <SPI_PeriClockControl+0xac>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8001062:	e038      	b.n	80010d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <SPI_PeriClockControl+0xb0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d106      	bne.n	800107a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <SPI_PeriClockControl+0xac>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <SPI_PeriClockControl+0xac>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001078:	e02d      	b.n	80010d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <SPI_PeriClockControl+0xb4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d129      	bne.n	80010d6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <SPI_PeriClockControl+0xac>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <SPI_PeriClockControl+0xac>)
 8001088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800108e:	e022      	b.n	80010d6 <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11f      	bne.n	80010d6 <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <SPI_PeriClockControl+0xa8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d106      	bne.n	80010ac <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010aa:	e014      	b.n	80010d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <SPI_PeriClockControl+0xb0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d106      	bne.n	80010c2 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010c0:	e009      	b.n	80010d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SPI_PeriClockControl+0xb4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d105      	bne.n	80010d6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <SPI_PeriClockControl+0xac>)
 80010d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40013000 	.word	0x40013000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40003c00 	.word	0x40003c00

080010f4 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff9a 	bl	800103c <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d104      	bne.n	800112c <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e014      	b.n	8001156 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d104      	bne.n	800113e <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e00b      	b.n	8001156 <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	795b      	ldrb	r3, [r3, #5]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d107      	bne.n	8001156 <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800114c:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001154:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	799b      	ldrb	r3, [r3, #6]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	79db      	ldrb	r3, [r3, #7]
 8001168:	02db      	lsls	r3, r3, #11
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7a5b      	ldrb	r3, [r3, #9]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7a9b      	ldrb	r3, [r3, #10]
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
	SPI_SSIControl(pSPIHandle->pSPIx, ENABLE);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f835 	bl	8001210 <SPI_SSIControl>

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7adb      	ldrb	r3, [r3, #11]
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f804 	bl	80011d8 <SPI_PeripheralControl>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d106      	bne.n	80011f8 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 80011f6:	e005      	b.n	8001204 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SPI_SSIControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSIControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d106      	bne.n	8001230 <SPI_SSIControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);			// Pull SSI high
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
}
 800122e:	e005      	b.n	800123c <SPI_SSIControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SPI_SSOEControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d106      	bne.n	8001268 <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f043 0204 	orr.w	r2, r3, #4
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
}
 8001266:	e005      	b.n	8001274 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 0204 	bic.w	r2, r3, #4
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	// uint32_t dummy;

	while(len > 0){
 80012b4:	e021      	b.n	80012fa <SPI_SendData+0x52>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 80012b6:	bf00      	nop
 80012b8:	2102      	movs	r1, #2
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ffe0 	bl	8001280 <SPI_GetFlagStatus>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f8      	beq.n	80012b8 <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <SPI_SendData+0x3c>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3302      	adds	r3, #2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	e007      	b.n	80012f4 <SPI_SendData+0x4c>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
		}
		len--;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
	while(len > 0){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1da      	bne.n	80012b6 <SPI_SendData+0xe>
	}
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <SPI_ReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t* pRxBuffer, uint32_t len){
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
	while(len > 0){
 8001316:	e021      	b.n	800135c <SPI_ReceiveData+0x52>
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
 8001318:	bf00      	nop
 800131a:	2101      	movs	r1, #1
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff ffaf 	bl	8001280 <SPI_GetFlagStatus>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f8      	beq.n	800131a <SPI_ReceiveData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <SPI_ReceiveData+0x3c>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	b29a      	uxth	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	801a      	strh	r2, [r3, #0]
			pRxBuffer += 2;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3302      	adds	r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	e007      	b.n	8001356 <SPI_ReceiveData+0x4c>
		} else {
			*((uint8_t*)pRxBuffer) = pSPIx->DR;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3301      	adds	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3b01      	subs	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
	while(len > 0){
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1da      	bne.n	8001318 <SPI_ReceiveData+0xe>
	}
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <__errno>:
 800136c:	4b01      	ldr	r3, [pc, #4]	; (8001374 <__errno+0x8>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <__libc_init_array>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	4d0d      	ldr	r5, [pc, #52]	; (80013b0 <__libc_init_array+0x38>)
 800137c:	4c0d      	ldr	r4, [pc, #52]	; (80013b4 <__libc_init_array+0x3c>)
 800137e:	1b64      	subs	r4, r4, r5
 8001380:	10a4      	asrs	r4, r4, #2
 8001382:	2600      	movs	r6, #0
 8001384:	42a6      	cmp	r6, r4
 8001386:	d109      	bne.n	800139c <__libc_init_array+0x24>
 8001388:	4d0b      	ldr	r5, [pc, #44]	; (80013b8 <__libc_init_array+0x40>)
 800138a:	4c0c      	ldr	r4, [pc, #48]	; (80013bc <__libc_init_array+0x44>)
 800138c:	f001 f824 	bl	80023d8 <_init>
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	2600      	movs	r6, #0
 8001396:	42a6      	cmp	r6, r4
 8001398:	d105      	bne.n	80013a6 <__libc_init_array+0x2e>
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a0:	4798      	blx	r3
 80013a2:	3601      	adds	r6, #1
 80013a4:	e7ee      	b.n	8001384 <__libc_init_array+0xc>
 80013a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013aa:	4798      	blx	r3
 80013ac:	3601      	adds	r6, #1
 80013ae:	e7f2      	b.n	8001396 <__libc_init_array+0x1e>
 80013b0:	08002534 	.word	0x08002534
 80013b4:	08002534 	.word	0x08002534
 80013b8:	08002534 	.word	0x08002534
 80013bc:	08002538 	.word	0x08002538

080013c0 <memset>:
 80013c0:	4402      	add	r2, r0
 80013c2:	4603      	mov	r3, r0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d100      	bne.n	80013ca <memset+0xa>
 80013c8:	4770      	bx	lr
 80013ca:	f803 1b01 	strb.w	r1, [r3], #1
 80013ce:	e7f9      	b.n	80013c4 <memset+0x4>

080013d0 <iprintf>:
 80013d0:	b40f      	push	{r0, r1, r2, r3}
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <iprintf+0x2c>)
 80013d4:	b513      	push	{r0, r1, r4, lr}
 80013d6:	681c      	ldr	r4, [r3, #0]
 80013d8:	b124      	cbz	r4, 80013e4 <iprintf+0x14>
 80013da:	69a3      	ldr	r3, [r4, #24]
 80013dc:	b913      	cbnz	r3, 80013e4 <iprintf+0x14>
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 fa5e 	bl	80018a0 <__sinit>
 80013e4:	ab05      	add	r3, sp, #20
 80013e6:	9a04      	ldr	r2, [sp, #16]
 80013e8:	68a1      	ldr	r1, [r4, #8]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	4620      	mov	r0, r4
 80013ee:	f000 fc67 	bl	8001cc0 <_vfiprintf_r>
 80013f2:	b002      	add	sp, #8
 80013f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013f8:	b004      	add	sp, #16
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000

08001400 <_puts_r>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	460e      	mov	r6, r1
 8001404:	4605      	mov	r5, r0
 8001406:	b118      	cbz	r0, 8001410 <_puts_r+0x10>
 8001408:	6983      	ldr	r3, [r0, #24]
 800140a:	b90b      	cbnz	r3, 8001410 <_puts_r+0x10>
 800140c:	f000 fa48 	bl	80018a0 <__sinit>
 8001410:	69ab      	ldr	r3, [r5, #24]
 8001412:	68ac      	ldr	r4, [r5, #8]
 8001414:	b913      	cbnz	r3, 800141c <_puts_r+0x1c>
 8001416:	4628      	mov	r0, r5
 8001418:	f000 fa42 	bl	80018a0 <__sinit>
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <_puts_r+0xd0>)
 800141e:	429c      	cmp	r4, r3
 8001420:	d120      	bne.n	8001464 <_puts_r+0x64>
 8001422:	686c      	ldr	r4, [r5, #4]
 8001424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001426:	07db      	lsls	r3, r3, #31
 8001428:	d405      	bmi.n	8001436 <_puts_r+0x36>
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	0598      	lsls	r0, r3, #22
 800142e:	d402      	bmi.n	8001436 <_puts_r+0x36>
 8001430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001432:	f000 fad3 	bl	80019dc <__retarget_lock_acquire_recursive>
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	0719      	lsls	r1, r3, #28
 800143a:	d51d      	bpl.n	8001478 <_puts_r+0x78>
 800143c:	6923      	ldr	r3, [r4, #16]
 800143e:	b1db      	cbz	r3, 8001478 <_puts_r+0x78>
 8001440:	3e01      	subs	r6, #1
 8001442:	68a3      	ldr	r3, [r4, #8]
 8001444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001448:	3b01      	subs	r3, #1
 800144a:	60a3      	str	r3, [r4, #8]
 800144c:	bb39      	cbnz	r1, 800149e <_puts_r+0x9e>
 800144e:	2b00      	cmp	r3, #0
 8001450:	da38      	bge.n	80014c4 <_puts_r+0xc4>
 8001452:	4622      	mov	r2, r4
 8001454:	210a      	movs	r1, #10
 8001456:	4628      	mov	r0, r5
 8001458:	f000 f848 	bl	80014ec <__swbuf_r>
 800145c:	3001      	adds	r0, #1
 800145e:	d011      	beq.n	8001484 <_puts_r+0x84>
 8001460:	250a      	movs	r5, #10
 8001462:	e011      	b.n	8001488 <_puts_r+0x88>
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <_puts_r+0xd4>)
 8001466:	429c      	cmp	r4, r3
 8001468:	d101      	bne.n	800146e <_puts_r+0x6e>
 800146a:	68ac      	ldr	r4, [r5, #8]
 800146c:	e7da      	b.n	8001424 <_puts_r+0x24>
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <_puts_r+0xd8>)
 8001470:	429c      	cmp	r4, r3
 8001472:	bf08      	it	eq
 8001474:	68ec      	ldreq	r4, [r5, #12]
 8001476:	e7d5      	b.n	8001424 <_puts_r+0x24>
 8001478:	4621      	mov	r1, r4
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f888 	bl	8001590 <__swsetup_r>
 8001480:	2800      	cmp	r0, #0
 8001482:	d0dd      	beq.n	8001440 <_puts_r+0x40>
 8001484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800148a:	07da      	lsls	r2, r3, #31
 800148c:	d405      	bmi.n	800149a <_puts_r+0x9a>
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	059b      	lsls	r3, r3, #22
 8001492:	d402      	bmi.n	800149a <_puts_r+0x9a>
 8001494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001496:	f000 faa2 	bl	80019de <__retarget_lock_release_recursive>
 800149a:	4628      	mov	r0, r5
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da04      	bge.n	80014ac <_puts_r+0xac>
 80014a2:	69a2      	ldr	r2, [r4, #24]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dc06      	bgt.n	80014b6 <_puts_r+0xb6>
 80014a8:	290a      	cmp	r1, #10
 80014aa:	d004      	beq.n	80014b6 <_puts_r+0xb6>
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	6022      	str	r2, [r4, #0]
 80014b2:	7019      	strb	r1, [r3, #0]
 80014b4:	e7c5      	b.n	8001442 <_puts_r+0x42>
 80014b6:	4622      	mov	r2, r4
 80014b8:	4628      	mov	r0, r5
 80014ba:	f000 f817 	bl	80014ec <__swbuf_r>
 80014be:	3001      	adds	r0, #1
 80014c0:	d1bf      	bne.n	8001442 <_puts_r+0x42>
 80014c2:	e7df      	b.n	8001484 <_puts_r+0x84>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	250a      	movs	r5, #10
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	6022      	str	r2, [r4, #0]
 80014cc:	701d      	strb	r5, [r3, #0]
 80014ce:	e7db      	b.n	8001488 <_puts_r+0x88>
 80014d0:	080024c0 	.word	0x080024c0
 80014d4:	080024e0 	.word	0x080024e0
 80014d8:	080024a0 	.word	0x080024a0

080014dc <puts>:
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <puts+0xc>)
 80014de:	4601      	mov	r1, r0
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f7ff bf8d 	b.w	8001400 <_puts_r>
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000

080014ec <__swbuf_r>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	460e      	mov	r6, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	4605      	mov	r5, r0
 80014f4:	b118      	cbz	r0, 80014fe <__swbuf_r+0x12>
 80014f6:	6983      	ldr	r3, [r0, #24]
 80014f8:	b90b      	cbnz	r3, 80014fe <__swbuf_r+0x12>
 80014fa:	f000 f9d1 	bl	80018a0 <__sinit>
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <__swbuf_r+0x98>)
 8001500:	429c      	cmp	r4, r3
 8001502:	d12b      	bne.n	800155c <__swbuf_r+0x70>
 8001504:	686c      	ldr	r4, [r5, #4]
 8001506:	69a3      	ldr	r3, [r4, #24]
 8001508:	60a3      	str	r3, [r4, #8]
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	071a      	lsls	r2, r3, #28
 800150e:	d52f      	bpl.n	8001570 <__swbuf_r+0x84>
 8001510:	6923      	ldr	r3, [r4, #16]
 8001512:	b36b      	cbz	r3, 8001570 <__swbuf_r+0x84>
 8001514:	6923      	ldr	r3, [r4, #16]
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	1ac0      	subs	r0, r0, r3
 800151a:	6963      	ldr	r3, [r4, #20]
 800151c:	b2f6      	uxtb	r6, r6
 800151e:	4283      	cmp	r3, r0
 8001520:	4637      	mov	r7, r6
 8001522:	dc04      	bgt.n	800152e <__swbuf_r+0x42>
 8001524:	4621      	mov	r1, r4
 8001526:	4628      	mov	r0, r5
 8001528:	f000 f926 	bl	8001778 <_fflush_r>
 800152c:	bb30      	cbnz	r0, 800157c <__swbuf_r+0x90>
 800152e:	68a3      	ldr	r3, [r4, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60a3      	str	r3, [r4, #8]
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	6022      	str	r2, [r4, #0]
 800153a:	701e      	strb	r6, [r3, #0]
 800153c:	6963      	ldr	r3, [r4, #20]
 800153e:	3001      	adds	r0, #1
 8001540:	4283      	cmp	r3, r0
 8001542:	d004      	beq.n	800154e <__swbuf_r+0x62>
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	07db      	lsls	r3, r3, #31
 8001548:	d506      	bpl.n	8001558 <__swbuf_r+0x6c>
 800154a:	2e0a      	cmp	r6, #10
 800154c:	d104      	bne.n	8001558 <__swbuf_r+0x6c>
 800154e:	4621      	mov	r1, r4
 8001550:	4628      	mov	r0, r5
 8001552:	f000 f911 	bl	8001778 <_fflush_r>
 8001556:	b988      	cbnz	r0, 800157c <__swbuf_r+0x90>
 8001558:	4638      	mov	r0, r7
 800155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <__swbuf_r+0x9c>)
 800155e:	429c      	cmp	r4, r3
 8001560:	d101      	bne.n	8001566 <__swbuf_r+0x7a>
 8001562:	68ac      	ldr	r4, [r5, #8]
 8001564:	e7cf      	b.n	8001506 <__swbuf_r+0x1a>
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <__swbuf_r+0xa0>)
 8001568:	429c      	cmp	r4, r3
 800156a:	bf08      	it	eq
 800156c:	68ec      	ldreq	r4, [r5, #12]
 800156e:	e7ca      	b.n	8001506 <__swbuf_r+0x1a>
 8001570:	4621      	mov	r1, r4
 8001572:	4628      	mov	r0, r5
 8001574:	f000 f80c 	bl	8001590 <__swsetup_r>
 8001578:	2800      	cmp	r0, #0
 800157a:	d0cb      	beq.n	8001514 <__swbuf_r+0x28>
 800157c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001580:	e7ea      	b.n	8001558 <__swbuf_r+0x6c>
 8001582:	bf00      	nop
 8001584:	080024c0 	.word	0x080024c0
 8001588:	080024e0 	.word	0x080024e0
 800158c:	080024a0 	.word	0x080024a0

08001590 <__swsetup_r>:
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <__swsetup_r+0xcc>)
 8001592:	b570      	push	{r4, r5, r6, lr}
 8001594:	681d      	ldr	r5, [r3, #0]
 8001596:	4606      	mov	r6, r0
 8001598:	460c      	mov	r4, r1
 800159a:	b125      	cbz	r5, 80015a6 <__swsetup_r+0x16>
 800159c:	69ab      	ldr	r3, [r5, #24]
 800159e:	b913      	cbnz	r3, 80015a6 <__swsetup_r+0x16>
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f97d 	bl	80018a0 <__sinit>
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <__swsetup_r+0xd0>)
 80015a8:	429c      	cmp	r4, r3
 80015aa:	d10f      	bne.n	80015cc <__swsetup_r+0x3c>
 80015ac:	686c      	ldr	r4, [r5, #4]
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015b4:	0719      	lsls	r1, r3, #28
 80015b6:	d42c      	bmi.n	8001612 <__swsetup_r+0x82>
 80015b8:	06dd      	lsls	r5, r3, #27
 80015ba:	d411      	bmi.n	80015e0 <__swsetup_r+0x50>
 80015bc:	2309      	movs	r3, #9
 80015be:	6033      	str	r3, [r6, #0]
 80015c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015c4:	81a3      	strh	r3, [r4, #12]
 80015c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ca:	e03e      	b.n	800164a <__swsetup_r+0xba>
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <__swsetup_r+0xd4>)
 80015ce:	429c      	cmp	r4, r3
 80015d0:	d101      	bne.n	80015d6 <__swsetup_r+0x46>
 80015d2:	68ac      	ldr	r4, [r5, #8]
 80015d4:	e7eb      	b.n	80015ae <__swsetup_r+0x1e>
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <__swsetup_r+0xd8>)
 80015d8:	429c      	cmp	r4, r3
 80015da:	bf08      	it	eq
 80015dc:	68ec      	ldreq	r4, [r5, #12]
 80015de:	e7e6      	b.n	80015ae <__swsetup_r+0x1e>
 80015e0:	0758      	lsls	r0, r3, #29
 80015e2:	d512      	bpl.n	800160a <__swsetup_r+0x7a>
 80015e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015e6:	b141      	cbz	r1, 80015fa <__swsetup_r+0x6a>
 80015e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015ec:	4299      	cmp	r1, r3
 80015ee:	d002      	beq.n	80015f6 <__swsetup_r+0x66>
 80015f0:	4630      	mov	r0, r6
 80015f2:	f000 fa5b 	bl	8001aac <_free_r>
 80015f6:	2300      	movs	r3, #0
 80015f8:	6363      	str	r3, [r4, #52]	; 0x34
 80015fa:	89a3      	ldrh	r3, [r4, #12]
 80015fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001600:	81a3      	strh	r3, [r4, #12]
 8001602:	2300      	movs	r3, #0
 8001604:	6063      	str	r3, [r4, #4]
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	81a3      	strh	r3, [r4, #12]
 8001612:	6923      	ldr	r3, [r4, #16]
 8001614:	b94b      	cbnz	r3, 800162a <__swsetup_r+0x9a>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800161c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001620:	d003      	beq.n	800162a <__swsetup_r+0x9a>
 8001622:	4621      	mov	r1, r4
 8001624:	4630      	mov	r0, r6
 8001626:	f000 fa01 	bl	8001a2c <__smakebuf_r>
 800162a:	89a0      	ldrh	r0, [r4, #12]
 800162c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001630:	f010 0301 	ands.w	r3, r0, #1
 8001634:	d00a      	beq.n	800164c <__swsetup_r+0xbc>
 8001636:	2300      	movs	r3, #0
 8001638:	60a3      	str	r3, [r4, #8]
 800163a:	6963      	ldr	r3, [r4, #20]
 800163c:	425b      	negs	r3, r3
 800163e:	61a3      	str	r3, [r4, #24]
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	b943      	cbnz	r3, 8001656 <__swsetup_r+0xc6>
 8001644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001648:	d1ba      	bne.n	80015c0 <__swsetup_r+0x30>
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	0781      	lsls	r1, r0, #30
 800164e:	bf58      	it	pl
 8001650:	6963      	ldrpl	r3, [r4, #20]
 8001652:	60a3      	str	r3, [r4, #8]
 8001654:	e7f4      	b.n	8001640 <__swsetup_r+0xb0>
 8001656:	2000      	movs	r0, #0
 8001658:	e7f7      	b.n	800164a <__swsetup_r+0xba>
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	080024c0 	.word	0x080024c0
 8001664:	080024e0 	.word	0x080024e0
 8001668:	080024a0 	.word	0x080024a0

0800166c <__sflush_r>:
 800166c:	898a      	ldrh	r2, [r1, #12]
 800166e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001672:	4605      	mov	r5, r0
 8001674:	0710      	lsls	r0, r2, #28
 8001676:	460c      	mov	r4, r1
 8001678:	d458      	bmi.n	800172c <__sflush_r+0xc0>
 800167a:	684b      	ldr	r3, [r1, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc05      	bgt.n	800168c <__sflush_r+0x20>
 8001680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	dc02      	bgt.n	800168c <__sflush_r+0x20>
 8001686:	2000      	movs	r0, #0
 8001688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800168c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800168e:	2e00      	cmp	r6, #0
 8001690:	d0f9      	beq.n	8001686 <__sflush_r+0x1a>
 8001692:	2300      	movs	r3, #0
 8001694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001698:	682f      	ldr	r7, [r5, #0]
 800169a:	602b      	str	r3, [r5, #0]
 800169c:	d032      	beq.n	8001704 <__sflush_r+0x98>
 800169e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016a0:	89a3      	ldrh	r3, [r4, #12]
 80016a2:	075a      	lsls	r2, r3, #29
 80016a4:	d505      	bpl.n	80016b2 <__sflush_r+0x46>
 80016a6:	6863      	ldr	r3, [r4, #4]
 80016a8:	1ac0      	subs	r0, r0, r3
 80016aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016ac:	b10b      	cbz	r3, 80016b2 <__sflush_r+0x46>
 80016ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b0:	1ac0      	subs	r0, r0, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	4602      	mov	r2, r0
 80016b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016b8:	6a21      	ldr	r1, [r4, #32]
 80016ba:	4628      	mov	r0, r5
 80016bc:	47b0      	blx	r6
 80016be:	1c43      	adds	r3, r0, #1
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	d106      	bne.n	80016d2 <__sflush_r+0x66>
 80016c4:	6829      	ldr	r1, [r5, #0]
 80016c6:	291d      	cmp	r1, #29
 80016c8:	d82c      	bhi.n	8001724 <__sflush_r+0xb8>
 80016ca:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <__sflush_r+0x108>)
 80016cc:	40ca      	lsrs	r2, r1
 80016ce:	07d6      	lsls	r6, r2, #31
 80016d0:	d528      	bpl.n	8001724 <__sflush_r+0xb8>
 80016d2:	2200      	movs	r2, #0
 80016d4:	6062      	str	r2, [r4, #4]
 80016d6:	04d9      	lsls	r1, r3, #19
 80016d8:	6922      	ldr	r2, [r4, #16]
 80016da:	6022      	str	r2, [r4, #0]
 80016dc:	d504      	bpl.n	80016e8 <__sflush_r+0x7c>
 80016de:	1c42      	adds	r2, r0, #1
 80016e0:	d101      	bne.n	80016e6 <__sflush_r+0x7a>
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	b903      	cbnz	r3, 80016e8 <__sflush_r+0x7c>
 80016e6:	6560      	str	r0, [r4, #84]	; 0x54
 80016e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016ea:	602f      	str	r7, [r5, #0]
 80016ec:	2900      	cmp	r1, #0
 80016ee:	d0ca      	beq.n	8001686 <__sflush_r+0x1a>
 80016f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016f4:	4299      	cmp	r1, r3
 80016f6:	d002      	beq.n	80016fe <__sflush_r+0x92>
 80016f8:	4628      	mov	r0, r5
 80016fa:	f000 f9d7 	bl	8001aac <_free_r>
 80016fe:	2000      	movs	r0, #0
 8001700:	6360      	str	r0, [r4, #52]	; 0x34
 8001702:	e7c1      	b.n	8001688 <__sflush_r+0x1c>
 8001704:	6a21      	ldr	r1, [r4, #32]
 8001706:	2301      	movs	r3, #1
 8001708:	4628      	mov	r0, r5
 800170a:	47b0      	blx	r6
 800170c:	1c41      	adds	r1, r0, #1
 800170e:	d1c7      	bne.n	80016a0 <__sflush_r+0x34>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0c4      	beq.n	80016a0 <__sflush_r+0x34>
 8001716:	2b1d      	cmp	r3, #29
 8001718:	d001      	beq.n	800171e <__sflush_r+0xb2>
 800171a:	2b16      	cmp	r3, #22
 800171c:	d101      	bne.n	8001722 <__sflush_r+0xb6>
 800171e:	602f      	str	r7, [r5, #0]
 8001720:	e7b1      	b.n	8001686 <__sflush_r+0x1a>
 8001722:	89a3      	ldrh	r3, [r4, #12]
 8001724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	e7ad      	b.n	8001688 <__sflush_r+0x1c>
 800172c:	690f      	ldr	r7, [r1, #16]
 800172e:	2f00      	cmp	r7, #0
 8001730:	d0a9      	beq.n	8001686 <__sflush_r+0x1a>
 8001732:	0793      	lsls	r3, r2, #30
 8001734:	680e      	ldr	r6, [r1, #0]
 8001736:	bf08      	it	eq
 8001738:	694b      	ldreq	r3, [r1, #20]
 800173a:	600f      	str	r7, [r1, #0]
 800173c:	bf18      	it	ne
 800173e:	2300      	movne	r3, #0
 8001740:	eba6 0807 	sub.w	r8, r6, r7
 8001744:	608b      	str	r3, [r1, #8]
 8001746:	f1b8 0f00 	cmp.w	r8, #0
 800174a:	dd9c      	ble.n	8001686 <__sflush_r+0x1a>
 800174c:	6a21      	ldr	r1, [r4, #32]
 800174e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001750:	4643      	mov	r3, r8
 8001752:	463a      	mov	r2, r7
 8001754:	4628      	mov	r0, r5
 8001756:	47b0      	blx	r6
 8001758:	2800      	cmp	r0, #0
 800175a:	dc06      	bgt.n	800176a <__sflush_r+0xfe>
 800175c:	89a3      	ldrh	r3, [r4, #12]
 800175e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001762:	81a3      	strh	r3, [r4, #12]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	e78e      	b.n	8001688 <__sflush_r+0x1c>
 800176a:	4407      	add	r7, r0
 800176c:	eba8 0800 	sub.w	r8, r8, r0
 8001770:	e7e9      	b.n	8001746 <__sflush_r+0xda>
 8001772:	bf00      	nop
 8001774:	20400001 	.word	0x20400001

08001778 <_fflush_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	690b      	ldr	r3, [r1, #16]
 800177c:	4605      	mov	r5, r0
 800177e:	460c      	mov	r4, r1
 8001780:	b913      	cbnz	r3, 8001788 <_fflush_r+0x10>
 8001782:	2500      	movs	r5, #0
 8001784:	4628      	mov	r0, r5
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	b118      	cbz	r0, 8001792 <_fflush_r+0x1a>
 800178a:	6983      	ldr	r3, [r0, #24]
 800178c:	b90b      	cbnz	r3, 8001792 <_fflush_r+0x1a>
 800178e:	f000 f887 	bl	80018a0 <__sinit>
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <_fflush_r+0x6c>)
 8001794:	429c      	cmp	r4, r3
 8001796:	d11b      	bne.n	80017d0 <_fflush_r+0x58>
 8001798:	686c      	ldr	r4, [r5, #4]
 800179a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ef      	beq.n	8001782 <_fflush_r+0xa>
 80017a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017a4:	07d0      	lsls	r0, r2, #31
 80017a6:	d404      	bmi.n	80017b2 <_fflush_r+0x3a>
 80017a8:	0599      	lsls	r1, r3, #22
 80017aa:	d402      	bmi.n	80017b2 <_fflush_r+0x3a>
 80017ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ae:	f000 f915 	bl	80019dc <__retarget_lock_acquire_recursive>
 80017b2:	4628      	mov	r0, r5
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff ff59 	bl	800166c <__sflush_r>
 80017ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017bc:	07da      	lsls	r2, r3, #31
 80017be:	4605      	mov	r5, r0
 80017c0:	d4e0      	bmi.n	8001784 <_fflush_r+0xc>
 80017c2:	89a3      	ldrh	r3, [r4, #12]
 80017c4:	059b      	lsls	r3, r3, #22
 80017c6:	d4dd      	bmi.n	8001784 <_fflush_r+0xc>
 80017c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ca:	f000 f908 	bl	80019de <__retarget_lock_release_recursive>
 80017ce:	e7d9      	b.n	8001784 <_fflush_r+0xc>
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <_fflush_r+0x70>)
 80017d2:	429c      	cmp	r4, r3
 80017d4:	d101      	bne.n	80017da <_fflush_r+0x62>
 80017d6:	68ac      	ldr	r4, [r5, #8]
 80017d8:	e7df      	b.n	800179a <_fflush_r+0x22>
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <_fflush_r+0x74>)
 80017dc:	429c      	cmp	r4, r3
 80017de:	bf08      	it	eq
 80017e0:	68ec      	ldreq	r4, [r5, #12]
 80017e2:	e7da      	b.n	800179a <_fflush_r+0x22>
 80017e4:	080024c0 	.word	0x080024c0
 80017e8:	080024e0 	.word	0x080024e0
 80017ec:	080024a0 	.word	0x080024a0

080017f0 <std>:
 80017f0:	2300      	movs	r3, #0
 80017f2:	b510      	push	{r4, lr}
 80017f4:	4604      	mov	r4, r0
 80017f6:	e9c0 3300 	strd	r3, r3, [r0]
 80017fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017fe:	6083      	str	r3, [r0, #8]
 8001800:	8181      	strh	r1, [r0, #12]
 8001802:	6643      	str	r3, [r0, #100]	; 0x64
 8001804:	81c2      	strh	r2, [r0, #14]
 8001806:	6183      	str	r3, [r0, #24]
 8001808:	4619      	mov	r1, r3
 800180a:	2208      	movs	r2, #8
 800180c:	305c      	adds	r0, #92	; 0x5c
 800180e:	f7ff fdd7 	bl	80013c0 <memset>
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <std+0x38>)
 8001814:	6263      	str	r3, [r4, #36]	; 0x24
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <std+0x3c>)
 8001818:	62a3      	str	r3, [r4, #40]	; 0x28
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <std+0x40>)
 800181c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <std+0x44>)
 8001820:	6224      	str	r4, [r4, #32]
 8001822:	6323      	str	r3, [r4, #48]	; 0x30
 8001824:	bd10      	pop	{r4, pc}
 8001826:	bf00      	nop
 8001828:	08002269 	.word	0x08002269
 800182c:	0800228b 	.word	0x0800228b
 8001830:	080022c3 	.word	0x080022c3
 8001834:	080022e7 	.word	0x080022e7

08001838 <_cleanup_r>:
 8001838:	4901      	ldr	r1, [pc, #4]	; (8001840 <_cleanup_r+0x8>)
 800183a:	f000 b8af 	b.w	800199c <_fwalk_reent>
 800183e:	bf00      	nop
 8001840:	08001779 	.word	0x08001779

08001844 <__sfmoreglue>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	2268      	movs	r2, #104	; 0x68
 8001848:	1e4d      	subs	r5, r1, #1
 800184a:	4355      	muls	r5, r2
 800184c:	460e      	mov	r6, r1
 800184e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001852:	f000 f997 	bl	8001b84 <_malloc_r>
 8001856:	4604      	mov	r4, r0
 8001858:	b140      	cbz	r0, 800186c <__sfmoreglue+0x28>
 800185a:	2100      	movs	r1, #0
 800185c:	e9c0 1600 	strd	r1, r6, [r0]
 8001860:	300c      	adds	r0, #12
 8001862:	60a0      	str	r0, [r4, #8]
 8001864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001868:	f7ff fdaa 	bl	80013c0 <memset>
 800186c:	4620      	mov	r0, r4
 800186e:	bd70      	pop	{r4, r5, r6, pc}

08001870 <__sfp_lock_acquire>:
 8001870:	4801      	ldr	r0, [pc, #4]	; (8001878 <__sfp_lock_acquire+0x8>)
 8001872:	f000 b8b3 	b.w	80019dc <__retarget_lock_acquire_recursive>
 8001876:	bf00      	nop
 8001878:	20000085 	.word	0x20000085

0800187c <__sfp_lock_release>:
 800187c:	4801      	ldr	r0, [pc, #4]	; (8001884 <__sfp_lock_release+0x8>)
 800187e:	f000 b8ae 	b.w	80019de <__retarget_lock_release_recursive>
 8001882:	bf00      	nop
 8001884:	20000085 	.word	0x20000085

08001888 <__sinit_lock_acquire>:
 8001888:	4801      	ldr	r0, [pc, #4]	; (8001890 <__sinit_lock_acquire+0x8>)
 800188a:	f000 b8a7 	b.w	80019dc <__retarget_lock_acquire_recursive>
 800188e:	bf00      	nop
 8001890:	20000086 	.word	0x20000086

08001894 <__sinit_lock_release>:
 8001894:	4801      	ldr	r0, [pc, #4]	; (800189c <__sinit_lock_release+0x8>)
 8001896:	f000 b8a2 	b.w	80019de <__retarget_lock_release_recursive>
 800189a:	bf00      	nop
 800189c:	20000086 	.word	0x20000086

080018a0 <__sinit>:
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	f7ff fff0 	bl	8001888 <__sinit_lock_acquire>
 80018a8:	69a3      	ldr	r3, [r4, #24]
 80018aa:	b11b      	cbz	r3, 80018b4 <__sinit+0x14>
 80018ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b0:	f7ff bff0 	b.w	8001894 <__sinit_lock_release>
 80018b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80018b8:	6523      	str	r3, [r4, #80]	; 0x50
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <__sinit+0x68>)
 80018bc:	4a13      	ldr	r2, [pc, #76]	; (800190c <__sinit+0x6c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80018c2:	42a3      	cmp	r3, r4
 80018c4:	bf04      	itt	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	61a3      	streq	r3, [r4, #24]
 80018ca:	4620      	mov	r0, r4
 80018cc:	f000 f820 	bl	8001910 <__sfp>
 80018d0:	6060      	str	r0, [r4, #4]
 80018d2:	4620      	mov	r0, r4
 80018d4:	f000 f81c 	bl	8001910 <__sfp>
 80018d8:	60a0      	str	r0, [r4, #8]
 80018da:	4620      	mov	r0, r4
 80018dc:	f000 f818 	bl	8001910 <__sfp>
 80018e0:	2200      	movs	r2, #0
 80018e2:	60e0      	str	r0, [r4, #12]
 80018e4:	2104      	movs	r1, #4
 80018e6:	6860      	ldr	r0, [r4, #4]
 80018e8:	f7ff ff82 	bl	80017f0 <std>
 80018ec:	68a0      	ldr	r0, [r4, #8]
 80018ee:	2201      	movs	r2, #1
 80018f0:	2109      	movs	r1, #9
 80018f2:	f7ff ff7d 	bl	80017f0 <std>
 80018f6:	68e0      	ldr	r0, [r4, #12]
 80018f8:	2202      	movs	r2, #2
 80018fa:	2112      	movs	r1, #18
 80018fc:	f7ff ff78 	bl	80017f0 <std>
 8001900:	2301      	movs	r3, #1
 8001902:	61a3      	str	r3, [r4, #24]
 8001904:	e7d2      	b.n	80018ac <__sinit+0xc>
 8001906:	bf00      	nop
 8001908:	0800249c 	.word	0x0800249c
 800190c:	08001839 	.word	0x08001839

08001910 <__sfp>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	4607      	mov	r7, r0
 8001914:	f7ff ffac 	bl	8001870 <__sfp_lock_acquire>
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <__sfp+0x84>)
 800191a:	681e      	ldr	r6, [r3, #0]
 800191c:	69b3      	ldr	r3, [r6, #24]
 800191e:	b913      	cbnz	r3, 8001926 <__sfp+0x16>
 8001920:	4630      	mov	r0, r6
 8001922:	f7ff ffbd 	bl	80018a0 <__sinit>
 8001926:	3648      	adds	r6, #72	; 0x48
 8001928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800192c:	3b01      	subs	r3, #1
 800192e:	d503      	bpl.n	8001938 <__sfp+0x28>
 8001930:	6833      	ldr	r3, [r6, #0]
 8001932:	b30b      	cbz	r3, 8001978 <__sfp+0x68>
 8001934:	6836      	ldr	r6, [r6, #0]
 8001936:	e7f7      	b.n	8001928 <__sfp+0x18>
 8001938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800193c:	b9d5      	cbnz	r5, 8001974 <__sfp+0x64>
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <__sfp+0x88>)
 8001940:	60e3      	str	r3, [r4, #12]
 8001942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001946:	6665      	str	r5, [r4, #100]	; 0x64
 8001948:	f000 f847 	bl	80019da <__retarget_lock_init_recursive>
 800194c:	f7ff ff96 	bl	800187c <__sfp_lock_release>
 8001950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001958:	6025      	str	r5, [r4, #0]
 800195a:	61a5      	str	r5, [r4, #24]
 800195c:	2208      	movs	r2, #8
 800195e:	4629      	mov	r1, r5
 8001960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001964:	f7ff fd2c 	bl	80013c0 <memset>
 8001968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800196c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001970:	4620      	mov	r0, r4
 8001972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001974:	3468      	adds	r4, #104	; 0x68
 8001976:	e7d9      	b.n	800192c <__sfp+0x1c>
 8001978:	2104      	movs	r1, #4
 800197a:	4638      	mov	r0, r7
 800197c:	f7ff ff62 	bl	8001844 <__sfmoreglue>
 8001980:	4604      	mov	r4, r0
 8001982:	6030      	str	r0, [r6, #0]
 8001984:	2800      	cmp	r0, #0
 8001986:	d1d5      	bne.n	8001934 <__sfp+0x24>
 8001988:	f7ff ff78 	bl	800187c <__sfp_lock_release>
 800198c:	230c      	movs	r3, #12
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	e7ee      	b.n	8001970 <__sfp+0x60>
 8001992:	bf00      	nop
 8001994:	0800249c 	.word	0x0800249c
 8001998:	ffff0001 	.word	0xffff0001

0800199c <_fwalk_reent>:
 800199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a0:	4606      	mov	r6, r0
 80019a2:	4688      	mov	r8, r1
 80019a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019a8:	2700      	movs	r7, #0
 80019aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019ae:	f1b9 0901 	subs.w	r9, r9, #1
 80019b2:	d505      	bpl.n	80019c0 <_fwalk_reent+0x24>
 80019b4:	6824      	ldr	r4, [r4, #0]
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d1f7      	bne.n	80019aa <_fwalk_reent+0xe>
 80019ba:	4638      	mov	r0, r7
 80019bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019c0:	89ab      	ldrh	r3, [r5, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d907      	bls.n	80019d6 <_fwalk_reent+0x3a>
 80019c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019ca:	3301      	adds	r3, #1
 80019cc:	d003      	beq.n	80019d6 <_fwalk_reent+0x3a>
 80019ce:	4629      	mov	r1, r5
 80019d0:	4630      	mov	r0, r6
 80019d2:	47c0      	blx	r8
 80019d4:	4307      	orrs	r7, r0
 80019d6:	3568      	adds	r5, #104	; 0x68
 80019d8:	e7e9      	b.n	80019ae <_fwalk_reent+0x12>

080019da <__retarget_lock_init_recursive>:
 80019da:	4770      	bx	lr

080019dc <__retarget_lock_acquire_recursive>:
 80019dc:	4770      	bx	lr

080019de <__retarget_lock_release_recursive>:
 80019de:	4770      	bx	lr

080019e0 <__swhatbuf_r>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460e      	mov	r6, r1
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	2900      	cmp	r1, #0
 80019ea:	b096      	sub	sp, #88	; 0x58
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	da08      	bge.n	8001a04 <__swhatbuf_r+0x24>
 80019f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	602a      	str	r2, [r5, #0]
 80019fa:	061a      	lsls	r2, r3, #24
 80019fc:	d410      	bmi.n	8001a20 <__swhatbuf_r+0x40>
 80019fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a02:	e00e      	b.n	8001a22 <__swhatbuf_r+0x42>
 8001a04:	466a      	mov	r2, sp
 8001a06:	f000 fc95 	bl	8002334 <_fstat_r>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	dbf1      	blt.n	80019f2 <__swhatbuf_r+0x12>
 8001a0e:	9a01      	ldr	r2, [sp, #4]
 8001a10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a18:	425a      	negs	r2, r3
 8001a1a:	415a      	adcs	r2, r3
 8001a1c:	602a      	str	r2, [r5, #0]
 8001a1e:	e7ee      	b.n	80019fe <__swhatbuf_r+0x1e>
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	2000      	movs	r0, #0
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	b016      	add	sp, #88	; 0x58
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a2c <__smakebuf_r>:
 8001a2c:	898b      	ldrh	r3, [r1, #12]
 8001a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a30:	079d      	lsls	r5, r3, #30
 8001a32:	4606      	mov	r6, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	d507      	bpl.n	8001a48 <__smakebuf_r+0x1c>
 8001a38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	6123      	str	r3, [r4, #16]
 8001a40:	2301      	movs	r3, #1
 8001a42:	6163      	str	r3, [r4, #20]
 8001a44:	b002      	add	sp, #8
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
 8001a48:	ab01      	add	r3, sp, #4
 8001a4a:	466a      	mov	r2, sp
 8001a4c:	f7ff ffc8 	bl	80019e0 <__swhatbuf_r>
 8001a50:	9900      	ldr	r1, [sp, #0]
 8001a52:	4605      	mov	r5, r0
 8001a54:	4630      	mov	r0, r6
 8001a56:	f000 f895 	bl	8001b84 <_malloc_r>
 8001a5a:	b948      	cbnz	r0, 8001a70 <__smakebuf_r+0x44>
 8001a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a60:	059a      	lsls	r2, r3, #22
 8001a62:	d4ef      	bmi.n	8001a44 <__smakebuf_r+0x18>
 8001a64:	f023 0303 	bic.w	r3, r3, #3
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	81a3      	strh	r3, [r4, #12]
 8001a6e:	e7e3      	b.n	8001a38 <__smakebuf_r+0xc>
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <__smakebuf_r+0x7c>)
 8001a72:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	6020      	str	r0, [r4, #0]
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	81a3      	strh	r3, [r4, #12]
 8001a7e:	9b00      	ldr	r3, [sp, #0]
 8001a80:	6163      	str	r3, [r4, #20]
 8001a82:	9b01      	ldr	r3, [sp, #4]
 8001a84:	6120      	str	r0, [r4, #16]
 8001a86:	b15b      	cbz	r3, 8001aa0 <__smakebuf_r+0x74>
 8001a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 fc63 	bl	8002358 <_isatty_r>
 8001a92:	b128      	cbz	r0, 8001aa0 <__smakebuf_r+0x74>
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	f023 0303 	bic.w	r3, r3, #3
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	81a3      	strh	r3, [r4, #12]
 8001aa0:	89a0      	ldrh	r0, [r4, #12]
 8001aa2:	4305      	orrs	r5, r0
 8001aa4:	81a5      	strh	r5, [r4, #12]
 8001aa6:	e7cd      	b.n	8001a44 <__smakebuf_r+0x18>
 8001aa8:	08001839 	.word	0x08001839

08001aac <_free_r>:
 8001aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d044      	beq.n	8001b3c <_free_r+0x90>
 8001ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ab6:	9001      	str	r0, [sp, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f1a1 0404 	sub.w	r4, r1, #4
 8001abe:	bfb8      	it	lt
 8001ac0:	18e4      	addlt	r4, r4, r3
 8001ac2:	f000 fc6b 	bl	800239c <__malloc_lock>
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <_free_r+0x94>)
 8001ac8:	9801      	ldr	r0, [sp, #4]
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	b933      	cbnz	r3, 8001adc <_free_r+0x30>
 8001ace:	6063      	str	r3, [r4, #4]
 8001ad0:	6014      	str	r4, [r2, #0]
 8001ad2:	b003      	add	sp, #12
 8001ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ad8:	f000 bc66 	b.w	80023a8 <__malloc_unlock>
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d908      	bls.n	8001af2 <_free_r+0x46>
 8001ae0:	6825      	ldr	r5, [r4, #0]
 8001ae2:	1961      	adds	r1, r4, r5
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	bf01      	itttt	eq
 8001ae8:	6819      	ldreq	r1, [r3, #0]
 8001aea:	685b      	ldreq	r3, [r3, #4]
 8001aec:	1949      	addeq	r1, r1, r5
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	e7ed      	b.n	8001ace <_free_r+0x22>
 8001af2:	461a      	mov	r2, r3
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	b10b      	cbz	r3, 8001afc <_free_r+0x50>
 8001af8:	42a3      	cmp	r3, r4
 8001afa:	d9fa      	bls.n	8001af2 <_free_r+0x46>
 8001afc:	6811      	ldr	r1, [r2, #0]
 8001afe:	1855      	adds	r5, r2, r1
 8001b00:	42a5      	cmp	r5, r4
 8001b02:	d10b      	bne.n	8001b1c <_free_r+0x70>
 8001b04:	6824      	ldr	r4, [r4, #0]
 8001b06:	4421      	add	r1, r4
 8001b08:	1854      	adds	r4, r2, r1
 8001b0a:	42a3      	cmp	r3, r4
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	d1e0      	bne.n	8001ad2 <_free_r+0x26>
 8001b10:	681c      	ldr	r4, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	6053      	str	r3, [r2, #4]
 8001b16:	4421      	add	r1, r4
 8001b18:	6011      	str	r1, [r2, #0]
 8001b1a:	e7da      	b.n	8001ad2 <_free_r+0x26>
 8001b1c:	d902      	bls.n	8001b24 <_free_r+0x78>
 8001b1e:	230c      	movs	r3, #12
 8001b20:	6003      	str	r3, [r0, #0]
 8001b22:	e7d6      	b.n	8001ad2 <_free_r+0x26>
 8001b24:	6825      	ldr	r5, [r4, #0]
 8001b26:	1961      	adds	r1, r4, r5
 8001b28:	428b      	cmp	r3, r1
 8001b2a:	bf04      	itt	eq
 8001b2c:	6819      	ldreq	r1, [r3, #0]
 8001b2e:	685b      	ldreq	r3, [r3, #4]
 8001b30:	6063      	str	r3, [r4, #4]
 8001b32:	bf04      	itt	eq
 8001b34:	1949      	addeq	r1, r1, r5
 8001b36:	6021      	streq	r1, [r4, #0]
 8001b38:	6054      	str	r4, [r2, #4]
 8001b3a:	e7ca      	b.n	8001ad2 <_free_r+0x26>
 8001b3c:	b003      	add	sp, #12
 8001b3e:	bd30      	pop	{r4, r5, pc}
 8001b40:	20000088 	.word	0x20000088

08001b44 <sbrk_aligned>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	4e0e      	ldr	r6, [pc, #56]	; (8001b80 <sbrk_aligned+0x3c>)
 8001b48:	460c      	mov	r4, r1
 8001b4a:	6831      	ldr	r1, [r6, #0]
 8001b4c:	4605      	mov	r5, r0
 8001b4e:	b911      	cbnz	r1, 8001b56 <sbrk_aligned+0x12>
 8001b50:	f000 fb7a 	bl	8002248 <_sbrk_r>
 8001b54:	6030      	str	r0, [r6, #0]
 8001b56:	4621      	mov	r1, r4
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f000 fb75 	bl	8002248 <_sbrk_r>
 8001b5e:	1c43      	adds	r3, r0, #1
 8001b60:	d00a      	beq.n	8001b78 <sbrk_aligned+0x34>
 8001b62:	1cc4      	adds	r4, r0, #3
 8001b64:	f024 0403 	bic.w	r4, r4, #3
 8001b68:	42a0      	cmp	r0, r4
 8001b6a:	d007      	beq.n	8001b7c <sbrk_aligned+0x38>
 8001b6c:	1a21      	subs	r1, r4, r0
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f000 fb6a 	bl	8002248 <_sbrk_r>
 8001b74:	3001      	adds	r0, #1
 8001b76:	d101      	bne.n	8001b7c <sbrk_aligned+0x38>
 8001b78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	2000008c 	.word	0x2000008c

08001b84 <_malloc_r>:
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	1ccd      	adds	r5, r1, #3
 8001b8a:	f025 0503 	bic.w	r5, r5, #3
 8001b8e:	3508      	adds	r5, #8
 8001b90:	2d0c      	cmp	r5, #12
 8001b92:	bf38      	it	cc
 8001b94:	250c      	movcc	r5, #12
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	4607      	mov	r7, r0
 8001b9a:	db01      	blt.n	8001ba0 <_malloc_r+0x1c>
 8001b9c:	42a9      	cmp	r1, r5
 8001b9e:	d905      	bls.n	8001bac <_malloc_r+0x28>
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bac:	4e2e      	ldr	r6, [pc, #184]	; (8001c68 <_malloc_r+0xe4>)
 8001bae:	f000 fbf5 	bl	800239c <__malloc_lock>
 8001bb2:	6833      	ldr	r3, [r6, #0]
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	bb34      	cbnz	r4, 8001c06 <_malloc_r+0x82>
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4638      	mov	r0, r7
 8001bbc:	f7ff ffc2 	bl	8001b44 <sbrk_aligned>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	d14d      	bne.n	8001c62 <_malloc_r+0xde>
 8001bc6:	6834      	ldr	r4, [r6, #0]
 8001bc8:	4626      	mov	r6, r4
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d140      	bne.n	8001c50 <_malloc_r+0xcc>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	4631      	mov	r1, r6
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	eb04 0803 	add.w	r8, r4, r3
 8001bd8:	f000 fb36 	bl	8002248 <_sbrk_r>
 8001bdc:	4580      	cmp	r8, r0
 8001bde:	d13a      	bne.n	8001c56 <_malloc_r+0xd2>
 8001be0:	6821      	ldr	r1, [r4, #0]
 8001be2:	3503      	adds	r5, #3
 8001be4:	1a6d      	subs	r5, r5, r1
 8001be6:	f025 0503 	bic.w	r5, r5, #3
 8001bea:	3508      	adds	r5, #8
 8001bec:	2d0c      	cmp	r5, #12
 8001bee:	bf38      	it	cc
 8001bf0:	250c      	movcc	r5, #12
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f7ff ffa5 	bl	8001b44 <sbrk_aligned>
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d02b      	beq.n	8001c56 <_malloc_r+0xd2>
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	442b      	add	r3, r5
 8001c02:	6023      	str	r3, [r4, #0]
 8001c04:	e00e      	b.n	8001c24 <_malloc_r+0xa0>
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	1b52      	subs	r2, r2, r5
 8001c0a:	d41e      	bmi.n	8001c4a <_malloc_r+0xc6>
 8001c0c:	2a0b      	cmp	r2, #11
 8001c0e:	d916      	bls.n	8001c3e <_malloc_r+0xba>
 8001c10:	1961      	adds	r1, r4, r5
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	6025      	str	r5, [r4, #0]
 8001c16:	bf18      	it	ne
 8001c18:	6059      	strne	r1, [r3, #4]
 8001c1a:	6863      	ldr	r3, [r4, #4]
 8001c1c:	bf08      	it	eq
 8001c1e:	6031      	streq	r1, [r6, #0]
 8001c20:	5162      	str	r2, [r4, r5]
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	4638      	mov	r0, r7
 8001c26:	f104 060b 	add.w	r6, r4, #11
 8001c2a:	f000 fbbd 	bl	80023a8 <__malloc_unlock>
 8001c2e:	f026 0607 	bic.w	r6, r6, #7
 8001c32:	1d23      	adds	r3, r4, #4
 8001c34:	1af2      	subs	r2, r6, r3
 8001c36:	d0b6      	beq.n	8001ba6 <_malloc_r+0x22>
 8001c38:	1b9b      	subs	r3, r3, r6
 8001c3a:	50a3      	str	r3, [r4, r2]
 8001c3c:	e7b3      	b.n	8001ba6 <_malloc_r+0x22>
 8001c3e:	6862      	ldr	r2, [r4, #4]
 8001c40:	42a3      	cmp	r3, r4
 8001c42:	bf0c      	ite	eq
 8001c44:	6032      	streq	r2, [r6, #0]
 8001c46:	605a      	strne	r2, [r3, #4]
 8001c48:	e7ec      	b.n	8001c24 <_malloc_r+0xa0>
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	6864      	ldr	r4, [r4, #4]
 8001c4e:	e7b2      	b.n	8001bb6 <_malloc_r+0x32>
 8001c50:	4634      	mov	r4, r6
 8001c52:	6876      	ldr	r6, [r6, #4]
 8001c54:	e7b9      	b.n	8001bca <_malloc_r+0x46>
 8001c56:	230c      	movs	r3, #12
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f000 fba4 	bl	80023a8 <__malloc_unlock>
 8001c60:	e7a1      	b.n	8001ba6 <_malloc_r+0x22>
 8001c62:	6025      	str	r5, [r4, #0]
 8001c64:	e7de      	b.n	8001c24 <_malloc_r+0xa0>
 8001c66:	bf00      	nop
 8001c68:	20000088 	.word	0x20000088

08001c6c <__sfputc_r>:
 8001c6c:	6893      	ldr	r3, [r2, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	b410      	push	{r4}
 8001c74:	6093      	str	r3, [r2, #8]
 8001c76:	da08      	bge.n	8001c8a <__sfputc_r+0x1e>
 8001c78:	6994      	ldr	r4, [r2, #24]
 8001c7a:	42a3      	cmp	r3, r4
 8001c7c:	db01      	blt.n	8001c82 <__sfputc_r+0x16>
 8001c7e:	290a      	cmp	r1, #10
 8001c80:	d103      	bne.n	8001c8a <__sfputc_r+0x1e>
 8001c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c86:	f7ff bc31 	b.w	80014ec <__swbuf_r>
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	1c58      	adds	r0, r3, #1
 8001c8e:	6010      	str	r0, [r2, #0]
 8001c90:	7019      	strb	r1, [r3, #0]
 8001c92:	4608      	mov	r0, r1
 8001c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <__sfputs_r>:
 8001c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9c:	4606      	mov	r6, r0
 8001c9e:	460f      	mov	r7, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	18d5      	adds	r5, r2, r3
 8001ca4:	42ac      	cmp	r4, r5
 8001ca6:	d101      	bne.n	8001cac <__sfputs_r+0x12>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e007      	b.n	8001cbc <__sfputs_r+0x22>
 8001cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb0:	463a      	mov	r2, r7
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f7ff ffda 	bl	8001c6c <__sfputc_r>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d1f3      	bne.n	8001ca4 <__sfputs_r+0xa>
 8001cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cc0 <_vfiprintf_r>:
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	b09d      	sub	sp, #116	; 0x74
 8001cc8:	4614      	mov	r4, r2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4606      	mov	r6, r0
 8001cce:	b118      	cbz	r0, 8001cd8 <_vfiprintf_r+0x18>
 8001cd0:	6983      	ldr	r3, [r0, #24]
 8001cd2:	b90b      	cbnz	r3, 8001cd8 <_vfiprintf_r+0x18>
 8001cd4:	f7ff fde4 	bl	80018a0 <__sinit>
 8001cd8:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <_vfiprintf_r+0x240>)
 8001cda:	429d      	cmp	r5, r3
 8001cdc:	d11b      	bne.n	8001d16 <_vfiprintf_r+0x56>
 8001cde:	6875      	ldr	r5, [r6, #4]
 8001ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ce2:	07d9      	lsls	r1, r3, #31
 8001ce4:	d405      	bmi.n	8001cf2 <_vfiprintf_r+0x32>
 8001ce6:	89ab      	ldrh	r3, [r5, #12]
 8001ce8:	059a      	lsls	r2, r3, #22
 8001cea:	d402      	bmi.n	8001cf2 <_vfiprintf_r+0x32>
 8001cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cee:	f7ff fe75 	bl	80019dc <__retarget_lock_acquire_recursive>
 8001cf2:	89ab      	ldrh	r3, [r5, #12]
 8001cf4:	071b      	lsls	r3, r3, #28
 8001cf6:	d501      	bpl.n	8001cfc <_vfiprintf_r+0x3c>
 8001cf8:	692b      	ldr	r3, [r5, #16]
 8001cfa:	b9eb      	cbnz	r3, 8001d38 <_vfiprintf_r+0x78>
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f7ff fc46 	bl	8001590 <__swsetup_r>
 8001d04:	b1c0      	cbz	r0, 8001d38 <_vfiprintf_r+0x78>
 8001d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d08:	07dc      	lsls	r4, r3, #31
 8001d0a:	d50e      	bpl.n	8001d2a <_vfiprintf_r+0x6a>
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d10:	b01d      	add	sp, #116	; 0x74
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <_vfiprintf_r+0x244>)
 8001d18:	429d      	cmp	r5, r3
 8001d1a:	d101      	bne.n	8001d20 <_vfiprintf_r+0x60>
 8001d1c:	68b5      	ldr	r5, [r6, #8]
 8001d1e:	e7df      	b.n	8001ce0 <_vfiprintf_r+0x20>
 8001d20:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <_vfiprintf_r+0x248>)
 8001d22:	429d      	cmp	r5, r3
 8001d24:	bf08      	it	eq
 8001d26:	68f5      	ldreq	r5, [r6, #12]
 8001d28:	e7da      	b.n	8001ce0 <_vfiprintf_r+0x20>
 8001d2a:	89ab      	ldrh	r3, [r5, #12]
 8001d2c:	0598      	lsls	r0, r3, #22
 8001d2e:	d4ed      	bmi.n	8001d0c <_vfiprintf_r+0x4c>
 8001d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d32:	f7ff fe54 	bl	80019de <__retarget_lock_release_recursive>
 8001d36:	e7e9      	b.n	8001d0c <_vfiprintf_r+0x4c>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d46:	2330      	movs	r3, #48	; 0x30
 8001d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f0c <_vfiprintf_r+0x24c>
 8001d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d50:	f04f 0901 	mov.w	r9, #1
 8001d54:	4623      	mov	r3, r4
 8001d56:	469a      	mov	sl, r3
 8001d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d5c:	b10a      	cbz	r2, 8001d62 <_vfiprintf_r+0xa2>
 8001d5e:	2a25      	cmp	r2, #37	; 0x25
 8001d60:	d1f9      	bne.n	8001d56 <_vfiprintf_r+0x96>
 8001d62:	ebba 0b04 	subs.w	fp, sl, r4
 8001d66:	d00b      	beq.n	8001d80 <_vfiprintf_r+0xc0>
 8001d68:	465b      	mov	r3, fp
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f7ff ff93 	bl	8001c9a <__sfputs_r>
 8001d74:	3001      	adds	r0, #1
 8001d76:	f000 80aa 	beq.w	8001ece <_vfiprintf_r+0x20e>
 8001d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d7c:	445a      	add	r2, fp
 8001d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8001d80:	f89a 3000 	ldrb.w	r3, [sl]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80a2 	beq.w	8001ece <_vfiprintf_r+0x20e>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d94:	f10a 0a01 	add.w	sl, sl, #1
 8001d98:	9304      	str	r3, [sp, #16]
 8001d9a:	9307      	str	r3, [sp, #28]
 8001d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001da0:	931a      	str	r3, [sp, #104]	; 0x68
 8001da2:	4654      	mov	r4, sl
 8001da4:	2205      	movs	r2, #5
 8001da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001daa:	4858      	ldr	r0, [pc, #352]	; (8001f0c <_vfiprintf_r+0x24c>)
 8001dac:	f7fe fa28 	bl	8000200 <memchr>
 8001db0:	9a04      	ldr	r2, [sp, #16]
 8001db2:	b9d8      	cbnz	r0, 8001dec <_vfiprintf_r+0x12c>
 8001db4:	06d1      	lsls	r1, r2, #27
 8001db6:	bf44      	itt	mi
 8001db8:	2320      	movmi	r3, #32
 8001dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dbe:	0713      	lsls	r3, r2, #28
 8001dc0:	bf44      	itt	mi
 8001dc2:	232b      	movmi	r3, #43	; 0x2b
 8001dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8001dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dce:	d015      	beq.n	8001dfc <_vfiprintf_r+0x13c>
 8001dd0:	9a07      	ldr	r2, [sp, #28]
 8001dd2:	4654      	mov	r4, sl
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f04f 0c0a 	mov.w	ip, #10
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001de0:	3b30      	subs	r3, #48	; 0x30
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d94e      	bls.n	8001e84 <_vfiprintf_r+0x1c4>
 8001de6:	b1b0      	cbz	r0, 8001e16 <_vfiprintf_r+0x156>
 8001de8:	9207      	str	r2, [sp, #28]
 8001dea:	e014      	b.n	8001e16 <_vfiprintf_r+0x156>
 8001dec:	eba0 0308 	sub.w	r3, r0, r8
 8001df0:	fa09 f303 	lsl.w	r3, r9, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	9304      	str	r3, [sp, #16]
 8001df8:	46a2      	mov	sl, r4
 8001dfa:	e7d2      	b.n	8001da2 <_vfiprintf_r+0xe2>
 8001dfc:	9b03      	ldr	r3, [sp, #12]
 8001dfe:	1d19      	adds	r1, r3, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	9103      	str	r1, [sp, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bfbb      	ittet	lt
 8001e08:	425b      	neglt	r3, r3
 8001e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e0e:	9307      	strge	r3, [sp, #28]
 8001e10:	9307      	strlt	r3, [sp, #28]
 8001e12:	bfb8      	it	lt
 8001e14:	9204      	strlt	r2, [sp, #16]
 8001e16:	7823      	ldrb	r3, [r4, #0]
 8001e18:	2b2e      	cmp	r3, #46	; 0x2e
 8001e1a:	d10c      	bne.n	8001e36 <_vfiprintf_r+0x176>
 8001e1c:	7863      	ldrb	r3, [r4, #1]
 8001e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e20:	d135      	bne.n	8001e8e <_vfiprintf_r+0x1ce>
 8001e22:	9b03      	ldr	r3, [sp, #12]
 8001e24:	1d1a      	adds	r2, r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	9203      	str	r2, [sp, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bfb8      	it	lt
 8001e2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e32:	3402      	adds	r4, #2
 8001e34:	9305      	str	r3, [sp, #20]
 8001e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f1c <_vfiprintf_r+0x25c>
 8001e3a:	7821      	ldrb	r1, [r4, #0]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4650      	mov	r0, sl
 8001e40:	f7fe f9de 	bl	8000200 <memchr>
 8001e44:	b140      	cbz	r0, 8001e58 <_vfiprintf_r+0x198>
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	eba0 000a 	sub.w	r0, r0, sl
 8001e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8001e50:	9b04      	ldr	r3, [sp, #16]
 8001e52:	4303      	orrs	r3, r0
 8001e54:	3401      	adds	r4, #1
 8001e56:	9304      	str	r3, [sp, #16]
 8001e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e5c:	482c      	ldr	r0, [pc, #176]	; (8001f10 <_vfiprintf_r+0x250>)
 8001e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e62:	2206      	movs	r2, #6
 8001e64:	f7fe f9cc 	bl	8000200 <memchr>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d03f      	beq.n	8001eec <_vfiprintf_r+0x22c>
 8001e6c:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <_vfiprintf_r+0x254>)
 8001e6e:	bb1b      	cbnz	r3, 8001eb8 <_vfiprintf_r+0x1f8>
 8001e70:	9b03      	ldr	r3, [sp, #12]
 8001e72:	3307      	adds	r3, #7
 8001e74:	f023 0307 	bic.w	r3, r3, #7
 8001e78:	3308      	adds	r3, #8
 8001e7a:	9303      	str	r3, [sp, #12]
 8001e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e7e:	443b      	add	r3, r7
 8001e80:	9309      	str	r3, [sp, #36]	; 0x24
 8001e82:	e767      	b.n	8001d54 <_vfiprintf_r+0x94>
 8001e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e88:	460c      	mov	r4, r1
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7a5      	b.n	8001dda <_vfiprintf_r+0x11a>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	3401      	adds	r4, #1
 8001e92:	9305      	str	r3, [sp, #20]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 0c0a 	mov.w	ip, #10
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ea0:	3a30      	subs	r2, #48	; 0x30
 8001ea2:	2a09      	cmp	r2, #9
 8001ea4:	d903      	bls.n	8001eae <_vfiprintf_r+0x1ee>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0c5      	beq.n	8001e36 <_vfiprintf_r+0x176>
 8001eaa:	9105      	str	r1, [sp, #20]
 8001eac:	e7c3      	b.n	8001e36 <_vfiprintf_r+0x176>
 8001eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e7f0      	b.n	8001e9a <_vfiprintf_r+0x1da>
 8001eb8:	ab03      	add	r3, sp, #12
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <_vfiprintf_r+0x258>)
 8001ec0:	a904      	add	r1, sp, #16
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	4607      	mov	r7, r0
 8001eca:	1c78      	adds	r0, r7, #1
 8001ecc:	d1d6      	bne.n	8001e7c <_vfiprintf_r+0x1bc>
 8001ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ed0:	07d9      	lsls	r1, r3, #31
 8001ed2:	d405      	bmi.n	8001ee0 <_vfiprintf_r+0x220>
 8001ed4:	89ab      	ldrh	r3, [r5, #12]
 8001ed6:	059a      	lsls	r2, r3, #22
 8001ed8:	d402      	bmi.n	8001ee0 <_vfiprintf_r+0x220>
 8001eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001edc:	f7ff fd7f 	bl	80019de <__retarget_lock_release_recursive>
 8001ee0:	89ab      	ldrh	r3, [r5, #12]
 8001ee2:	065b      	lsls	r3, r3, #25
 8001ee4:	f53f af12 	bmi.w	8001d0c <_vfiprintf_r+0x4c>
 8001ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001eea:	e711      	b.n	8001d10 <_vfiprintf_r+0x50>
 8001eec:	ab03      	add	r3, sp, #12
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	462a      	mov	r2, r5
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <_vfiprintf_r+0x258>)
 8001ef4:	a904      	add	r1, sp, #16
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 f880 	bl	8001ffc <_printf_i>
 8001efc:	e7e4      	b.n	8001ec8 <_vfiprintf_r+0x208>
 8001efe:	bf00      	nop
 8001f00:	080024c0 	.word	0x080024c0
 8001f04:	080024e0 	.word	0x080024e0
 8001f08:	080024a0 	.word	0x080024a0
 8001f0c:	08002500 	.word	0x08002500
 8001f10:	0800250a 	.word	0x0800250a
 8001f14:	00000000 	.word	0x00000000
 8001f18:	08001c9b 	.word	0x08001c9b
 8001f1c:	08002506 	.word	0x08002506

08001f20 <_printf_common>:
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	4616      	mov	r6, r2
 8001f26:	4699      	mov	r9, r3
 8001f28:	688a      	ldr	r2, [r1, #8]
 8001f2a:	690b      	ldr	r3, [r1, #16]
 8001f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bfb8      	it	lt
 8001f34:	4613      	movlt	r3, r2
 8001f36:	6033      	str	r3, [r6, #0]
 8001f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f3c:	4607      	mov	r7, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	b10a      	cbz	r2, 8001f46 <_printf_common+0x26>
 8001f42:	3301      	adds	r3, #1
 8001f44:	6033      	str	r3, [r6, #0]
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	0699      	lsls	r1, r3, #26
 8001f4a:	bf42      	ittt	mi
 8001f4c:	6833      	ldrmi	r3, [r6, #0]
 8001f4e:	3302      	addmi	r3, #2
 8001f50:	6033      	strmi	r3, [r6, #0]
 8001f52:	6825      	ldr	r5, [r4, #0]
 8001f54:	f015 0506 	ands.w	r5, r5, #6
 8001f58:	d106      	bne.n	8001f68 <_printf_common+0x48>
 8001f5a:	f104 0a19 	add.w	sl, r4, #25
 8001f5e:	68e3      	ldr	r3, [r4, #12]
 8001f60:	6832      	ldr	r2, [r6, #0]
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	dc26      	bgt.n	8001fb6 <_printf_common+0x96>
 8001f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	bf18      	it	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	0692      	lsls	r2, r2, #26
 8001f76:	d42b      	bmi.n	8001fd0 <_printf_common+0xb0>
 8001f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c0      	blx	r8
 8001f82:	3001      	adds	r0, #1
 8001f84:	d01e      	beq.n	8001fc4 <_printf_common+0xa4>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	68e5      	ldr	r5, [r4, #12]
 8001f8a:	6832      	ldr	r2, [r6, #0]
 8001f8c:	f003 0306 	and.w	r3, r3, #6
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	bf08      	it	eq
 8001f94:	1aad      	subeq	r5, r5, r2
 8001f96:	68a3      	ldr	r3, [r4, #8]
 8001f98:	6922      	ldr	r2, [r4, #16]
 8001f9a:	bf0c      	ite	eq
 8001f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa0:	2500      	movne	r5, #0
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	bfc4      	itt	gt
 8001fa6:	1a9b      	subgt	r3, r3, r2
 8001fa8:	18ed      	addgt	r5, r5, r3
 8001faa:	2600      	movs	r6, #0
 8001fac:	341a      	adds	r4, #26
 8001fae:	42b5      	cmp	r5, r6
 8001fb0:	d11a      	bne.n	8001fe8 <_printf_common+0xc8>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e008      	b.n	8001fc8 <_printf_common+0xa8>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4652      	mov	r2, sl
 8001fba:	4649      	mov	r1, r9
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	47c0      	blx	r8
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d103      	bne.n	8001fcc <_printf_common+0xac>
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fcc:	3501      	adds	r5, #1
 8001fce:	e7c6      	b.n	8001f5e <_printf_common+0x3e>
 8001fd0:	18e1      	adds	r1, r4, r3
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	2030      	movs	r0, #48	; 0x30
 8001fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fda:	4422      	add	r2, r4
 8001fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	e7c7      	b.n	8001f78 <_printf_common+0x58>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4622      	mov	r2, r4
 8001fec:	4649      	mov	r1, r9
 8001fee:	4638      	mov	r0, r7
 8001ff0:	47c0      	blx	r8
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d0e6      	beq.n	8001fc4 <_printf_common+0xa4>
 8001ff6:	3601      	adds	r6, #1
 8001ff8:	e7d9      	b.n	8001fae <_printf_common+0x8e>
	...

08001ffc <_printf_i>:
 8001ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002000:	7e0f      	ldrb	r7, [r1, #24]
 8002002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002004:	2f78      	cmp	r7, #120	; 0x78
 8002006:	4691      	mov	r9, r2
 8002008:	4680      	mov	r8, r0
 800200a:	460c      	mov	r4, r1
 800200c:	469a      	mov	sl, r3
 800200e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002012:	d807      	bhi.n	8002024 <_printf_i+0x28>
 8002014:	2f62      	cmp	r7, #98	; 0x62
 8002016:	d80a      	bhi.n	800202e <_printf_i+0x32>
 8002018:	2f00      	cmp	r7, #0
 800201a:	f000 80d8 	beq.w	80021ce <_printf_i+0x1d2>
 800201e:	2f58      	cmp	r7, #88	; 0x58
 8002020:	f000 80a3 	beq.w	800216a <_printf_i+0x16e>
 8002024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800202c:	e03a      	b.n	80020a4 <_printf_i+0xa8>
 800202e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002032:	2b15      	cmp	r3, #21
 8002034:	d8f6      	bhi.n	8002024 <_printf_i+0x28>
 8002036:	a101      	add	r1, pc, #4	; (adr r1, 800203c <_printf_i+0x40>)
 8002038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800203c:	08002095 	.word	0x08002095
 8002040:	080020a9 	.word	0x080020a9
 8002044:	08002025 	.word	0x08002025
 8002048:	08002025 	.word	0x08002025
 800204c:	08002025 	.word	0x08002025
 8002050:	08002025 	.word	0x08002025
 8002054:	080020a9 	.word	0x080020a9
 8002058:	08002025 	.word	0x08002025
 800205c:	08002025 	.word	0x08002025
 8002060:	08002025 	.word	0x08002025
 8002064:	08002025 	.word	0x08002025
 8002068:	080021b5 	.word	0x080021b5
 800206c:	080020d9 	.word	0x080020d9
 8002070:	08002197 	.word	0x08002197
 8002074:	08002025 	.word	0x08002025
 8002078:	08002025 	.word	0x08002025
 800207c:	080021d7 	.word	0x080021d7
 8002080:	08002025 	.word	0x08002025
 8002084:	080020d9 	.word	0x080020d9
 8002088:	08002025 	.word	0x08002025
 800208c:	08002025 	.word	0x08002025
 8002090:	0800219f 	.word	0x0800219f
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	602a      	str	r2, [r5, #0]
 800209c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0a3      	b.n	80021f0 <_printf_i+0x1f4>
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	6829      	ldr	r1, [r5, #0]
 80020ac:	0606      	lsls	r6, r0, #24
 80020ae:	f101 0304 	add.w	r3, r1, #4
 80020b2:	d50a      	bpl.n	80020ca <_printf_i+0xce>
 80020b4:	680e      	ldr	r6, [r1, #0]
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	2e00      	cmp	r6, #0
 80020ba:	da03      	bge.n	80020c4 <_printf_i+0xc8>
 80020bc:	232d      	movs	r3, #45	; 0x2d
 80020be:	4276      	negs	r6, r6
 80020c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020c4:	485e      	ldr	r0, [pc, #376]	; (8002240 <_printf_i+0x244>)
 80020c6:	230a      	movs	r3, #10
 80020c8:	e019      	b.n	80020fe <_printf_i+0x102>
 80020ca:	680e      	ldr	r6, [r1, #0]
 80020cc:	602b      	str	r3, [r5, #0]
 80020ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020d2:	bf18      	it	ne
 80020d4:	b236      	sxthne	r6, r6
 80020d6:	e7ef      	b.n	80020b8 <_printf_i+0xbc>
 80020d8:	682b      	ldr	r3, [r5, #0]
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	1d19      	adds	r1, r3, #4
 80020de:	6029      	str	r1, [r5, #0]
 80020e0:	0601      	lsls	r1, r0, #24
 80020e2:	d501      	bpl.n	80020e8 <_printf_i+0xec>
 80020e4:	681e      	ldr	r6, [r3, #0]
 80020e6:	e002      	b.n	80020ee <_printf_i+0xf2>
 80020e8:	0646      	lsls	r6, r0, #25
 80020ea:	d5fb      	bpl.n	80020e4 <_printf_i+0xe8>
 80020ec:	881e      	ldrh	r6, [r3, #0]
 80020ee:	4854      	ldr	r0, [pc, #336]	; (8002240 <_printf_i+0x244>)
 80020f0:	2f6f      	cmp	r7, #111	; 0x6f
 80020f2:	bf0c      	ite	eq
 80020f4:	2308      	moveq	r3, #8
 80020f6:	230a      	movne	r3, #10
 80020f8:	2100      	movs	r1, #0
 80020fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020fe:	6865      	ldr	r5, [r4, #4]
 8002100:	60a5      	str	r5, [r4, #8]
 8002102:	2d00      	cmp	r5, #0
 8002104:	bfa2      	ittt	ge
 8002106:	6821      	ldrge	r1, [r4, #0]
 8002108:	f021 0104 	bicge.w	r1, r1, #4
 800210c:	6021      	strge	r1, [r4, #0]
 800210e:	b90e      	cbnz	r6, 8002114 <_printf_i+0x118>
 8002110:	2d00      	cmp	r5, #0
 8002112:	d04d      	beq.n	80021b0 <_printf_i+0x1b4>
 8002114:	4615      	mov	r5, r2
 8002116:	fbb6 f1f3 	udiv	r1, r6, r3
 800211a:	fb03 6711 	mls	r7, r3, r1, r6
 800211e:	5dc7      	ldrb	r7, [r0, r7]
 8002120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002124:	4637      	mov	r7, r6
 8002126:	42bb      	cmp	r3, r7
 8002128:	460e      	mov	r6, r1
 800212a:	d9f4      	bls.n	8002116 <_printf_i+0x11a>
 800212c:	2b08      	cmp	r3, #8
 800212e:	d10b      	bne.n	8002148 <_printf_i+0x14c>
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	07de      	lsls	r6, r3, #31
 8002134:	d508      	bpl.n	8002148 <_printf_i+0x14c>
 8002136:	6923      	ldr	r3, [r4, #16]
 8002138:	6861      	ldr	r1, [r4, #4]
 800213a:	4299      	cmp	r1, r3
 800213c:	bfde      	ittt	le
 800213e:	2330      	movle	r3, #48	; 0x30
 8002140:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002144:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002148:	1b52      	subs	r2, r2, r5
 800214a:	6122      	str	r2, [r4, #16]
 800214c:	f8cd a000 	str.w	sl, [sp]
 8002150:	464b      	mov	r3, r9
 8002152:	aa03      	add	r2, sp, #12
 8002154:	4621      	mov	r1, r4
 8002156:	4640      	mov	r0, r8
 8002158:	f7ff fee2 	bl	8001f20 <_printf_common>
 800215c:	3001      	adds	r0, #1
 800215e:	d14c      	bne.n	80021fa <_printf_i+0x1fe>
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002164:	b004      	add	sp, #16
 8002166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216a:	4835      	ldr	r0, [pc, #212]	; (8002240 <_printf_i+0x244>)
 800216c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002170:	6829      	ldr	r1, [r5, #0]
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	f851 6b04 	ldr.w	r6, [r1], #4
 8002178:	6029      	str	r1, [r5, #0]
 800217a:	061d      	lsls	r5, r3, #24
 800217c:	d514      	bpl.n	80021a8 <_printf_i+0x1ac>
 800217e:	07df      	lsls	r7, r3, #31
 8002180:	bf44      	itt	mi
 8002182:	f043 0320 	orrmi.w	r3, r3, #32
 8002186:	6023      	strmi	r3, [r4, #0]
 8002188:	b91e      	cbnz	r6, 8002192 <_printf_i+0x196>
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	f023 0320 	bic.w	r3, r3, #32
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	2310      	movs	r3, #16
 8002194:	e7b0      	b.n	80020f8 <_printf_i+0xfc>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	2378      	movs	r3, #120	; 0x78
 80021a0:	4828      	ldr	r0, [pc, #160]	; (8002244 <_printf_i+0x248>)
 80021a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021a6:	e7e3      	b.n	8002170 <_printf_i+0x174>
 80021a8:	0659      	lsls	r1, r3, #25
 80021aa:	bf48      	it	mi
 80021ac:	b2b6      	uxthmi	r6, r6
 80021ae:	e7e6      	b.n	800217e <_printf_i+0x182>
 80021b0:	4615      	mov	r5, r2
 80021b2:	e7bb      	b.n	800212c <_printf_i+0x130>
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	6826      	ldr	r6, [r4, #0]
 80021b8:	6961      	ldr	r1, [r4, #20]
 80021ba:	1d18      	adds	r0, r3, #4
 80021bc:	6028      	str	r0, [r5, #0]
 80021be:	0635      	lsls	r5, r6, #24
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	d501      	bpl.n	80021c8 <_printf_i+0x1cc>
 80021c4:	6019      	str	r1, [r3, #0]
 80021c6:	e002      	b.n	80021ce <_printf_i+0x1d2>
 80021c8:	0670      	lsls	r0, r6, #25
 80021ca:	d5fb      	bpl.n	80021c4 <_printf_i+0x1c8>
 80021cc:	8019      	strh	r1, [r3, #0]
 80021ce:	2300      	movs	r3, #0
 80021d0:	6123      	str	r3, [r4, #16]
 80021d2:	4615      	mov	r5, r2
 80021d4:	e7ba      	b.n	800214c <_printf_i+0x150>
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	1d1a      	adds	r2, r3, #4
 80021da:	602a      	str	r2, [r5, #0]
 80021dc:	681d      	ldr	r5, [r3, #0]
 80021de:	6862      	ldr	r2, [r4, #4]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4628      	mov	r0, r5
 80021e4:	f7fe f80c 	bl	8000200 <memchr>
 80021e8:	b108      	cbz	r0, 80021ee <_printf_i+0x1f2>
 80021ea:	1b40      	subs	r0, r0, r5
 80021ec:	6060      	str	r0, [r4, #4]
 80021ee:	6863      	ldr	r3, [r4, #4]
 80021f0:	6123      	str	r3, [r4, #16]
 80021f2:	2300      	movs	r3, #0
 80021f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021f8:	e7a8      	b.n	800214c <_printf_i+0x150>
 80021fa:	6923      	ldr	r3, [r4, #16]
 80021fc:	462a      	mov	r2, r5
 80021fe:	4649      	mov	r1, r9
 8002200:	4640      	mov	r0, r8
 8002202:	47d0      	blx	sl
 8002204:	3001      	adds	r0, #1
 8002206:	d0ab      	beq.n	8002160 <_printf_i+0x164>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	079b      	lsls	r3, r3, #30
 800220c:	d413      	bmi.n	8002236 <_printf_i+0x23a>
 800220e:	68e0      	ldr	r0, [r4, #12]
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	4298      	cmp	r0, r3
 8002214:	bfb8      	it	lt
 8002216:	4618      	movlt	r0, r3
 8002218:	e7a4      	b.n	8002164 <_printf_i+0x168>
 800221a:	2301      	movs	r3, #1
 800221c:	4632      	mov	r2, r6
 800221e:	4649      	mov	r1, r9
 8002220:	4640      	mov	r0, r8
 8002222:	47d0      	blx	sl
 8002224:	3001      	adds	r0, #1
 8002226:	d09b      	beq.n	8002160 <_printf_i+0x164>
 8002228:	3501      	adds	r5, #1
 800222a:	68e3      	ldr	r3, [r4, #12]
 800222c:	9903      	ldr	r1, [sp, #12]
 800222e:	1a5b      	subs	r3, r3, r1
 8002230:	42ab      	cmp	r3, r5
 8002232:	dcf2      	bgt.n	800221a <_printf_i+0x21e>
 8002234:	e7eb      	b.n	800220e <_printf_i+0x212>
 8002236:	2500      	movs	r5, #0
 8002238:	f104 0619 	add.w	r6, r4, #25
 800223c:	e7f5      	b.n	800222a <_printf_i+0x22e>
 800223e:	bf00      	nop
 8002240:	08002511 	.word	0x08002511
 8002244:	08002522 	.word	0x08002522

08002248 <_sbrk_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d06      	ldr	r5, [pc, #24]	; (8002264 <_sbrk_r+0x1c>)
 800224c:	2300      	movs	r3, #0
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	f7fe fb36 	bl	80008c4 <_sbrk>
 8002258:	1c43      	adds	r3, r0, #1
 800225a:	d102      	bne.n	8002262 <_sbrk_r+0x1a>
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	b103      	cbz	r3, 8002262 <_sbrk_r+0x1a>
 8002260:	6023      	str	r3, [r4, #0]
 8002262:	bd38      	pop	{r3, r4, r5, pc}
 8002264:	20000090 	.word	0x20000090

08002268 <__sread>:
 8002268:	b510      	push	{r4, lr}
 800226a:	460c      	mov	r4, r1
 800226c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002270:	f000 f8a0 	bl	80023b4 <_read_r>
 8002274:	2800      	cmp	r0, #0
 8002276:	bfab      	itete	ge
 8002278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800227a:	89a3      	ldrhlt	r3, [r4, #12]
 800227c:	181b      	addge	r3, r3, r0
 800227e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002282:	bfac      	ite	ge
 8002284:	6563      	strge	r3, [r4, #84]	; 0x54
 8002286:	81a3      	strhlt	r3, [r4, #12]
 8002288:	bd10      	pop	{r4, pc}

0800228a <__swrite>:
 800228a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228e:	461f      	mov	r7, r3
 8002290:	898b      	ldrh	r3, [r1, #12]
 8002292:	05db      	lsls	r3, r3, #23
 8002294:	4605      	mov	r5, r0
 8002296:	460c      	mov	r4, r1
 8002298:	4616      	mov	r6, r2
 800229a:	d505      	bpl.n	80022a8 <__swrite+0x1e>
 800229c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a0:	2302      	movs	r3, #2
 80022a2:	2200      	movs	r2, #0
 80022a4:	f000 f868 	bl	8002378 <_lseek_r>
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b2:	81a3      	strh	r3, [r4, #12]
 80022b4:	4632      	mov	r2, r6
 80022b6:	463b      	mov	r3, r7
 80022b8:	4628      	mov	r0, r5
 80022ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022be:	f000 b817 	b.w	80022f0 <_write_r>

080022c2 <__sseek>:
 80022c2:	b510      	push	{r4, lr}
 80022c4:	460c      	mov	r4, r1
 80022c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ca:	f000 f855 	bl	8002378 <_lseek_r>
 80022ce:	1c43      	adds	r3, r0, #1
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	bf15      	itete	ne
 80022d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80022d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022de:	81a3      	strheq	r3, [r4, #12]
 80022e0:	bf18      	it	ne
 80022e2:	81a3      	strhne	r3, [r4, #12]
 80022e4:	bd10      	pop	{r4, pc}

080022e6 <__sclose>:
 80022e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ea:	f000 b813 	b.w	8002314 <_close_r>
	...

080022f0 <_write_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d07      	ldr	r5, [pc, #28]	; (8002310 <_write_r+0x20>)
 80022f4:	4604      	mov	r4, r0
 80022f6:	4608      	mov	r0, r1
 80022f8:	4611      	mov	r1, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	602a      	str	r2, [r5, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7fe fa8f 	bl	8000822 <_write>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_write_r+0x1e>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_write_r+0x1e>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000090 	.word	0x20000090

08002314 <_close_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d06      	ldr	r5, [pc, #24]	; (8002330 <_close_r+0x1c>)
 8002318:	2300      	movs	r3, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe fa9b 	bl	800085a <_close>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_close_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_close_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	20000090 	.word	0x20000090

08002334 <_fstat_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	4d07      	ldr	r5, [pc, #28]	; (8002354 <_fstat_r+0x20>)
 8002338:	2300      	movs	r3, #0
 800233a:	4604      	mov	r4, r0
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	f7fe fa96 	bl	8000872 <_fstat>
 8002346:	1c43      	adds	r3, r0, #1
 8002348:	d102      	bne.n	8002350 <_fstat_r+0x1c>
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	b103      	cbz	r3, 8002350 <_fstat_r+0x1c>
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	bd38      	pop	{r3, r4, r5, pc}
 8002352:	bf00      	nop
 8002354:	20000090 	.word	0x20000090

08002358 <_isatty_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4d06      	ldr	r5, [pc, #24]	; (8002374 <_isatty_r+0x1c>)
 800235c:	2300      	movs	r3, #0
 800235e:	4604      	mov	r4, r0
 8002360:	4608      	mov	r0, r1
 8002362:	602b      	str	r3, [r5, #0]
 8002364:	f7fe fa95 	bl	8000892 <_isatty>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d102      	bne.n	8002372 <_isatty_r+0x1a>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	b103      	cbz	r3, 8002372 <_isatty_r+0x1a>
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	20000090 	.word	0x20000090

08002378 <_lseek_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4d07      	ldr	r5, [pc, #28]	; (8002398 <_lseek_r+0x20>)
 800237c:	4604      	mov	r4, r0
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	2200      	movs	r2, #0
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	f7fe fa8e 	bl	80008a8 <_lseek>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_lseek_r+0x1e>
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	b103      	cbz	r3, 8002396 <_lseek_r+0x1e>
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	20000090 	.word	0x20000090

0800239c <__malloc_lock>:
 800239c:	4801      	ldr	r0, [pc, #4]	; (80023a4 <__malloc_lock+0x8>)
 800239e:	f7ff bb1d 	b.w	80019dc <__retarget_lock_acquire_recursive>
 80023a2:	bf00      	nop
 80023a4:	20000084 	.word	0x20000084

080023a8 <__malloc_unlock>:
 80023a8:	4801      	ldr	r0, [pc, #4]	; (80023b0 <__malloc_unlock+0x8>)
 80023aa:	f7ff bb18 	b.w	80019de <__retarget_lock_release_recursive>
 80023ae:	bf00      	nop
 80023b0:	20000084 	.word	0x20000084

080023b4 <_read_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4d07      	ldr	r5, [pc, #28]	; (80023d4 <_read_r+0x20>)
 80023b8:	4604      	mov	r4, r0
 80023ba:	4608      	mov	r0, r1
 80023bc:	4611      	mov	r1, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	602a      	str	r2, [r5, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7fe fa10 	bl	80007e8 <_read>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_read_r+0x1e>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_read_r+0x1e>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	20000090 	.word	0x20000090

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
