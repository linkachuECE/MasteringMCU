
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000104  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c01  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006a5  00000000  00000000  00021cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  00022568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003655  00000000  00000000  00022728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000272b  00000000  00000000  00025d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cb01  00000000  00000000  000284a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00034fa9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001370  00000000  00000000  00034ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002e40 	.word	0x08002e40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002e40 	.word	0x08002e40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <delay>:
} I2CGPIOHandle_t;

// Global handle for use with the interrupt
I2C_Handle_t myI2CHandle;

void delay(uint16_t ms){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i < (ms*1000); i++);
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e002      	b.n	80002b6 <delay+0x16>
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3301      	adds	r3, #1
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d3f3      	bcc.n	80002b0 <delay+0x10>
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <I2C1_GPIOInits>:

void I2C1_GPIOInits(I2CGPIOHandle_t *pI2CGPIOHandle){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	pI2CGPIOHandle->SCL.pGPIOx = GPIOB;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <I2C1_GPIOInits+0x78>)
 80002e4:	60da      	str	r2, [r3, #12]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2206      	movs	r2, #6
 80002ea:	741a      	strb	r2, [r3, #16]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2202      	movs	r2, #2
 80002f0:	745a      	strb	r2, [r3, #17]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2204      	movs	r2, #4
 80002f6:	755a      	strb	r2, [r3, #21]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2201      	movs	r2, #1
 80002fc:	751a      	strb	r2, [r3, #20]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	74da      	strb	r2, [r3, #19]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2202      	movs	r2, #2
 8000308:	749a      	strb	r2, [r3, #18]

	pI2CGPIOHandle->SDA.pGPIOx = GPIOB;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <I2C1_GPIOInits+0x78>)
 800030e:	601a      	str	r2, [r3, #0]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2207      	movs	r2, #7
 8000314:	711a      	strb	r2, [r3, #4]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2202      	movs	r2, #2
 800031a:	715a      	strb	r2, [r3, #5]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2204      	movs	r2, #4
 8000320:	725a      	strb	r2, [r3, #9]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2201      	movs	r2, #1
 8000326:	721a      	strb	r2, [r3, #8]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	71da      	strb	r2, [r3, #7]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2202      	movs	r2, #2
 8000332:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&(pI2CGPIOHandle->SDA));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 faac 	bl	8000894 <GPIO_Init>
	GPIO_Init(&(pI2CGPIOHandle->SCL));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	330c      	adds	r3, #12
 8000340:	4618      	mov	r0, r3
 8000342:	f000 faa7 	bl	8000894 <GPIO_Init>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020400 	.word	0x40020400

08000354 <I2C1_Init>:

void I2C1_Init(I2C_Handle_t *pI2CHandle){
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx = I2C1;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <I2C1_Init+0x34>)
 8000360:	601a      	str	r2, [r3, #0]
	pI2CHandle->I2C_Config.AckControl = I2C_ACK_ENABLE;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2201      	movs	r2, #1
 8000366:	725a      	strb	r2, [r3, #9]
	pI2CHandle->I2C_Config.DeviceAddress = 0x3F;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	223f      	movs	r2, #63	; 0x3f
 800036c:	721a      	strb	r2, [r3, #8]
	pI2CHandle->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	729a      	strb	r2, [r3, #10]
	pI2CHandle->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <I2C1_Init+0x38>)
 8000378:	605a      	str	r2, [r3, #4]

	I2C_Init(pI2CHandle);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 fe0e 	bl	8000f9c <I2C_Init>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40005400 	.word	0x40005400
 800038c:	000186a0 	.word	0x000186a0

08000390 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* pUSRPB){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	pUSRPB->pGPIOx = GPIOA;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <USRBTN_Init+0x40>)
 800039c:	601a      	str	r2, [r3, #0]
	pUSRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	711a      	strb	r2, [r3, #4]
	pUSRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2205      	movs	r2, #5
 80003a8:	715a      	strb	r2, [r3, #5]
	pUSRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2202      	movs	r2, #2
 80003ae:	719a      	strb	r2, [r3, #6]
	pUSRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	71da      	strb	r2, [r3, #7]

	GPIO_Init(pUSRPB);
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f000 fa6c 	bl	8000894 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 80003bc:	2201      	movs	r2, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	2006      	movs	r0, #6
 80003c2:	f000 fc15 	bl	8000bf0 <GPIO_IRQInterruptConfig>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020000 	.word	0x40020000

080003d4 <sendCommand>:

void sendCommand(uint8_t cmd){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af02      	add	r7, sp, #8
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	while(I2C_MasterSendDataIT(&myI2CHandle, &cmd, sizeof(uint8_t), SLAVEADDR, I2C_ENABLE_RS) != I2C_READY);
 80003de:	bf00      	nop
 80003e0:	1df9      	adds	r1, r7, #7
 80003e2:	2301      	movs	r3, #1
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	2368      	movs	r3, #104	; 0x68
 80003e8:	2201      	movs	r2, #1
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <sendCommand+0x2c>)
 80003ec:	f001 f966 	bl	80016bc <I2C_MasterSendDataIT>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f4      	bne.n	80003e0 <sendCommand+0xc>
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000a0 	.word	0x200000a0

08000404 <getLength>:

// Retrieves the length of the string
uint8_t getLength(){
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af02      	add	r7, sp, #8
	uint8_t strLen;

	sendCommand(CMD_READLENGTH);
 800040a:	2051      	movs	r0, #81	; 0x51
 800040c:	f7ff ffe2 	bl	80003d4 <sendCommand>

	while(I2C_MasterReceiveDataIT(&myI2CHandle, &strLen, 1, SLAVEADDR, I2C_ENABLE_RS)!= I2C_READY);
 8000410:	bf00      	nop
 8000412:	1df9      	adds	r1, r7, #7
 8000414:	2301      	movs	r3, #1
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2368      	movs	r3, #104	; 0x68
 800041a:	2201      	movs	r2, #1
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <getLength+0x30>)
 800041e:	f001 f990 	bl	8001742 <I2C_MasterReceiveDataIT>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f4      	bne.n	8000412 <getLength+0xe>

	return strLen;
 8000428:	79fb      	ldrb	r3, [r7, #7]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000a0 	.word	0x200000a0

08000438 <getData>:

// Retrieves the string itself
uint8_t* getData(uint8_t len){
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af02      	add	r7, sp, #8
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	uint8_t* data = (uint8_t*)malloc((len * sizeof(uint8_t)) + 1);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3301      	adds	r3, #1
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fa3c 	bl	80018c4 <malloc>
 800044c:	4603      	mov	r3, r0
 800044e:	60fb      	str	r3, [r7, #12]

	sendCommand(CMD_READDATA);
 8000450:	2052      	movs	r0, #82	; 0x52
 8000452:	f7ff ffbf 	bl	80003d4 <sendCommand>

	while(I2C_MasterReceiveDataIT(&myI2CHandle, data, len, SLAVEADDR, I2C_DISABLE_RS)!= I2C_READY);
 8000456:	bf00      	nop
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	2300      	movs	r3, #0
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2368      	movs	r3, #104	; 0x68
 8000460:	68f9      	ldr	r1, [r7, #12]
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <getData+0x40>)
 8000464:	f001 f96d 	bl	8001742 <I2C_MasterReceiveDataIT>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1f4      	bne.n	8000458 <getData+0x20>

	return data;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000a0 	.word	0x200000a0

0800047c <readFromArduino>:

void readFromArduino(){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	I2C_PeripheralControl(&myI2CHandle, ENABLE);
 8000482:	2101      	movs	r1, #1
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <readFromArduino+0x48>)
 8000486:	f000 fe87 	bl	8001198 <I2C_PeripheralControl>

	uint8_t len = getLength();
 800048a:	f7ff ffbb 	bl	8000404 <getLength>
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	uint8_t* data = getData(len);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffcf 	bl	8000438 <getData>
 800049a:	6038      	str	r0, [r7, #0]
	I2C_PeripheralControl(&myI2CHandle, DISABLE);
 800049c:	2100      	movs	r1, #0
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <readFromArduino+0x48>)
 80004a0:	f000 fe7a 	bl	8001198 <I2C_PeripheralControl>

	data[len] = '\0';
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]

	printf("Received string: %s\n", (char*)data);
 80004ae:	6839      	ldr	r1, [r7, #0]
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <readFromArduino+0x4c>)
 80004b2:	f001 faff 	bl	8001ab4 <iprintf>

	free(data);
 80004b6:	6838      	ldr	r0, [r7, #0]
 80004b8:	f001 fa0c 	bl	80018d4 <free>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000a0 	.word	0x200000a0
 80004c8:	08002e58 	.word	0x08002e58

080004cc <main>:

int main(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80004d2:	f002 fc39 	bl	8002d48 <initialise_monitor_handles>

	// Initialize the GPIO's to be used for I2C
	I2CGPIOHandle_t I2C1GPIOs;
	I2C1_GPIOInits(&I2C1GPIOs);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fefc 	bl	80002d8 <I2C1_GPIOInits>

	// Initialize I2C1 itself
	I2C1_Init(&myI2CHandle);
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <main+0x38>)
 80004e2:	f7ff ff37 	bl	8000354 <I2C1_Init>

	// I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, 0, ENABLE);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2100      	movs	r1, #0
 80004ea:	2020      	movs	r0, #32
 80004ec:	f000 fe7a 	bl	80011e4 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, 0, ENABLE);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2100      	movs	r1, #0
 80004f4:	201f      	movs	r0, #31
 80004f6:	f000 fe75 	bl	80011e4 <I2C_IRQInterruptConfig>

	// Initialize push button
	GPIO_Handle_t USRPB;
	USRBTN_Init(&USRPB);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff47 	bl	8000390 <USRBTN_Init>

	while(1);
 8000502:	e7fe      	b.n	8000502 <main+0x36>
 8000504:	200000a0 	.word	0x200000a0

08000508 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	delay(200);
 800050c:	20c8      	movs	r0, #200	; 0xc8
 800050e:	f7ff fec7 	bl	80002a0 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fc1c 	bl	8000d50 <GPIO_IRQHandling>
	readFromArduino();
 8000518:	f7ff ffb0 	bl	800047c <readFromArduino>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&myI2CHandle);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <I2C1_ER_IRQHandler+0x10>)
 8000526:	f001 f843 	bl	80015b0 <I2C_ER_IRQHandling>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000a0 	.word	0x200000a0

08000534 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&myI2CHandle);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <I2C1_EV_IRQHandler+0x10>)
 800053a:	f000 ff71 	bl	8001420 <I2C_EV_IRQHandling>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000a0 	.word	0x200000a0

08000548 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t EvorEr){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	if(EvorEr == I2C_EV_TX_CMPLT){
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <I2C_ApplicationEventCallback+0x1a>
		printf("Tx is completed\n");
 800055a:	4820      	ldr	r0, [pc, #128]	; (80005dc <I2C_ApplicationEventCallback+0x94>)
 800055c:	f001 fb30 	bl	8001bc0 <puts>
	} else if (EvorEr == I2C_ERROR_OVR){
		printf("Error: Overrun/underrun\n");
	} else if (EvorEr == I2C_ERROR_TIMEOUT){
		printf("Error: Timeout\n");
	}
}
 8000560:	e037      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_EV_RX_CMPLT){
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d103      	bne.n	8000570 <I2C_ApplicationEventCallback+0x28>
		printf("Rx is completed\n");
 8000568:	481d      	ldr	r0, [pc, #116]	; (80005e0 <I2C_ApplicationEventCallback+0x98>)
 800056a:	f001 fb29 	bl	8001bc0 <puts>
}
 800056e:	e030      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_EV_STOP){
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d103      	bne.n	800057e <I2C_ApplicationEventCallback+0x36>
		printf("Communications have been stopped\n");
 8000576:	481b      	ldr	r0, [pc, #108]	; (80005e4 <I2C_ApplicationEventCallback+0x9c>)
 8000578:	f001 fb22 	bl	8001bc0 <puts>
}
 800057c:	e029      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_ERROR_BERR){
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d103      	bne.n	800058c <I2C_ApplicationEventCallback+0x44>
		printf("Error: Bus error\n");
 8000584:	4818      	ldr	r0, [pc, #96]	; (80005e8 <I2C_ApplicationEventCallback+0xa0>)
 8000586:	f001 fb1b 	bl	8001bc0 <puts>
}
 800058a:	e022      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_ERROR_ARLO){
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d103      	bne.n	800059a <I2C_ApplicationEventCallback+0x52>
		printf("Error: Arbitration lost\n");
 8000592:	4816      	ldr	r0, [pc, #88]	; (80005ec <I2C_ApplicationEventCallback+0xa4>)
 8000594:	f001 fb14 	bl	8001bc0 <puts>
}
 8000598:	e01b      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_ERROR_AF){
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b05      	cmp	r3, #5
 800059e:	d10b      	bne.n	80005b8 <I2C_ApplicationEventCallback+0x70>
		printf("Error: ACK failure\n");
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <I2C_ApplicationEventCallback+0xa8>)
 80005a2:	f001 fb0d 	bl	8001bc0 <puts>
		I2C_CloseSendData(pI2CHandle);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 f911 	bl	80017ce <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fde1 	bl	8001178 <I2C_GenerateStopCondition>
		while(1);
 80005b6:	e7fe      	b.n	80005b6 <I2C_ApplicationEventCallback+0x6e>
	} else if (EvorEr == I2C_ERROR_OVR){
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d103      	bne.n	80005c6 <I2C_ApplicationEventCallback+0x7e>
		printf("Error: Overrun/underrun\n");
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <I2C_ApplicationEventCallback+0xac>)
 80005c0:	f001 fafe 	bl	8001bc0 <puts>
}
 80005c4:	e005      	b.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
	} else if (EvorEr == I2C_ERROR_TIMEOUT){
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d102      	bne.n	80005d2 <I2C_ApplicationEventCallback+0x8a>
		printf("Error: Timeout\n");
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <I2C_ApplicationEventCallback+0xb0>)
 80005ce:	f001 faf7 	bl	8001bc0 <puts>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08002e70 	.word	0x08002e70
 80005e0:	08002e80 	.word	0x08002e80
 80005e4:	08002e90 	.word	0x08002e90
 80005e8:	08002eb4 	.word	0x08002eb4
 80005ec:	08002ec8 	.word	0x08002ec8
 80005f0:	08002ee0 	.word	0x08002ee0
 80005f4:	08002ef4 	.word	0x08002ef4
 80005f8:	08002f0c 	.word	0x08002f0c

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f001 f920 	bl	8001870 <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20020000 	.word	0x20020000
 800065c:	00000400 	.word	0x00000400
 8000660:	200000c8 	.word	0x200000c8
 8000664:	20000188 	.word	0x20000188

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800066c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000696:	f001 f8f1 	bl	800187c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff ff17 	bl	80004cc <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80006ac:	08002fd8 	.word	0x08002fd8
  ldr r2, =_sbss
 80006b0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80006b4:	20000188 	.word	0x20000188

080006b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d162      	bne.n	8000794 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a66      	ldr	r2, [pc, #408]	; (800086c <GPIO_PeriClockControl+0x1b0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a65      	ldr	r2, [pc, #404]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80006e2:	e0bc      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a63      	ldr	r2, [pc, #396]	; (8000874 <GPIO_PeriClockControl+0x1b8>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d106      	bne.n	80006fa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006ec:	4b60      	ldr	r3, [pc, #384]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a5f      	ldr	r2, [pc, #380]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f8:	e0b1      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a5e      	ldr	r2, [pc, #376]	; (8000878 <GPIO_PeriClockControl+0x1bc>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000702:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a5a      	ldr	r2, [pc, #360]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070e:	e0a6      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a5a      	ldr	r2, [pc, #360]	; (800087c <GPIO_PeriClockControl+0x1c0>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d106      	bne.n	8000726 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a54      	ldr	r2, [pc, #336]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000724:	e09b      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a55      	ldr	r2, [pc, #340]	; (8000880 <GPIO_PeriClockControl+0x1c4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800072e:	4b50      	ldr	r3, [pc, #320]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a4f      	ldr	r2, [pc, #316]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073a:	e090      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a51      	ldr	r2, [pc, #324]	; (8000884 <GPIO_PeriClockControl+0x1c8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000744:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a49      	ldr	r2, [pc, #292]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000750:	e085      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a4c      	ldr	r2, [pc, #304]	; (8000888 <GPIO_PeriClockControl+0x1cc>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a44      	ldr	r2, [pc, #272]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000766:	e07a      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a48      	ldr	r2, [pc, #288]	; (800088c <GPIO_PeriClockControl+0x1d0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a3e      	ldr	r2, [pc, #248]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077c:	e06f      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a43      	ldr	r2, [pc, #268]	; (8000890 <GPIO_PeriClockControl+0x1d4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d16b      	bne.n	800085e <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a39      	ldr	r2, [pc, #228]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000792:	e064      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d161      	bne.n	800085e <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a33      	ldr	r2, [pc, #204]	; (800086c <GPIO_PeriClockControl+0x1b0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a32      	ldr	r2, [pc, #200]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ae:	e056      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <GPIO_PeriClockControl+0x1b8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c4:	e04b      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <GPIO_PeriClockControl+0x1bc>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007d4:	f023 0304 	bic.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007da:	e040      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a27      	ldr	r2, [pc, #156]	; (800087c <GPIO_PeriClockControl+0x1c0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007ea:	f023 0308 	bic.w	r3, r3, #8
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f0:	e035      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <GPIO_PeriClockControl+0x1c4>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000800:	f023 0310 	bic.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000806:	e02a      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <GPIO_PeriClockControl+0x1c8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a16      	ldr	r2, [pc, #88]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000816:	f023 0320 	bic.w	r3, r3, #32
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081c:	e01f      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <GPIO_PeriClockControl+0x1cc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800082c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000832:	e014      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <GPIO_PeriClockControl+0x1d0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000848:	e009      	b.n	800085e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <GPIO_PeriClockControl+0x1d4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d105      	bne.n	800085e <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <GPIO_PeriClockControl+0x1b4>)
 8000858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400
 8000878:	40020800 	.word	0x40020800
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021000 	.word	0x40021000
 8000884:	40021400 	.word	0x40021400
 8000888:	40021800 	.word	0x40021800
 800088c:	40021c00 	.word	0x40021c00
 8000890:	40022000 	.word	0x40022000

08000894 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff0a 	bl	80006bc <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	795b      	ldrb	r3, [r3, #5]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d820      	bhi.n	80008f6 <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2103      	movs	r1, #3
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	e0d0      	b.n	8000a98 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d117      	bne.n	800092e <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008fe:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <GPIO_Init+0x19c>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	7912      	ldrb	r2, [r2, #4]
 8000906:	4611      	mov	r1, r2
 8000908:	2201      	movs	r2, #1
 800090a:	408a      	lsls	r2, r1
 800090c:	4611      	mov	r1, r2
 800090e:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <GPIO_Init+0x19c>)
 8000910:	430b      	orrs	r3, r1
 8000912:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000914:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <GPIO_Init+0x19c>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	7912      	ldrb	r2, [r2, #4]
 800091c:	4611      	mov	r1, r2
 800091e:	2201      	movs	r2, #1
 8000920:	408a      	lsls	r2, r1
 8000922:	43d2      	mvns	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a42      	ldr	r2, [pc, #264]	; (8000a30 <GPIO_Init+0x19c>)
 8000928:	400b      	ands	r3, r1
 800092a:	6093      	str	r3, [r2, #8]
 800092c:	e031      	b.n	8000992 <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b05      	cmp	r3, #5
 8000934:	d117      	bne.n	8000966 <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <GPIO_Init+0x19c>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	7912      	ldrb	r2, [r2, #4]
 800093e:	4611      	mov	r1, r2
 8000940:	2201      	movs	r2, #1
 8000942:	408a      	lsls	r2, r1
 8000944:	4611      	mov	r1, r2
 8000946:	4a3a      	ldr	r2, [pc, #232]	; (8000a30 <GPIO_Init+0x19c>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800094c:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <GPIO_Init+0x19c>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	7912      	ldrb	r2, [r2, #4]
 8000954:	4611      	mov	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	408a      	lsls	r2, r1
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <GPIO_Init+0x19c>)
 8000960:	400b      	ands	r3, r1
 8000962:	60d3      	str	r3, [r2, #12]
 8000964:	e015      	b.n	8000992 <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <GPIO_Init+0x19c>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	7912      	ldrb	r2, [r2, #4]
 800096e:	4611      	mov	r1, r2
 8000970:	2201      	movs	r2, #1
 8000972:	408a      	lsls	r2, r1
 8000974:	4611      	mov	r1, r2
 8000976:	4a2e      	ldr	r2, [pc, #184]	; (8000a30 <GPIO_Init+0x19c>)
 8000978:	430b      	orrs	r3, r1
 800097a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <GPIO_Init+0x19c>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	7912      	ldrb	r2, [r2, #4]
 8000984:	4611      	mov	r1, r2
 8000986:	2201      	movs	r2, #1
 8000988:	408a      	lsls	r2, r1
 800098a:	4611      	mov	r1, r2
 800098c:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <GPIO_Init+0x19c>)
 800098e:	430b      	orrs	r3, r1
 8000990:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <GPIO_Init+0x1a0>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <GPIO_Init+0x1a0>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <GPIO_Init+0x1a4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d050      	beq.n	8000a5c <GPIO_Init+0x1c8>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <GPIO_Init+0x1a8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d032      	beq.n	8000a2a <GPIO_Init+0x196>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <GPIO_Init+0x1ac>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d02b      	beq.n	8000a26 <GPIO_Init+0x192>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <GPIO_Init+0x1b0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d024      	beq.n	8000a22 <GPIO_Init+0x18e>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <GPIO_Init+0x1b4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d01d      	beq.n	8000a1e <GPIO_Init+0x18a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <GPIO_Init+0x1b8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d016      	beq.n	8000a1a <GPIO_Init+0x186>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <GPIO_Init+0x1bc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00f      	beq.n	8000a16 <GPIO_Init+0x182>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <GPIO_Init+0x1c0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d008      	beq.n	8000a12 <GPIO_Init+0x17e>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <GPIO_Init+0x1c4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <GPIO_Init+0x17a>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e027      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e025      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e023      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a16:	2306      	movs	r3, #6
 8000a18:	e021      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e01f      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e01d      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e01b      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e019      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e017      	b.n	8000a5e <GPIO_Init+0x1ca>
 8000a2e:	bf00      	nop
 8000a30:	40013c00 	.word	0x40013c00
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40021400 	.word	0x40021400
 8000a50:	40021800 	.word	0x40021800
 8000a54:	40021c00 	.word	0x40021c00
 8000a58:	40022000 	.word	0x40022000
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000a60:	4a61      	ldr	r2, [pc, #388]	; (8000be8 <GPIO_Init+0x354>)
 8000a62:	7cfb      	ldrb	r3, [r7, #19]
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6a:	7c79      	ldrb	r1, [r7, #17]
 8000a6c:	7cbb      	ldrb	r3, [r7, #18]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	495c      	ldr	r1, [pc, #368]	; (8000be8 <GPIO_Init+0x354>)
 8000a78:	7cfb      	ldrb	r3, [r7, #19]
 8000a7a:	4302      	orrs	r2, r0
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <GPIO_Init+0x358>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7912      	ldrb	r2, [r2, #4]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	408a      	lsls	r2, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a56      	ldr	r2, [pc, #344]	; (8000bec <GPIO_Init+0x358>)
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	799b      	ldrb	r3, [r3, #6]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2103      	movs	r1, #3
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	400a      	ands	r2, r1
 8000aca:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6899      	ldr	r1, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	79db      	ldrb	r3, [r3, #7]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68d9      	ldr	r1, [r3, #12]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d003      	beq.n	8000b34 <GPIO_Init+0x2a0>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	795b      	ldrb	r3, [r3, #5]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d11f      	bne.n	8000b74 <GPIO_Init+0x2e0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7a1b      	ldrb	r3, [r3, #8]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2301      	movs	r3, #1
 8000b52:	408b      	lsls	r3, r1
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6859      	ldr	r1, [r3, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d131      	bne.n	8000be0 <GPIO_Init+0x34c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	791b      	ldrb	r3, [r3, #4]
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	7c3a      	ldrb	r2, [r7, #16]
 8000b94:	3208      	adds	r2, #8
 8000b96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	7c3a      	ldrb	r2, [r7, #16]
 8000bae:	4001      	ands	r1, r0
 8000bb0:	3208      	adds	r2, #8
 8000bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	7c3a      	ldrb	r2, [r7, #16]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a5b      	ldrb	r3, [r3, #9]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	7c3a      	ldrb	r2, [r7, #16]
 8000bd8:	4301      	orrs	r1, r0
 8000bda:	3208      	adds	r2, #8
 8000bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013800 	.word	0x40013800
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d133      	bne.n	8000c6e <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	d80a      	bhi.n	8000c22 <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <GPIO_IRQInterruptConfig+0xf8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4a33      	ldr	r2, [pc, #204]	; (8000ce8 <GPIO_IRQInterruptConfig+0xf8>)
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e058      	b.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	d90f      	bls.n	8000c48 <GPIO_IRQInterruptConfig+0x58>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c2c:	d80c      	bhi.n	8000c48 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <GPIO_IRQInterruptConfig+0xfc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	f002 021f 	and.w	r2, r2, #31
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <GPIO_IRQInterruptConfig+0xfc>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e045      	b.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c4c:	d942      	bls.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b5f      	cmp	r3, #95	; 0x5f
 8000c52:	d83f      	bhi.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <GPIO_IRQInterruptConfig+0x100>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	79fa      	ldrb	r2, [r7, #7]
 8000c5a:	f002 021f 	and.w	r2, r2, #31
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <GPIO_IRQInterruptConfig+0x100>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e032      	b.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b1f      	cmp	r3, #31
 8000c72:	d80a      	bhi.n	8000c8a <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <GPIO_IRQInterruptConfig+0x104>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <GPIO_IRQInterruptConfig+0x104>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e024      	b.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b1f      	cmp	r3, #31
 8000c8e:	d90f      	bls.n	8000cb0 <GPIO_IRQInterruptConfig+0xc0>
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b3f      	cmp	r3, #63	; 0x3f
 8000c94:	d80c      	bhi.n	8000cb0 <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <GPIO_IRQInterruptConfig+0x108>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	f002 021f 	and.w	r2, r2, #31
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <GPIO_IRQInterruptConfig+0x108>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e011      	b.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb4:	d90e      	bls.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b5f      	cmp	r3, #95	; 0x5f
 8000cba:	d80b      	bhi.n	8000cd4 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <GPIO_IRQInterruptConfig+0x10c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	f002 021f 	and.w	r2, r2, #31
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <GPIO_IRQInterruptConfig+0x10c>)
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	6839      	ldr	r1, [r7, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f811 	bl	8000d00 <GPIO_IRQPriorityConfig>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000e104 	.word	0xe000e104
 8000cf0:	e000e108 	.word	0xe000e108
 8000cf4:	e000e180 	.word	0xe000e180
 8000cf8:	e000e184 	.word	0xe000e184
 8000cfc:	e000e188 	.word	0xe000e188

08000d00 <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d2c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d30:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <GPIO_IRQHandling>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQHandling(uint8_t pinNumber){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << pinNumber)){
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <GPIO_IRQHandling+0x3c>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	79fa      	ldrb	r2, [r7, #7]
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d009      	beq.n	8000d80 <GPIO_IRQHandling+0x30>
		// Clear the pending register by writing 1 to the corresponding bit
		EXTI->PR |= (1 << pinNumber);
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <GPIO_IRQHandling+0x3c>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <GPIO_IRQHandling+0x3c>)
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6153      	str	r3, [r2, #20]
	}
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40013c00 	.word	0x40013c00

08000d90 <I2C_ExecuteAddressPhase>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t RorW){
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	70bb      	strb	r3, [r7, #2]
	if (RorW == READ)
 8000da0:	78bb      	ldrb	r3, [r7, #2]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d107      	bne.n	8000db6 <I2C_ExecuteAddressPhase+0x26>
		pI2Cx->DR = ((slaveAddr << 1) | (0b00000001));
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	461a      	mov	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	611a      	str	r2, [r3, #16]
	else if (RorW == WRITE)
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
}
 8000db4:	e007      	b.n	8000dc6 <I2C_ExecuteAddressPhase+0x36>
	else if (RorW == WRITE)
 8000db6:	78bb      	ldrb	r3, [r7, #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <I2C_ExecuteAddressPhase+0x36>
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <I2C_ClearADDRFlag>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01f      	beq.n	8000e28 <I2C_ClearADDRFlag+0x56>
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7f1b      	ldrb	r3, [r3, #28]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d123      	bne.n	8000e38 <I2C_ClearADDRFlag+0x66>
			if(pI2CHandle->RxSize == 1){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d10e      	bne.n	8000e16 <I2C_ClearADDRFlag+0x44>
				// First disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f98e 	bl	8001120 <I2C_ManageAcking>

				// Clear the ADDR flag (Read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR flag (Read SR1, read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000e14:	e010      	b.n	8000e38 <I2C_ClearADDRFlag+0x66>
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	60fb      	str	r3, [r7, #12]
}
 8000e26:	e007      	b.n	8000e38 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	60fb      	str	r3, [r7, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <I2C_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d120      	bne.n	8000e94 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <I2C_PeriClockControl+0xa8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DI();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DI();
	}
}
 8000e66:	e038      	b.n	8000eda <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <I2C_PeriClockControl+0xb0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d106      	bne.n	8000e7e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e7c:	e02d      	b.n	8000eda <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <I2C_PeriClockControl+0xb4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d129      	bne.n	8000eda <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e92:	e022      	b.n	8000eda <I2C_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11f      	bne.n	8000eda <I2C_PeriClockControl+0x9a>
		if(pI2Cx == I2C1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <I2C_PeriClockControl+0xa8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d106      	bne.n	8000eb0 <I2C_PeriClockControl+0x70>
			I2C1_PCLK_DI();
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000ea8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eae:	e014      	b.n	8000eda <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <I2C_PeriClockControl+0xb0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d106      	bne.n	8000ec6 <I2C_PeriClockControl+0x86>
			I2C2_PCLK_DI();
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000ebe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec4:	e009      	b.n	8000eda <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <I2C_PeriClockControl+0xb4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d105      	bne.n	8000eda <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_DI();
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <I2C_PeriClockControl+0xac>)
 8000ed4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40005800 	.word	0x40005800
 8000ef4:	40005c00 	.word	0x40005c00

08000ef8 <RCC_GetPCLK1Value>:
 *
 * @return		- APB1 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1Value(void){
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
	uint32_t pclk1, apb1p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <RCC_GetPCLK1Value+0x90>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <RCC_GetPCLK1Value+0x94>)
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e004      	b.n	8000f22 <RCC_GetPCLK1Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <RCC_GetPCLK1Value+0x2a>
		systemClk = 8000000;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <RCC_GetPCLK1Value+0x98>)
 8000f20:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	//AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <RCC_GetPCLK1Value+0x90>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d802      	bhi.n	8000f3a <RCC_GetPCLK1Value+0x42>
		ahbp = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	e005      	b.n	8000f46 <RCC_GetPCLK1Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <RCC_GetPCLK1Value+0x9c>)
 8000f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f44:	613b      	str	r3, [r7, #16]

	//APB1 prescaler starts at 10th bit
	temp = (RCC->CFGR >> 10) & 0b111;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <RCC_GetPCLK1Value+0x90>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	0a9b      	lsrs	r3, r3, #10
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d802      	bhi.n	8000f5e <RCC_GetPCLK1Value+0x66>
		apb1p = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e005      	b.n	8000f6a <RCC_GetPCLK1Value+0x72>
	else
		apb1p = APB1Prescaler[temp - 0b100];
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3b04      	subs	r3, #4
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <RCC_GetPCLK1Value+0xa0>)
 8000f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f68:	617b      	str	r3, [r7, #20]

	pclk1 = systemClk/(ahbp * apb1p);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000f7a:	683b      	ldr	r3, [r7, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	00f42400 	.word	0x00f42400
 8000f90:	007a1200 	.word	0x007a1200
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000010 	.word	0x20000010

08000f9c <I2C_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff46 	bl	8000e40 <I2C_PeriClockControl>

	tempreg |= (pI2CHandle->I2C_Config.AckControl << 10);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7a5b      	ldrb	r3, [r3, #9]
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 8000fce:	f7ff ff93 	bl	8000ef8 <RCC_GetPCLK1Value>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <I2C_Init+0x17c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0c9b      	lsrs	r3, r3, #18
 8000fdc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fe8:	605a      	str	r2, [r3, #4]

	// Address configuration
	tempreg = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	tempreg = (pI2CHandle->I2C_Config.DeviceAddress << I2C_OAR1_ADD7);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7a1b      	ldrb	r3, [r3, #8]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6899      	ldr	r1, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	430a      	orrs	r2, r1
 8001004:	609a      	str	r2, [r3, #8]

	// Set to 7-bit slave address mode
	pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_ADD_MODE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001014:	609a      	str	r2, [r3, #8]

	// Bit 14 of OAR1 has to be kept at 1 by software, for some reason
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001024:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	817b      	strh	r3, [r7, #10]
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <I2C_Init+0x180>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d817      	bhi.n	8001064 <I2C_Init+0xc8>
		// Mode is standard mode
		pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_FS);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001042:	61da      	str	r2, [r3, #28]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.SCLSpeed);
 8001044:	f7ff ff58 	bl	8000ef8 <RCC_GetPCLK1Value>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & (0xFFF);
 8001056:	897b      	ldrh	r3, [r7, #10]
 8001058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e02a      	b.n	80010ba <I2C_Init+0x11e>
	} else {
		// Mode is fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	61da      	str	r2, [r3, #28]

		if(pI2CHandle->I2C_Config.FMDutyCycle == I2C_FM_DUTY_2){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7a9b      	ldrb	r3, [r3, #10]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <I2C_Init+0xf8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.SCLSpeed);
 800107c:	f7ff ff3c 	bl	8000ef8 <RCC_GetPCLK1Value>
 8001080:	4601      	mov	r1, r0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001090:	817b      	strh	r3, [r7, #10]
 8001092:	e00c      	b.n	80010ae <I2C_Init+0x112>
		} else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.SCLSpeed);
 8001094:	f7ff ff30 	bl	8000ef8 <RCC_GetPCLK1Value>
 8001098:	4601      	mov	r1, r0
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	009a      	lsls	r2, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ac:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & (0xFFF);
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= (tempreg);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69d9      	ldr	r1, [r3, #28]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <I2C_Init+0x180>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d809      	bhi.n	80010e8 <I2C_Init+0x14c>
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80010d4:	f7ff ff10 	bl	8000ef8 <RCC_GetPCLK1Value>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <I2C_Init+0x17c>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0c9b      	lsrs	r3, r3, #18
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e00c      	b.n	8001102 <I2C_Init+0x166>
	} else {
		tempreg = ((RCC_GetPCLK1Value() * 300) /1000000U) + 1;
 80010e8:	f7ff ff06 	bl	8000ef8 <RCC_GetPCLK1Value>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <I2C_Init+0x17c>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9b      	lsrs	r3, r3, #18
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE =  (tempreg & 0x3F);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800110c:	621a      	str	r2, [r3, #32]
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	431bde83 	.word	0x431bde83
 800111c:	000186a0 	.word	0x000186a0

08001120 <I2C_ManageAcking>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t ackOrNack){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
	if(ackOrNack == I2C_ACK_ENABLE)
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d106      	bne.n	8001140 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
}
 800113e:	e005      	b.n	800114c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <I2C_GenerateStartCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <I2C_GenerateStopCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <I2C_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeripheralControl(I2C_Handle_t* pI2CHandle, uint8_t EnorDi){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d110      	bne.n	80011cc <I2C_PeripheralControl+0x34>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
		I2C_ManageAcking(pI2CHandle->pI2Cx, pI2CHandle->I2C_Config.AckControl);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7a5b      	ldrb	r3, [r3, #9]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f7ff ffab 	bl	8001120 <I2C_ManageAcking>
	}
	else
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}
 80011ca:	e007      	b.n	80011dc <I2C_PeripheralControl+0x44>
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <I2C_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d133      	bne.n	8001262 <I2C_IRQInterruptConfig+0x7e>
		if (IRQNumber < 32)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	d80a      	bhi.n	8001216 <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <I2C_IRQInterruptConfig+0xfc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	4611      	mov	r1, r2
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <I2C_IRQInterruptConfig+0xfc>)
 8001210:	430b      	orrs	r3, r1
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e05b      	b.n	80012ce <I2C_IRQInterruptConfig+0xea>
		else if (IRQNumber >= 32 && IRQNumber < 64)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b1f      	cmp	r3, #31
 800121a:	d90f      	bls.n	800123c <I2C_IRQInterruptConfig+0x58>
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b3f      	cmp	r3, #63	; 0x3f
 8001220:	d80c      	bhi.n	800123c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <I2C_IRQInterruptConfig+0x100>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	f002 021f 	and.w	r2, r2, #31
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	4611      	mov	r1, r2
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <I2C_IRQInterruptConfig+0x100>)
 8001236:	430b      	orrs	r3, r1
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e048      	b.n	80012ce <I2C_IRQInterruptConfig+0xea>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b3f      	cmp	r3, #63	; 0x3f
 8001240:	d945      	bls.n	80012ce <I2C_IRQInterruptConfig+0xea>
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b5f      	cmp	r3, #95	; 0x5f
 8001246:	d842      	bhi.n	80012ce <I2C_IRQInterruptConfig+0xea>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <I2C_IRQInterruptConfig+0x104>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4611      	mov	r1, r2
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <I2C_IRQInterruptConfig+0x104>)
 800125c:	430b      	orrs	r3, r1
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e035      	b.n	80012ce <I2C_IRQInterruptConfig+0xea>
	} else if (EnorDi == DISABLE){
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d132      	bne.n	80012ce <I2C_IRQInterruptConfig+0xea>
		if (IRQNumber < 32)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b1f      	cmp	r3, #31
 800126c:	d80a      	bhi.n	8001284 <I2C_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <I2C_IRQInterruptConfig+0x108>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4611      	mov	r1, r2
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <I2C_IRQInterruptConfig+0x108>)
 800127e:	430b      	orrs	r3, r1
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e024      	b.n	80012ce <I2C_IRQInterruptConfig+0xea>
		else if (IRQNumber >= 32 && IRQNumber < 64)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b1f      	cmp	r3, #31
 8001288:	d90f      	bls.n	80012aa <I2C_IRQInterruptConfig+0xc6>
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b3f      	cmp	r3, #63	; 0x3f
 800128e:	d80c      	bhi.n	80012aa <I2C_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <I2C_IRQInterruptConfig+0x10c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4611      	mov	r1, r2
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <I2C_IRQInterruptConfig+0x10c>)
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e011      	b.n	80012ce <I2C_IRQInterruptConfig+0xea>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b3f      	cmp	r3, #63	; 0x3f
 80012ae:	d90e      	bls.n	80012ce <I2C_IRQInterruptConfig+0xea>
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b5f      	cmp	r3, #95	; 0x5f
 80012b4:	d80b      	bhi.n	80012ce <I2C_IRQInterruptConfig+0xea>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <I2C_IRQInterruptConfig+0x110>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	f002 021f 	and.w	r2, r2, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <I2C_IRQInterruptConfig+0x110>)
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6013      	str	r3, [r2, #0]
	}

	I2C_IRQPriorityConfig(IRQNumber, IRQPriority);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f810 	bl	80012f8 <I2C_IRQPriorityConfig>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000e104 	.word	0xe000e104
 80012e8:	e000e108 	.word	0xe000e108
 80012ec:	e000e180 	.word	0xe000e180
 80012f0:	e000e184 	.word	0xe000e184
 80012f4:	e000e188 	.word	0xe000e188

080012f8 <I2C_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3304      	adds	r3, #4
 800131a:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001324:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001328:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	431a      	orrs	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <I2C_MasterHandleTXEInterrupt>:
 * @return		- none
 *
 * @Note		- none
 */

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t* pI2CHandle){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00f      	beq.n	8001378 <I2C_MasterHandleTXEInterrupt+0x30>
		// Load the data into DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	611a      	str	r2, [r3, #16]

		// Decrement TxLen
		pI2CHandle->TxLen--;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	615a      	str	r2, [r3, #20]

		// Increment the buffer address
		pI2CHandle->pTxBuffer++;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]
	}
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <I2C_MasterHandleRXNEInterrupt>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t* pI2CHandle){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	// We have to do data reception
	if(pI2CHandle->RxSize == 1){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10c      	bne.n	80013ae <I2C_MasterHandleRXNEInterrupt+0x2a>
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxLen--;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
		I2C_CloseReceiveData(pI2CHandle);

		// Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
	}
}
 80013ac:	e034      	b.n	8001418 <I2C_MasterHandleRXNEInterrupt+0x94>
	} else if (pI2CHandle->RxSize > 1){
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d91b      	bls.n	80013ee <I2C_MasterHandleRXNEInterrupt+0x6a>
		if(pI2CHandle->RxLen == 2){ // if the last 2 bytes are remaining
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d105      	bne.n	80013ca <I2C_MasterHandleRXNEInterrupt+0x46>
			I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff feab 	bl	8001120 <I2C_ManageAcking>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
}
 80013ec:	e014      	b.n	8001418 <I2C_MasterHandleRXNEInterrupt+0x94>
	} else if (pI2CHandle->RxSize == 0){
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d110      	bne.n	8001418 <I2C_MasterHandleRXNEInterrupt+0x94>
		if(pI2CHandle->sr == I2C_DISABLE_RS)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d104      	bne.n	800140a <I2C_MasterHandleRXNEInterrupt+0x86>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff feb7 	bl	8001178 <I2C_GenerateStopCondition>
		I2C_CloseReceiveData(pI2CHandle);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa02 	bl	8001814 <I2C_CloseReceiveData>
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001410:	2101      	movs	r1, #1
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff f898 	bl	8000548 <I2C_ApplicationEventCallback>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <I2C_EV_IRQHandling>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001432:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	613b      	str	r3, [r7, #16]

	// Handle for interrupt generate by SB event
	// Note: SB flag is only applicable in Master mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01b      	beq.n	800148a <I2C_EV_IRQHandling+0x6a>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d018      	beq.n	800148a <I2C_EV_IRQHandling+0x6a>
		// SB flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d108      	bne.n	8001472 <I2C_EV_IRQHandling+0x52>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, READ);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7f5b      	ldrb	r3, [r3, #29]
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fc90 	bl	8000d90 <I2C_ExecuteAddressPhase>
 8001470:	e00b      	b.n	800148a <I2C_EV_IRQHandling+0x6a>
		} else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7f1b      	ldrb	r3, [r3, #28]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d107      	bne.n	800148a <I2C_EV_IRQHandling+0x6a>
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, WRITE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f5b      	ldrb	r3, [r3, #29]
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fc83 	bl	8000d90 <I2C_ExecuteAddressPhase>
	}

	// Handle for interrupt generated by ADDR event
	// Note: When master mode, address is sent
	// 		 When slave mode, address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <I2C_EV_IRQHandling+0x88>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <I2C_EV_IRQHandling+0x88>
		// ADDR flag is set
		I2C_ClearADDRFlag(pI2CHandle);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fc95 	bl	8000dd2 <I2C_ClearADDRFlag>
	}

	// Handle for interrupt gernerated by BTF (Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d026      	beq.n	8001508 <I2C_EV_IRQHandling+0xe8>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d023      	beq.n	8001508 <I2C_EV_IRQHandling+0xe8>
		// BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7f1b      	ldrb	r3, [r3, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01f      	beq.n	8001508 <I2C_EV_IRQHandling+0xe8>

		} else if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7f1b      	ldrb	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d11b      	bne.n	8001508 <I2C_EV_IRQHandling+0xe8>
			// Check if TX is empty, meaning that the transmission is over
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE)){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d014      	beq.n	8001508 <I2C_EV_IRQHandling+0xe8>
				// BTF & TXE = 1
				if(pI2CHandle->TxLen == 0){
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d110      	bne.n	8001508 <I2C_EV_IRQHandling+0xe8>
					// Generate the stop condition
					if(pI2CHandle->sr == I2C_DISABLE_RS)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d104      	bne.n	80014fa <I2C_EV_IRQHandling+0xda>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe3f 	bl	8001178 <I2C_GenerateStopCondition>

					// Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f967 	bl	80017ce <I2C_CloseSendData>

					// Notify the application the transmission has been complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f820 	bl	8000548 <I2C_ApplicationEventCallback>
		}
	}

	// Handle for interrupt generated by STOPF event
	// Note: Stop detection flag is applicable only in slave mode.
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3){
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <I2C_EV_IRQHandling+0x114>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <I2C_EV_IRQHandling+0x114>
		// STOF flag is set
		// Clear the STOPF by reading SR1 then writing to CR1
		pI2CHandle->pI2Cx-> CR1 |= 0x0000;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	601a      	str	r2, [r3, #0]

		// Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 800152c:	2102      	movs	r1, #2
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff f80a 	bl	8000548 <I2C_ApplicationEventCallback>
	}

	// Handle for interrupt generated by TXE event
	// Note: This interrupt will only go off if both ITEVTEN and ITBUFEN are set
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp2 && temp3){
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d013      	beq.n	800156e <I2C_EV_IRQHandling+0x14e>
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d010      	beq.n	800156e <I2C_EV_IRQHandling+0x14e>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00d      	beq.n	800156e <I2C_EV_IRQHandling+0x14e>
		// TXE flag is set
		// Check for device mode to confirm that it is in master mode
		if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR2_MSL) ){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <I2C_EV_IRQHandling+0x14e>
			// Data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <I2C_EV_IRQHandling+0x14e>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff feed 	bl	8001348 <I2C_MasterHandleTXEInterrupt>
		}
	}

	// Handle for interrupt generated by RXNE event
	// Note: This interrupt will only go off if both ITEVTEN and ITBUFEN are set
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001578:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp2 && temp3){
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <I2C_EV_IRQHandling+0x188>
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d010      	beq.n	80015a8 <I2C_EV_IRQHandling+0x188>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00d      	beq.n	80015a8 <I2C_EV_IRQHandling+0x188>
		// Check device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <I2C_EV_IRQHandling+0x188>
			// RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7f1b      	ldrb	r3, [r3, #28]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d102      	bne.n	80015a8 <I2C_EV_IRQHandling+0x188>
				// Currently receiving
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff feee 	bl	8001384 <I2C_MasterHandleRXNEInterrupt>
			}
		}
	}
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <I2C_ER_IRQHandling>:
 * @return		- none
 *
 * @Note		- none
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00e      	beq.n	80015f4 <I2C_ER_IRQHandling+0x44>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <I2C_ER_IRQHandling+0x44>
	{
		// This is Bus error

		// Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ea:	615a      	str	r2, [r3, #20]

		// Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 80015ec:	2103      	movs	r1, #3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe ffaa 	bl	8000548 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fe:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00e      	beq.n	8001624 <I2C_ER_IRQHandling+0x74>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <I2C_ER_IRQHandling+0x74>
	{
		// This is arbitration lost error

		// Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800161a:	615a      	str	r2, [r3, #20]

		// Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 800161c:	2104      	movs	r1, #4
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe ff92 	bl	8000548 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00e      	beq.n	8001654 <I2C_ER_IRQHandling+0xa4>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <I2C_ER_IRQHandling+0xa4>
	{
		// This is ACK failure error

	    // Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164a:	615a      	str	r2, [r3, #20]
		// Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 800164c:	2105      	movs	r1, #5
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff7a 	bl	8000548 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00e      	beq.n	8001684 <I2C_ER_IRQHandling+0xd4>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <I2C_ER_IRQHandling+0xd4>
	{
		// This is Overrun/underrun

	    // Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167a:	615a      	str	r2, [r3, #20]
		// Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800167c:	2106      	movs	r1, #6
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIME_OUT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <I2C_ER_IRQHandling+0x104>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <I2C_ER_IRQHandling+0x104>
	{
		// This is Time out error

	    // Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIME_OUT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016aa:	615a      	str	r2, [r3, #20]
		// Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80016ac:	2107      	movs	r1, #7
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe ff4a 	bl	8000548 <I2C_ApplicationEventCallback>
	}

}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <I2C_MasterSendDataIT>:
 * @return		- Status
 *
 * @Note		- none
 */
uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	7f1b      	ldrb	r3, [r3, #28]
 80016ce:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 80016d0:	7dfb      	ldrb	r3, [r7, #23]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d030      	beq.n	8001738 <I2C_MasterSendDataIT+0x7c>
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d02d      	beq.n	8001738 <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = len;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = slaveAddr;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	775a      	strb	r2, [r3, #29]
		pI2CHandle->sr = sr;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd28 	bl	8001158 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001716:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001726:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001736:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8001738:	7dfb      	ldrb	r3, [r7, #23]

}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <I2C_MasterReceiveDataIT>:
 *
 * @return		- Status
 *
 * @Note		- none
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr){
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	7f1b      	ldrb	r3, [r3, #28]
 8001754:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d033      	beq.n	80017c4 <I2C_MasterReceiveDataIT+0x82>
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d030      	beq.n	80017c4 <I2C_MasterReceiveDataIT+0x82>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = len;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2202      	movs	r2, #2
 8001772:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = len; //Rxsize is used in the ISR code to manage the data reception
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = slaveAddr;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	775a      	strb	r2, [r3, #29]
		pI2CHandle->sr = sr;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fce2 	bl	8001158 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a2:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017c2:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <I2C_CloseSendData>:
 *
 * @return		- Status
 *
 * @Note		- none
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){\
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	// Disable I2BUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	605a      	str	r2, [r3, #4]

	// Disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f4:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
	pI2CHandle->TxLen = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <I2C_CloseReceiveData>:
 *
 * @return		- Status
 *
 * @Note		- none
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	// Disable I2BUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182a:	605a      	str	r2, [r3, #4]

	// Disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800183a:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
	if(pI2CHandle->I2C_Config.AckControl == I2C_ACK_ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7a5b      	ldrb	r3, [r3, #9]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fc5c 	bl	8001120 <I2C_ManageAcking>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <__errno>:
 8001870:	4b01      	ldr	r3, [pc, #4]	; (8001878 <__errno+0x8>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000018 	.word	0x20000018

0800187c <__libc_init_array>:
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	4d0d      	ldr	r5, [pc, #52]	; (80018b4 <__libc_init_array+0x38>)
 8001880:	4c0d      	ldr	r4, [pc, #52]	; (80018b8 <__libc_init_array+0x3c>)
 8001882:	1b64      	subs	r4, r4, r5
 8001884:	10a4      	asrs	r4, r4, #2
 8001886:	2600      	movs	r6, #0
 8001888:	42a6      	cmp	r6, r4
 800188a:	d109      	bne.n	80018a0 <__libc_init_array+0x24>
 800188c:	4d0b      	ldr	r5, [pc, #44]	; (80018bc <__libc_init_array+0x40>)
 800188e:	4c0c      	ldr	r4, [pc, #48]	; (80018c0 <__libc_init_array+0x44>)
 8001890:	f001 fad6 	bl	8002e40 <_init>
 8001894:	1b64      	subs	r4, r4, r5
 8001896:	10a4      	asrs	r4, r4, #2
 8001898:	2600      	movs	r6, #0
 800189a:	42a6      	cmp	r6, r4
 800189c:	d105      	bne.n	80018aa <__libc_init_array+0x2e>
 800189e:	bd70      	pop	{r4, r5, r6, pc}
 80018a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a4:	4798      	blx	r3
 80018a6:	3601      	adds	r6, #1
 80018a8:	e7ee      	b.n	8001888 <__libc_init_array+0xc>
 80018aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ae:	4798      	blx	r3
 80018b0:	3601      	adds	r6, #1
 80018b2:	e7f2      	b.n	800189a <__libc_init_array+0x1e>
 80018b4:	08002fd0 	.word	0x08002fd0
 80018b8:	08002fd0 	.word	0x08002fd0
 80018bc:	08002fd0 	.word	0x08002fd0
 80018c0:	08002fd4 	.word	0x08002fd4

080018c4 <malloc>:
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <malloc+0xc>)
 80018c6:	4601      	mov	r1, r0
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f000 b87f 	b.w	80019cc <_malloc_r>
 80018ce:	bf00      	nop
 80018d0:	20000018 	.word	0x20000018

080018d4 <free>:
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <free+0xc>)
 80018d6:	4601      	mov	r1, r0
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f000 b80b 	b.w	80018f4 <_free_r>
 80018de:	bf00      	nop
 80018e0:	20000018 	.word	0x20000018

080018e4 <memset>:
 80018e4:	4402      	add	r2, r0
 80018e6:	4603      	mov	r3, r0
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d100      	bne.n	80018ee <memset+0xa>
 80018ec:	4770      	bx	lr
 80018ee:	f803 1b01 	strb.w	r1, [r3], #1
 80018f2:	e7f9      	b.n	80018e8 <memset+0x4>

080018f4 <_free_r>:
 80018f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018f6:	2900      	cmp	r1, #0
 80018f8:	d044      	beq.n	8001984 <_free_r+0x90>
 80018fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018fe:	9001      	str	r0, [sp, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f1a1 0404 	sub.w	r4, r1, #4
 8001906:	bfb8      	it	lt
 8001908:	18e4      	addlt	r4, r4, r3
 800190a:	f000 fc51 	bl	80021b0 <__malloc_lock>
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <_free_r+0x94>)
 8001910:	9801      	ldr	r0, [sp, #4]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	b933      	cbnz	r3, 8001924 <_free_r+0x30>
 8001916:	6063      	str	r3, [r4, #4]
 8001918:	6014      	str	r4, [r2, #0]
 800191a:	b003      	add	sp, #12
 800191c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001920:	f000 bc4c 	b.w	80021bc <__malloc_unlock>
 8001924:	42a3      	cmp	r3, r4
 8001926:	d908      	bls.n	800193a <_free_r+0x46>
 8001928:	6825      	ldr	r5, [r4, #0]
 800192a:	1961      	adds	r1, r4, r5
 800192c:	428b      	cmp	r3, r1
 800192e:	bf01      	itttt	eq
 8001930:	6819      	ldreq	r1, [r3, #0]
 8001932:	685b      	ldreq	r3, [r3, #4]
 8001934:	1949      	addeq	r1, r1, r5
 8001936:	6021      	streq	r1, [r4, #0]
 8001938:	e7ed      	b.n	8001916 <_free_r+0x22>
 800193a:	461a      	mov	r2, r3
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	b10b      	cbz	r3, 8001944 <_free_r+0x50>
 8001940:	42a3      	cmp	r3, r4
 8001942:	d9fa      	bls.n	800193a <_free_r+0x46>
 8001944:	6811      	ldr	r1, [r2, #0]
 8001946:	1855      	adds	r5, r2, r1
 8001948:	42a5      	cmp	r5, r4
 800194a:	d10b      	bne.n	8001964 <_free_r+0x70>
 800194c:	6824      	ldr	r4, [r4, #0]
 800194e:	4421      	add	r1, r4
 8001950:	1854      	adds	r4, r2, r1
 8001952:	42a3      	cmp	r3, r4
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	d1e0      	bne.n	800191a <_free_r+0x26>
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	4421      	add	r1, r4
 8001960:	6011      	str	r1, [r2, #0]
 8001962:	e7da      	b.n	800191a <_free_r+0x26>
 8001964:	d902      	bls.n	800196c <_free_r+0x78>
 8001966:	230c      	movs	r3, #12
 8001968:	6003      	str	r3, [r0, #0]
 800196a:	e7d6      	b.n	800191a <_free_r+0x26>
 800196c:	6825      	ldr	r5, [r4, #0]
 800196e:	1961      	adds	r1, r4, r5
 8001970:	428b      	cmp	r3, r1
 8001972:	bf04      	itt	eq
 8001974:	6819      	ldreq	r1, [r3, #0]
 8001976:	685b      	ldreq	r3, [r3, #4]
 8001978:	6063      	str	r3, [r4, #4]
 800197a:	bf04      	itt	eq
 800197c:	1949      	addeq	r1, r1, r5
 800197e:	6021      	streq	r1, [r4, #0]
 8001980:	6054      	str	r4, [r2, #4]
 8001982:	e7ca      	b.n	800191a <_free_r+0x26>
 8001984:	b003      	add	sp, #12
 8001986:	bd30      	pop	{r4, r5, pc}
 8001988:	200000cc 	.word	0x200000cc

0800198c <sbrk_aligned>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	4e0e      	ldr	r6, [pc, #56]	; (80019c8 <sbrk_aligned+0x3c>)
 8001990:	460c      	mov	r4, r1
 8001992:	6831      	ldr	r1, [r6, #0]
 8001994:	4605      	mov	r5, r0
 8001996:	b911      	cbnz	r1, 800199e <sbrk_aligned+0x12>
 8001998:	f000 f91a 	bl	8001bd0 <_sbrk_r>
 800199c:	6030      	str	r0, [r6, #0]
 800199e:	4621      	mov	r1, r4
 80019a0:	4628      	mov	r0, r5
 80019a2:	f000 f915 	bl	8001bd0 <_sbrk_r>
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	d00a      	beq.n	80019c0 <sbrk_aligned+0x34>
 80019aa:	1cc4      	adds	r4, r0, #3
 80019ac:	f024 0403 	bic.w	r4, r4, #3
 80019b0:	42a0      	cmp	r0, r4
 80019b2:	d007      	beq.n	80019c4 <sbrk_aligned+0x38>
 80019b4:	1a21      	subs	r1, r4, r0
 80019b6:	4628      	mov	r0, r5
 80019b8:	f000 f90a 	bl	8001bd0 <_sbrk_r>
 80019bc:	3001      	adds	r0, #1
 80019be:	d101      	bne.n	80019c4 <sbrk_aligned+0x38>
 80019c0:	f04f 34ff 	mov.w	r4, #4294967295
 80019c4:	4620      	mov	r0, r4
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	200000d0 	.word	0x200000d0

080019cc <_malloc_r>:
 80019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d0:	1ccd      	adds	r5, r1, #3
 80019d2:	f025 0503 	bic.w	r5, r5, #3
 80019d6:	3508      	adds	r5, #8
 80019d8:	2d0c      	cmp	r5, #12
 80019da:	bf38      	it	cc
 80019dc:	250c      	movcc	r5, #12
 80019de:	2d00      	cmp	r5, #0
 80019e0:	4607      	mov	r7, r0
 80019e2:	db01      	blt.n	80019e8 <_malloc_r+0x1c>
 80019e4:	42a9      	cmp	r1, r5
 80019e6:	d905      	bls.n	80019f4 <_malloc_r+0x28>
 80019e8:	230c      	movs	r3, #12
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	2600      	movs	r6, #0
 80019ee:	4630      	mov	r0, r6
 80019f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f4:	4e2e      	ldr	r6, [pc, #184]	; (8001ab0 <_malloc_r+0xe4>)
 80019f6:	f000 fbdb 	bl	80021b0 <__malloc_lock>
 80019fa:	6833      	ldr	r3, [r6, #0]
 80019fc:	461c      	mov	r4, r3
 80019fe:	bb34      	cbnz	r4, 8001a4e <_malloc_r+0x82>
 8001a00:	4629      	mov	r1, r5
 8001a02:	4638      	mov	r0, r7
 8001a04:	f7ff ffc2 	bl	800198c <sbrk_aligned>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	d14d      	bne.n	8001aaa <_malloc_r+0xde>
 8001a0e:	6834      	ldr	r4, [r6, #0]
 8001a10:	4626      	mov	r6, r4
 8001a12:	2e00      	cmp	r6, #0
 8001a14:	d140      	bne.n	8001a98 <_malloc_r+0xcc>
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	eb04 0803 	add.w	r8, r4, r3
 8001a20:	f000 f8d6 	bl	8001bd0 <_sbrk_r>
 8001a24:	4580      	cmp	r8, r0
 8001a26:	d13a      	bne.n	8001a9e <_malloc_r+0xd2>
 8001a28:	6821      	ldr	r1, [r4, #0]
 8001a2a:	3503      	adds	r5, #3
 8001a2c:	1a6d      	subs	r5, r5, r1
 8001a2e:	f025 0503 	bic.w	r5, r5, #3
 8001a32:	3508      	adds	r5, #8
 8001a34:	2d0c      	cmp	r5, #12
 8001a36:	bf38      	it	cc
 8001a38:	250c      	movcc	r5, #12
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	f7ff ffa5 	bl	800198c <sbrk_aligned>
 8001a42:	3001      	adds	r0, #1
 8001a44:	d02b      	beq.n	8001a9e <_malloc_r+0xd2>
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	442b      	add	r3, r5
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	e00e      	b.n	8001a6c <_malloc_r+0xa0>
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	1b52      	subs	r2, r2, r5
 8001a52:	d41e      	bmi.n	8001a92 <_malloc_r+0xc6>
 8001a54:	2a0b      	cmp	r2, #11
 8001a56:	d916      	bls.n	8001a86 <_malloc_r+0xba>
 8001a58:	1961      	adds	r1, r4, r5
 8001a5a:	42a3      	cmp	r3, r4
 8001a5c:	6025      	str	r5, [r4, #0]
 8001a5e:	bf18      	it	ne
 8001a60:	6059      	strne	r1, [r3, #4]
 8001a62:	6863      	ldr	r3, [r4, #4]
 8001a64:	bf08      	it	eq
 8001a66:	6031      	streq	r1, [r6, #0]
 8001a68:	5162      	str	r2, [r4, r5]
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	4638      	mov	r0, r7
 8001a6e:	f104 060b 	add.w	r6, r4, #11
 8001a72:	f000 fba3 	bl	80021bc <__malloc_unlock>
 8001a76:	f026 0607 	bic.w	r6, r6, #7
 8001a7a:	1d23      	adds	r3, r4, #4
 8001a7c:	1af2      	subs	r2, r6, r3
 8001a7e:	d0b6      	beq.n	80019ee <_malloc_r+0x22>
 8001a80:	1b9b      	subs	r3, r3, r6
 8001a82:	50a3      	str	r3, [r4, r2]
 8001a84:	e7b3      	b.n	80019ee <_malloc_r+0x22>
 8001a86:	6862      	ldr	r2, [r4, #4]
 8001a88:	42a3      	cmp	r3, r4
 8001a8a:	bf0c      	ite	eq
 8001a8c:	6032      	streq	r2, [r6, #0]
 8001a8e:	605a      	strne	r2, [r3, #4]
 8001a90:	e7ec      	b.n	8001a6c <_malloc_r+0xa0>
 8001a92:	4623      	mov	r3, r4
 8001a94:	6864      	ldr	r4, [r4, #4]
 8001a96:	e7b2      	b.n	80019fe <_malloc_r+0x32>
 8001a98:	4634      	mov	r4, r6
 8001a9a:	6876      	ldr	r6, [r6, #4]
 8001a9c:	e7b9      	b.n	8001a12 <_malloc_r+0x46>
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	f000 fb8a 	bl	80021bc <__malloc_unlock>
 8001aa8:	e7a1      	b.n	80019ee <_malloc_r+0x22>
 8001aaa:	6025      	str	r5, [r4, #0]
 8001aac:	e7de      	b.n	8001a6c <_malloc_r+0xa0>
 8001aae:	bf00      	nop
 8001ab0:	200000cc 	.word	0x200000cc

08001ab4 <iprintf>:
 8001ab4:	b40f      	push	{r0, r1, r2, r3}
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <iprintf+0x2c>)
 8001ab8:	b513      	push	{r0, r1, r4, lr}
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	b124      	cbz	r4, 8001ac8 <iprintf+0x14>
 8001abe:	69a3      	ldr	r3, [r4, #24]
 8001ac0:	b913      	cbnz	r3, 8001ac8 <iprintf+0x14>
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f000 fa6e 	bl	8001fa4 <__sinit>
 8001ac8:	ab05      	add	r3, sp, #20
 8001aca:	9a04      	ldr	r2, [sp, #16]
 8001acc:	68a1      	ldr	r1, [r4, #8]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f000 fba3 	bl	800221c <_vfiprintf_r>
 8001ad6:	b002      	add	sp, #8
 8001ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001adc:	b004      	add	sp, #16
 8001ade:	4770      	bx	lr
 8001ae0:	20000018 	.word	0x20000018

08001ae4 <_puts_r>:
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	460e      	mov	r6, r1
 8001ae8:	4605      	mov	r5, r0
 8001aea:	b118      	cbz	r0, 8001af4 <_puts_r+0x10>
 8001aec:	6983      	ldr	r3, [r0, #24]
 8001aee:	b90b      	cbnz	r3, 8001af4 <_puts_r+0x10>
 8001af0:	f000 fa58 	bl	8001fa4 <__sinit>
 8001af4:	69ab      	ldr	r3, [r5, #24]
 8001af6:	68ac      	ldr	r4, [r5, #8]
 8001af8:	b913      	cbnz	r3, 8001b00 <_puts_r+0x1c>
 8001afa:	4628      	mov	r0, r5
 8001afc:	f000 fa52 	bl	8001fa4 <__sinit>
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <_puts_r+0xd0>)
 8001b02:	429c      	cmp	r4, r3
 8001b04:	d120      	bne.n	8001b48 <_puts_r+0x64>
 8001b06:	686c      	ldr	r4, [r5, #4]
 8001b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b0a:	07db      	lsls	r3, r3, #31
 8001b0c:	d405      	bmi.n	8001b1a <_puts_r+0x36>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	0598      	lsls	r0, r3, #22
 8001b12:	d402      	bmi.n	8001b1a <_puts_r+0x36>
 8001b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b16:	f000 fae3 	bl	80020e0 <__retarget_lock_acquire_recursive>
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	0719      	lsls	r1, r3, #28
 8001b1e:	d51d      	bpl.n	8001b5c <_puts_r+0x78>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	b1db      	cbz	r3, 8001b5c <_puts_r+0x78>
 8001b24:	3e01      	subs	r6, #1
 8001b26:	68a3      	ldr	r3, [r4, #8]
 8001b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60a3      	str	r3, [r4, #8]
 8001b30:	bb39      	cbnz	r1, 8001b82 <_puts_r+0x9e>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da38      	bge.n	8001ba8 <_puts_r+0xc4>
 8001b36:	4622      	mov	r2, r4
 8001b38:	210a      	movs	r1, #10
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f000 f858 	bl	8001bf0 <__swbuf_r>
 8001b40:	3001      	adds	r0, #1
 8001b42:	d011      	beq.n	8001b68 <_puts_r+0x84>
 8001b44:	250a      	movs	r5, #10
 8001b46:	e011      	b.n	8001b6c <_puts_r+0x88>
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <_puts_r+0xd4>)
 8001b4a:	429c      	cmp	r4, r3
 8001b4c:	d101      	bne.n	8001b52 <_puts_r+0x6e>
 8001b4e:	68ac      	ldr	r4, [r5, #8]
 8001b50:	e7da      	b.n	8001b08 <_puts_r+0x24>
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <_puts_r+0xd8>)
 8001b54:	429c      	cmp	r4, r3
 8001b56:	bf08      	it	eq
 8001b58:	68ec      	ldreq	r4, [r5, #12]
 8001b5a:	e7d5      	b.n	8001b08 <_puts_r+0x24>
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f000 f898 	bl	8001c94 <__swsetup_r>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d0dd      	beq.n	8001b24 <_puts_r+0x40>
 8001b68:	f04f 35ff 	mov.w	r5, #4294967295
 8001b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b6e:	07da      	lsls	r2, r3, #31
 8001b70:	d405      	bmi.n	8001b7e <_puts_r+0x9a>
 8001b72:	89a3      	ldrh	r3, [r4, #12]
 8001b74:	059b      	lsls	r3, r3, #22
 8001b76:	d402      	bmi.n	8001b7e <_puts_r+0x9a>
 8001b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7a:	f000 fab2 	bl	80020e2 <__retarget_lock_release_recursive>
 8001b7e:	4628      	mov	r0, r5
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da04      	bge.n	8001b90 <_puts_r+0xac>
 8001b86:	69a2      	ldr	r2, [r4, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dc06      	bgt.n	8001b9a <_puts_r+0xb6>
 8001b8c:	290a      	cmp	r1, #10
 8001b8e:	d004      	beq.n	8001b9a <_puts_r+0xb6>
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	6022      	str	r2, [r4, #0]
 8001b96:	7019      	strb	r1, [r3, #0]
 8001b98:	e7c5      	b.n	8001b26 <_puts_r+0x42>
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f000 f827 	bl	8001bf0 <__swbuf_r>
 8001ba2:	3001      	adds	r0, #1
 8001ba4:	d1bf      	bne.n	8001b26 <_puts_r+0x42>
 8001ba6:	e7df      	b.n	8001b68 <_puts_r+0x84>
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	250a      	movs	r5, #10
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	6022      	str	r2, [r4, #0]
 8001bb0:	701d      	strb	r5, [r3, #0]
 8001bb2:	e7db      	b.n	8001b6c <_puts_r+0x88>
 8001bb4:	08002f40 	.word	0x08002f40
 8001bb8:	08002f60 	.word	0x08002f60
 8001bbc:	08002f20 	.word	0x08002f20

08001bc0 <puts>:
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <puts+0xc>)
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f7ff bf8d 	b.w	8001ae4 <_puts_r>
 8001bca:	bf00      	nop
 8001bcc:	20000018 	.word	0x20000018

08001bd0 <_sbrk_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	4d06      	ldr	r5, [pc, #24]	; (8001bec <_sbrk_r+0x1c>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	602b      	str	r3, [r5, #0]
 8001bdc:	f7fe fd0e 	bl	80005fc <_sbrk>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_sbrk_r+0x1a>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_sbrk_r+0x1a>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	200000d8 	.word	0x200000d8

08001bf0 <__swbuf_r>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	460e      	mov	r6, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	4605      	mov	r5, r0
 8001bf8:	b118      	cbz	r0, 8001c02 <__swbuf_r+0x12>
 8001bfa:	6983      	ldr	r3, [r0, #24]
 8001bfc:	b90b      	cbnz	r3, 8001c02 <__swbuf_r+0x12>
 8001bfe:	f000 f9d1 	bl	8001fa4 <__sinit>
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <__swbuf_r+0x98>)
 8001c04:	429c      	cmp	r4, r3
 8001c06:	d12b      	bne.n	8001c60 <__swbuf_r+0x70>
 8001c08:	686c      	ldr	r4, [r5, #4]
 8001c0a:	69a3      	ldr	r3, [r4, #24]
 8001c0c:	60a3      	str	r3, [r4, #8]
 8001c0e:	89a3      	ldrh	r3, [r4, #12]
 8001c10:	071a      	lsls	r2, r3, #28
 8001c12:	d52f      	bpl.n	8001c74 <__swbuf_r+0x84>
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	b36b      	cbz	r3, 8001c74 <__swbuf_r+0x84>
 8001c18:	6923      	ldr	r3, [r4, #16]
 8001c1a:	6820      	ldr	r0, [r4, #0]
 8001c1c:	1ac0      	subs	r0, r0, r3
 8001c1e:	6963      	ldr	r3, [r4, #20]
 8001c20:	b2f6      	uxtb	r6, r6
 8001c22:	4283      	cmp	r3, r0
 8001c24:	4637      	mov	r7, r6
 8001c26:	dc04      	bgt.n	8001c32 <__swbuf_r+0x42>
 8001c28:	4621      	mov	r1, r4
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f000 f926 	bl	8001e7c <_fflush_r>
 8001c30:	bb30      	cbnz	r0, 8001c80 <__swbuf_r+0x90>
 8001c32:	68a3      	ldr	r3, [r4, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60a3      	str	r3, [r4, #8]
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	6022      	str	r2, [r4, #0]
 8001c3e:	701e      	strb	r6, [r3, #0]
 8001c40:	6963      	ldr	r3, [r4, #20]
 8001c42:	3001      	adds	r0, #1
 8001c44:	4283      	cmp	r3, r0
 8001c46:	d004      	beq.n	8001c52 <__swbuf_r+0x62>
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	07db      	lsls	r3, r3, #31
 8001c4c:	d506      	bpl.n	8001c5c <__swbuf_r+0x6c>
 8001c4e:	2e0a      	cmp	r6, #10
 8001c50:	d104      	bne.n	8001c5c <__swbuf_r+0x6c>
 8001c52:	4621      	mov	r1, r4
 8001c54:	4628      	mov	r0, r5
 8001c56:	f000 f911 	bl	8001e7c <_fflush_r>
 8001c5a:	b988      	cbnz	r0, 8001c80 <__swbuf_r+0x90>
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <__swbuf_r+0x9c>)
 8001c62:	429c      	cmp	r4, r3
 8001c64:	d101      	bne.n	8001c6a <__swbuf_r+0x7a>
 8001c66:	68ac      	ldr	r4, [r5, #8]
 8001c68:	e7cf      	b.n	8001c0a <__swbuf_r+0x1a>
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <__swbuf_r+0xa0>)
 8001c6c:	429c      	cmp	r4, r3
 8001c6e:	bf08      	it	eq
 8001c70:	68ec      	ldreq	r4, [r5, #12]
 8001c72:	e7ca      	b.n	8001c0a <__swbuf_r+0x1a>
 8001c74:	4621      	mov	r1, r4
 8001c76:	4628      	mov	r0, r5
 8001c78:	f000 f80c 	bl	8001c94 <__swsetup_r>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d0cb      	beq.n	8001c18 <__swbuf_r+0x28>
 8001c80:	f04f 37ff 	mov.w	r7, #4294967295
 8001c84:	e7ea      	b.n	8001c5c <__swbuf_r+0x6c>
 8001c86:	bf00      	nop
 8001c88:	08002f40 	.word	0x08002f40
 8001c8c:	08002f60 	.word	0x08002f60
 8001c90:	08002f20 	.word	0x08002f20

08001c94 <__swsetup_r>:
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <__swsetup_r+0xcc>)
 8001c96:	b570      	push	{r4, r5, r6, lr}
 8001c98:	681d      	ldr	r5, [r3, #0]
 8001c9a:	4606      	mov	r6, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	b125      	cbz	r5, 8001caa <__swsetup_r+0x16>
 8001ca0:	69ab      	ldr	r3, [r5, #24]
 8001ca2:	b913      	cbnz	r3, 8001caa <__swsetup_r+0x16>
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 f97d 	bl	8001fa4 <__sinit>
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <__swsetup_r+0xd0>)
 8001cac:	429c      	cmp	r4, r3
 8001cae:	d10f      	bne.n	8001cd0 <__swsetup_r+0x3c>
 8001cb0:	686c      	ldr	r4, [r5, #4]
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cb8:	0719      	lsls	r1, r3, #28
 8001cba:	d42c      	bmi.n	8001d16 <__swsetup_r+0x82>
 8001cbc:	06dd      	lsls	r5, r3, #27
 8001cbe:	d411      	bmi.n	8001ce4 <__swsetup_r+0x50>
 8001cc0:	2309      	movs	r3, #9
 8001cc2:	6033      	str	r3, [r6, #0]
 8001cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001cc8:	81a3      	strh	r3, [r4, #12]
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	e03e      	b.n	8001d4e <__swsetup_r+0xba>
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <__swsetup_r+0xd4>)
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	d101      	bne.n	8001cda <__swsetup_r+0x46>
 8001cd6:	68ac      	ldr	r4, [r5, #8]
 8001cd8:	e7eb      	b.n	8001cb2 <__swsetup_r+0x1e>
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <__swsetup_r+0xd8>)
 8001cdc:	429c      	cmp	r4, r3
 8001cde:	bf08      	it	eq
 8001ce0:	68ec      	ldreq	r4, [r5, #12]
 8001ce2:	e7e6      	b.n	8001cb2 <__swsetup_r+0x1e>
 8001ce4:	0758      	lsls	r0, r3, #29
 8001ce6:	d512      	bpl.n	8001d0e <__swsetup_r+0x7a>
 8001ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cea:	b141      	cbz	r1, 8001cfe <__swsetup_r+0x6a>
 8001cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cf0:	4299      	cmp	r1, r3
 8001cf2:	d002      	beq.n	8001cfa <__swsetup_r+0x66>
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f7ff fdfd 	bl	80018f4 <_free_r>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8001cfe:	89a3      	ldrh	r3, [r4, #12]
 8001d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d04:	81a3      	strh	r3, [r4, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	6063      	str	r3, [r4, #4]
 8001d0a:	6923      	ldr	r3, [r4, #16]
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	89a3      	ldrh	r3, [r4, #12]
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	81a3      	strh	r3, [r4, #12]
 8001d16:	6923      	ldr	r3, [r4, #16]
 8001d18:	b94b      	cbnz	r3, 8001d2e <__swsetup_r+0x9a>
 8001d1a:	89a3      	ldrh	r3, [r4, #12]
 8001d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d003      	beq.n	8001d2e <__swsetup_r+0x9a>
 8001d26:	4621      	mov	r1, r4
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f000 fa01 	bl	8002130 <__smakebuf_r>
 8001d2e:	89a0      	ldrh	r0, [r4, #12]
 8001d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d34:	f010 0301 	ands.w	r3, r0, #1
 8001d38:	d00a      	beq.n	8001d50 <__swsetup_r+0xbc>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60a3      	str	r3, [r4, #8]
 8001d3e:	6963      	ldr	r3, [r4, #20]
 8001d40:	425b      	negs	r3, r3
 8001d42:	61a3      	str	r3, [r4, #24]
 8001d44:	6923      	ldr	r3, [r4, #16]
 8001d46:	b943      	cbnz	r3, 8001d5a <__swsetup_r+0xc6>
 8001d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d4c:	d1ba      	bne.n	8001cc4 <__swsetup_r+0x30>
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	0781      	lsls	r1, r0, #30
 8001d52:	bf58      	it	pl
 8001d54:	6963      	ldrpl	r3, [r4, #20]
 8001d56:	60a3      	str	r3, [r4, #8]
 8001d58:	e7f4      	b.n	8001d44 <__swsetup_r+0xb0>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	e7f7      	b.n	8001d4e <__swsetup_r+0xba>
 8001d5e:	bf00      	nop
 8001d60:	20000018 	.word	0x20000018
 8001d64:	08002f40 	.word	0x08002f40
 8001d68:	08002f60 	.word	0x08002f60
 8001d6c:	08002f20 	.word	0x08002f20

08001d70 <__sflush_r>:
 8001d70:	898a      	ldrh	r2, [r1, #12]
 8001d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d76:	4605      	mov	r5, r0
 8001d78:	0710      	lsls	r0, r2, #28
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	d458      	bmi.n	8001e30 <__sflush_r+0xc0>
 8001d7e:	684b      	ldr	r3, [r1, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dc05      	bgt.n	8001d90 <__sflush_r+0x20>
 8001d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dc02      	bgt.n	8001d90 <__sflush_r+0x20>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d92:	2e00      	cmp	r6, #0
 8001d94:	d0f9      	beq.n	8001d8a <__sflush_r+0x1a>
 8001d96:	2300      	movs	r3, #0
 8001d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d9c:	682f      	ldr	r7, [r5, #0]
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	d032      	beq.n	8001e08 <__sflush_r+0x98>
 8001da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	075a      	lsls	r2, r3, #29
 8001da8:	d505      	bpl.n	8001db6 <__sflush_r+0x46>
 8001daa:	6863      	ldr	r3, [r4, #4]
 8001dac:	1ac0      	subs	r0, r0, r3
 8001dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001db0:	b10b      	cbz	r3, 8001db6 <__sflush_r+0x46>
 8001db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001db4:	1ac0      	subs	r0, r0, r3
 8001db6:	2300      	movs	r3, #0
 8001db8:	4602      	mov	r2, r0
 8001dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dbc:	6a21      	ldr	r1, [r4, #32]
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	47b0      	blx	r6
 8001dc2:	1c43      	adds	r3, r0, #1
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	d106      	bne.n	8001dd6 <__sflush_r+0x66>
 8001dc8:	6829      	ldr	r1, [r5, #0]
 8001dca:	291d      	cmp	r1, #29
 8001dcc:	d82c      	bhi.n	8001e28 <__sflush_r+0xb8>
 8001dce:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <__sflush_r+0x108>)
 8001dd0:	40ca      	lsrs	r2, r1
 8001dd2:	07d6      	lsls	r6, r2, #31
 8001dd4:	d528      	bpl.n	8001e28 <__sflush_r+0xb8>
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	6062      	str	r2, [r4, #4]
 8001dda:	04d9      	lsls	r1, r3, #19
 8001ddc:	6922      	ldr	r2, [r4, #16]
 8001dde:	6022      	str	r2, [r4, #0]
 8001de0:	d504      	bpl.n	8001dec <__sflush_r+0x7c>
 8001de2:	1c42      	adds	r2, r0, #1
 8001de4:	d101      	bne.n	8001dea <__sflush_r+0x7a>
 8001de6:	682b      	ldr	r3, [r5, #0]
 8001de8:	b903      	cbnz	r3, 8001dec <__sflush_r+0x7c>
 8001dea:	6560      	str	r0, [r4, #84]	; 0x54
 8001dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dee:	602f      	str	r7, [r5, #0]
 8001df0:	2900      	cmp	r1, #0
 8001df2:	d0ca      	beq.n	8001d8a <__sflush_r+0x1a>
 8001df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001df8:	4299      	cmp	r1, r3
 8001dfa:	d002      	beq.n	8001e02 <__sflush_r+0x92>
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f7ff fd79 	bl	80018f4 <_free_r>
 8001e02:	2000      	movs	r0, #0
 8001e04:	6360      	str	r0, [r4, #52]	; 0x34
 8001e06:	e7c1      	b.n	8001d8c <__sflush_r+0x1c>
 8001e08:	6a21      	ldr	r1, [r4, #32]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	47b0      	blx	r6
 8001e10:	1c41      	adds	r1, r0, #1
 8001e12:	d1c7      	bne.n	8001da4 <__sflush_r+0x34>
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0c4      	beq.n	8001da4 <__sflush_r+0x34>
 8001e1a:	2b1d      	cmp	r3, #29
 8001e1c:	d001      	beq.n	8001e22 <__sflush_r+0xb2>
 8001e1e:	2b16      	cmp	r3, #22
 8001e20:	d101      	bne.n	8001e26 <__sflush_r+0xb6>
 8001e22:	602f      	str	r7, [r5, #0]
 8001e24:	e7b1      	b.n	8001d8a <__sflush_r+0x1a>
 8001e26:	89a3      	ldrh	r3, [r4, #12]
 8001e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2c:	81a3      	strh	r3, [r4, #12]
 8001e2e:	e7ad      	b.n	8001d8c <__sflush_r+0x1c>
 8001e30:	690f      	ldr	r7, [r1, #16]
 8001e32:	2f00      	cmp	r7, #0
 8001e34:	d0a9      	beq.n	8001d8a <__sflush_r+0x1a>
 8001e36:	0793      	lsls	r3, r2, #30
 8001e38:	680e      	ldr	r6, [r1, #0]
 8001e3a:	bf08      	it	eq
 8001e3c:	694b      	ldreq	r3, [r1, #20]
 8001e3e:	600f      	str	r7, [r1, #0]
 8001e40:	bf18      	it	ne
 8001e42:	2300      	movne	r3, #0
 8001e44:	eba6 0807 	sub.w	r8, r6, r7
 8001e48:	608b      	str	r3, [r1, #8]
 8001e4a:	f1b8 0f00 	cmp.w	r8, #0
 8001e4e:	dd9c      	ble.n	8001d8a <__sflush_r+0x1a>
 8001e50:	6a21      	ldr	r1, [r4, #32]
 8001e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e54:	4643      	mov	r3, r8
 8001e56:	463a      	mov	r2, r7
 8001e58:	4628      	mov	r0, r5
 8001e5a:	47b0      	blx	r6
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	dc06      	bgt.n	8001e6e <__sflush_r+0xfe>
 8001e60:	89a3      	ldrh	r3, [r4, #12]
 8001e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e66:	81a3      	strh	r3, [r4, #12]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	e78e      	b.n	8001d8c <__sflush_r+0x1c>
 8001e6e:	4407      	add	r7, r0
 8001e70:	eba8 0800 	sub.w	r8, r8, r0
 8001e74:	e7e9      	b.n	8001e4a <__sflush_r+0xda>
 8001e76:	bf00      	nop
 8001e78:	20400001 	.word	0x20400001

08001e7c <_fflush_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	690b      	ldr	r3, [r1, #16]
 8001e80:	4605      	mov	r5, r0
 8001e82:	460c      	mov	r4, r1
 8001e84:	b913      	cbnz	r3, 8001e8c <_fflush_r+0x10>
 8001e86:	2500      	movs	r5, #0
 8001e88:	4628      	mov	r0, r5
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
 8001e8c:	b118      	cbz	r0, 8001e96 <_fflush_r+0x1a>
 8001e8e:	6983      	ldr	r3, [r0, #24]
 8001e90:	b90b      	cbnz	r3, 8001e96 <_fflush_r+0x1a>
 8001e92:	f000 f887 	bl	8001fa4 <__sinit>
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <_fflush_r+0x6c>)
 8001e98:	429c      	cmp	r4, r3
 8001e9a:	d11b      	bne.n	8001ed4 <_fflush_r+0x58>
 8001e9c:	686c      	ldr	r4, [r5, #4]
 8001e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ef      	beq.n	8001e86 <_fflush_r+0xa>
 8001ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ea8:	07d0      	lsls	r0, r2, #31
 8001eaa:	d404      	bmi.n	8001eb6 <_fflush_r+0x3a>
 8001eac:	0599      	lsls	r1, r3, #22
 8001eae:	d402      	bmi.n	8001eb6 <_fflush_r+0x3a>
 8001eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eb2:	f000 f915 	bl	80020e0 <__retarget_lock_acquire_recursive>
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	4621      	mov	r1, r4
 8001eba:	f7ff ff59 	bl	8001d70 <__sflush_r>
 8001ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ec0:	07da      	lsls	r2, r3, #31
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	d4e0      	bmi.n	8001e88 <_fflush_r+0xc>
 8001ec6:	89a3      	ldrh	r3, [r4, #12]
 8001ec8:	059b      	lsls	r3, r3, #22
 8001eca:	d4dd      	bmi.n	8001e88 <_fflush_r+0xc>
 8001ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ece:	f000 f908 	bl	80020e2 <__retarget_lock_release_recursive>
 8001ed2:	e7d9      	b.n	8001e88 <_fflush_r+0xc>
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <_fflush_r+0x70>)
 8001ed6:	429c      	cmp	r4, r3
 8001ed8:	d101      	bne.n	8001ede <_fflush_r+0x62>
 8001eda:	68ac      	ldr	r4, [r5, #8]
 8001edc:	e7df      	b.n	8001e9e <_fflush_r+0x22>
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <_fflush_r+0x74>)
 8001ee0:	429c      	cmp	r4, r3
 8001ee2:	bf08      	it	eq
 8001ee4:	68ec      	ldreq	r4, [r5, #12]
 8001ee6:	e7da      	b.n	8001e9e <_fflush_r+0x22>
 8001ee8:	08002f40 	.word	0x08002f40
 8001eec:	08002f60 	.word	0x08002f60
 8001ef0:	08002f20 	.word	0x08002f20

08001ef4 <std>:
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	4604      	mov	r4, r0
 8001efa:	e9c0 3300 	strd	r3, r3, [r0]
 8001efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f02:	6083      	str	r3, [r0, #8]
 8001f04:	8181      	strh	r1, [r0, #12]
 8001f06:	6643      	str	r3, [r0, #100]	; 0x64
 8001f08:	81c2      	strh	r2, [r0, #14]
 8001f0a:	6183      	str	r3, [r0, #24]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	2208      	movs	r2, #8
 8001f10:	305c      	adds	r0, #92	; 0x5c
 8001f12:	f7ff fce7 	bl	80018e4 <memset>
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <std+0x38>)
 8001f18:	6263      	str	r3, [r4, #36]	; 0x24
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <std+0x3c>)
 8001f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <std+0x40>)
 8001f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <std+0x44>)
 8001f24:	6224      	str	r4, [r4, #32]
 8001f26:	6323      	str	r3, [r4, #48]	; 0x30
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	080027a5 	.word	0x080027a5
 8001f30:	080027c7 	.word	0x080027c7
 8001f34:	080027ff 	.word	0x080027ff
 8001f38:	08002823 	.word	0x08002823

08001f3c <_cleanup_r>:
 8001f3c:	4901      	ldr	r1, [pc, #4]	; (8001f44 <_cleanup_r+0x8>)
 8001f3e:	f000 b8af 	b.w	80020a0 <_fwalk_reent>
 8001f42:	bf00      	nop
 8001f44:	08001e7d 	.word	0x08001e7d

08001f48 <__sfmoreglue>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	2268      	movs	r2, #104	; 0x68
 8001f4c:	1e4d      	subs	r5, r1, #1
 8001f4e:	4355      	muls	r5, r2
 8001f50:	460e      	mov	r6, r1
 8001f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f56:	f7ff fd39 	bl	80019cc <_malloc_r>
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b140      	cbz	r0, 8001f70 <__sfmoreglue+0x28>
 8001f5e:	2100      	movs	r1, #0
 8001f60:	e9c0 1600 	strd	r1, r6, [r0]
 8001f64:	300c      	adds	r0, #12
 8001f66:	60a0      	str	r0, [r4, #8]
 8001f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f6c:	f7ff fcba 	bl	80018e4 <memset>
 8001f70:	4620      	mov	r0, r4
 8001f72:	bd70      	pop	{r4, r5, r6, pc}

08001f74 <__sfp_lock_acquire>:
 8001f74:	4801      	ldr	r0, [pc, #4]	; (8001f7c <__sfp_lock_acquire+0x8>)
 8001f76:	f000 b8b3 	b.w	80020e0 <__retarget_lock_acquire_recursive>
 8001f7a:	bf00      	nop
 8001f7c:	200000d5 	.word	0x200000d5

08001f80 <__sfp_lock_release>:
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <__sfp_lock_release+0x8>)
 8001f82:	f000 b8ae 	b.w	80020e2 <__retarget_lock_release_recursive>
 8001f86:	bf00      	nop
 8001f88:	200000d5 	.word	0x200000d5

08001f8c <__sinit_lock_acquire>:
 8001f8c:	4801      	ldr	r0, [pc, #4]	; (8001f94 <__sinit_lock_acquire+0x8>)
 8001f8e:	f000 b8a7 	b.w	80020e0 <__retarget_lock_acquire_recursive>
 8001f92:	bf00      	nop
 8001f94:	200000d6 	.word	0x200000d6

08001f98 <__sinit_lock_release>:
 8001f98:	4801      	ldr	r0, [pc, #4]	; (8001fa0 <__sinit_lock_release+0x8>)
 8001f9a:	f000 b8a2 	b.w	80020e2 <__retarget_lock_release_recursive>
 8001f9e:	bf00      	nop
 8001fa0:	200000d6 	.word	0x200000d6

08001fa4 <__sinit>:
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	f7ff fff0 	bl	8001f8c <__sinit_lock_acquire>
 8001fac:	69a3      	ldr	r3, [r4, #24]
 8001fae:	b11b      	cbz	r3, 8001fb8 <__sinit+0x14>
 8001fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb4:	f7ff bff0 	b.w	8001f98 <__sinit_lock_release>
 8001fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <__sinit+0x68>)
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <__sinit+0x6c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001fc6:	42a3      	cmp	r3, r4
 8001fc8:	bf04      	itt	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	61a3      	streq	r3, [r4, #24]
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f000 f820 	bl	8002014 <__sfp>
 8001fd4:	6060      	str	r0, [r4, #4]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f000 f81c 	bl	8002014 <__sfp>
 8001fdc:	60a0      	str	r0, [r4, #8]
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f000 f818 	bl	8002014 <__sfp>
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60e0      	str	r0, [r4, #12]
 8001fe8:	2104      	movs	r1, #4
 8001fea:	6860      	ldr	r0, [r4, #4]
 8001fec:	f7ff ff82 	bl	8001ef4 <std>
 8001ff0:	68a0      	ldr	r0, [r4, #8]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2109      	movs	r1, #9
 8001ff6:	f7ff ff7d 	bl	8001ef4 <std>
 8001ffa:	68e0      	ldr	r0, [r4, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	2112      	movs	r1, #18
 8002000:	f7ff ff78 	bl	8001ef4 <std>
 8002004:	2301      	movs	r3, #1
 8002006:	61a3      	str	r3, [r4, #24]
 8002008:	e7d2      	b.n	8001fb0 <__sinit+0xc>
 800200a:	bf00      	nop
 800200c:	08002f1c 	.word	0x08002f1c
 8002010:	08001f3d 	.word	0x08001f3d

08002014 <__sfp>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	4607      	mov	r7, r0
 8002018:	f7ff ffac 	bl	8001f74 <__sfp_lock_acquire>
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <__sfp+0x84>)
 800201e:	681e      	ldr	r6, [r3, #0]
 8002020:	69b3      	ldr	r3, [r6, #24]
 8002022:	b913      	cbnz	r3, 800202a <__sfp+0x16>
 8002024:	4630      	mov	r0, r6
 8002026:	f7ff ffbd 	bl	8001fa4 <__sinit>
 800202a:	3648      	adds	r6, #72	; 0x48
 800202c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002030:	3b01      	subs	r3, #1
 8002032:	d503      	bpl.n	800203c <__sfp+0x28>
 8002034:	6833      	ldr	r3, [r6, #0]
 8002036:	b30b      	cbz	r3, 800207c <__sfp+0x68>
 8002038:	6836      	ldr	r6, [r6, #0]
 800203a:	e7f7      	b.n	800202c <__sfp+0x18>
 800203c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002040:	b9d5      	cbnz	r5, 8002078 <__sfp+0x64>
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <__sfp+0x88>)
 8002044:	60e3      	str	r3, [r4, #12]
 8002046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800204a:	6665      	str	r5, [r4, #100]	; 0x64
 800204c:	f000 f847 	bl	80020de <__retarget_lock_init_recursive>
 8002050:	f7ff ff96 	bl	8001f80 <__sfp_lock_release>
 8002054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800205c:	6025      	str	r5, [r4, #0]
 800205e:	61a5      	str	r5, [r4, #24]
 8002060:	2208      	movs	r2, #8
 8002062:	4629      	mov	r1, r5
 8002064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002068:	f7ff fc3c 	bl	80018e4 <memset>
 800206c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002074:	4620      	mov	r0, r4
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002078:	3468      	adds	r4, #104	; 0x68
 800207a:	e7d9      	b.n	8002030 <__sfp+0x1c>
 800207c:	2104      	movs	r1, #4
 800207e:	4638      	mov	r0, r7
 8002080:	f7ff ff62 	bl	8001f48 <__sfmoreglue>
 8002084:	4604      	mov	r4, r0
 8002086:	6030      	str	r0, [r6, #0]
 8002088:	2800      	cmp	r0, #0
 800208a:	d1d5      	bne.n	8002038 <__sfp+0x24>
 800208c:	f7ff ff78 	bl	8001f80 <__sfp_lock_release>
 8002090:	230c      	movs	r3, #12
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	e7ee      	b.n	8002074 <__sfp+0x60>
 8002096:	bf00      	nop
 8002098:	08002f1c 	.word	0x08002f1c
 800209c:	ffff0001 	.word	0xffff0001

080020a0 <_fwalk_reent>:
 80020a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020a4:	4606      	mov	r6, r0
 80020a6:	4688      	mov	r8, r1
 80020a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020ac:	2700      	movs	r7, #0
 80020ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020b2:	f1b9 0901 	subs.w	r9, r9, #1
 80020b6:	d505      	bpl.n	80020c4 <_fwalk_reent+0x24>
 80020b8:	6824      	ldr	r4, [r4, #0]
 80020ba:	2c00      	cmp	r4, #0
 80020bc:	d1f7      	bne.n	80020ae <_fwalk_reent+0xe>
 80020be:	4638      	mov	r0, r7
 80020c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020c4:	89ab      	ldrh	r3, [r5, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d907      	bls.n	80020da <_fwalk_reent+0x3a>
 80020ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020ce:	3301      	adds	r3, #1
 80020d0:	d003      	beq.n	80020da <_fwalk_reent+0x3a>
 80020d2:	4629      	mov	r1, r5
 80020d4:	4630      	mov	r0, r6
 80020d6:	47c0      	blx	r8
 80020d8:	4307      	orrs	r7, r0
 80020da:	3568      	adds	r5, #104	; 0x68
 80020dc:	e7e9      	b.n	80020b2 <_fwalk_reent+0x12>

080020de <__retarget_lock_init_recursive>:
 80020de:	4770      	bx	lr

080020e0 <__retarget_lock_acquire_recursive>:
 80020e0:	4770      	bx	lr

080020e2 <__retarget_lock_release_recursive>:
 80020e2:	4770      	bx	lr

080020e4 <__swhatbuf_r>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	460e      	mov	r6, r1
 80020e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ec:	2900      	cmp	r1, #0
 80020ee:	b096      	sub	sp, #88	; 0x58
 80020f0:	4614      	mov	r4, r2
 80020f2:	461d      	mov	r5, r3
 80020f4:	da08      	bge.n	8002108 <__swhatbuf_r+0x24>
 80020f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	602a      	str	r2, [r5, #0]
 80020fe:	061a      	lsls	r2, r3, #24
 8002100:	d410      	bmi.n	8002124 <__swhatbuf_r+0x40>
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	e00e      	b.n	8002126 <__swhatbuf_r+0x42>
 8002108:	466a      	mov	r2, sp
 800210a:	f000 fbb1 	bl	8002870 <_fstat_r>
 800210e:	2800      	cmp	r0, #0
 8002110:	dbf1      	blt.n	80020f6 <__swhatbuf_r+0x12>
 8002112:	9a01      	ldr	r2, [sp, #4]
 8002114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800211c:	425a      	negs	r2, r3
 800211e:	415a      	adcs	r2, r3
 8002120:	602a      	str	r2, [r5, #0]
 8002122:	e7ee      	b.n	8002102 <__swhatbuf_r+0x1e>
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	2000      	movs	r0, #0
 8002128:	6023      	str	r3, [r4, #0]
 800212a:	b016      	add	sp, #88	; 0x58
 800212c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002130 <__smakebuf_r>:
 8002130:	898b      	ldrh	r3, [r1, #12]
 8002132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002134:	079d      	lsls	r5, r3, #30
 8002136:	4606      	mov	r6, r0
 8002138:	460c      	mov	r4, r1
 800213a:	d507      	bpl.n	800214c <__smakebuf_r+0x1c>
 800213c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	6123      	str	r3, [r4, #16]
 8002144:	2301      	movs	r3, #1
 8002146:	6163      	str	r3, [r4, #20]
 8002148:	b002      	add	sp, #8
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	ab01      	add	r3, sp, #4
 800214e:	466a      	mov	r2, sp
 8002150:	f7ff ffc8 	bl	80020e4 <__swhatbuf_r>
 8002154:	9900      	ldr	r1, [sp, #0]
 8002156:	4605      	mov	r5, r0
 8002158:	4630      	mov	r0, r6
 800215a:	f7ff fc37 	bl	80019cc <_malloc_r>
 800215e:	b948      	cbnz	r0, 8002174 <__smakebuf_r+0x44>
 8002160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002164:	059a      	lsls	r2, r3, #22
 8002166:	d4ef      	bmi.n	8002148 <__smakebuf_r+0x18>
 8002168:	f023 0303 	bic.w	r3, r3, #3
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	81a3      	strh	r3, [r4, #12]
 8002172:	e7e3      	b.n	800213c <__smakebuf_r+0xc>
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <__smakebuf_r+0x7c>)
 8002176:	62b3      	str	r3, [r6, #40]	; 0x28
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	6020      	str	r0, [r4, #0]
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	81a3      	strh	r3, [r4, #12]
 8002182:	9b00      	ldr	r3, [sp, #0]
 8002184:	6163      	str	r3, [r4, #20]
 8002186:	9b01      	ldr	r3, [sp, #4]
 8002188:	6120      	str	r0, [r4, #16]
 800218a:	b15b      	cbz	r3, 80021a4 <__smakebuf_r+0x74>
 800218c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002190:	4630      	mov	r0, r6
 8002192:	f000 fb7f 	bl	8002894 <_isatty_r>
 8002196:	b128      	cbz	r0, 80021a4 <__smakebuf_r+0x74>
 8002198:	89a3      	ldrh	r3, [r4, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	81a3      	strh	r3, [r4, #12]
 80021a4:	89a0      	ldrh	r0, [r4, #12]
 80021a6:	4305      	orrs	r5, r0
 80021a8:	81a5      	strh	r5, [r4, #12]
 80021aa:	e7cd      	b.n	8002148 <__smakebuf_r+0x18>
 80021ac:	08001f3d 	.word	0x08001f3d

080021b0 <__malloc_lock>:
 80021b0:	4801      	ldr	r0, [pc, #4]	; (80021b8 <__malloc_lock+0x8>)
 80021b2:	f7ff bf95 	b.w	80020e0 <__retarget_lock_acquire_recursive>
 80021b6:	bf00      	nop
 80021b8:	200000d4 	.word	0x200000d4

080021bc <__malloc_unlock>:
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <__malloc_unlock+0x8>)
 80021be:	f7ff bf90 	b.w	80020e2 <__retarget_lock_release_recursive>
 80021c2:	bf00      	nop
 80021c4:	200000d4 	.word	0x200000d4

080021c8 <__sfputc_r>:
 80021c8:	6893      	ldr	r3, [r2, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	b410      	push	{r4}
 80021d0:	6093      	str	r3, [r2, #8]
 80021d2:	da08      	bge.n	80021e6 <__sfputc_r+0x1e>
 80021d4:	6994      	ldr	r4, [r2, #24]
 80021d6:	42a3      	cmp	r3, r4
 80021d8:	db01      	blt.n	80021de <__sfputc_r+0x16>
 80021da:	290a      	cmp	r1, #10
 80021dc:	d103      	bne.n	80021e6 <__sfputc_r+0x1e>
 80021de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021e2:	f7ff bd05 	b.w	8001bf0 <__swbuf_r>
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	1c58      	adds	r0, r3, #1
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	7019      	strb	r1, [r3, #0]
 80021ee:	4608      	mov	r0, r1
 80021f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <__sfputs_r>:
 80021f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f8:	4606      	mov	r6, r0
 80021fa:	460f      	mov	r7, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	18d5      	adds	r5, r2, r3
 8002200:	42ac      	cmp	r4, r5
 8002202:	d101      	bne.n	8002208 <__sfputs_r+0x12>
 8002204:	2000      	movs	r0, #0
 8002206:	e007      	b.n	8002218 <__sfputs_r+0x22>
 8002208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800220c:	463a      	mov	r2, r7
 800220e:	4630      	mov	r0, r6
 8002210:	f7ff ffda 	bl	80021c8 <__sfputc_r>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d1f3      	bne.n	8002200 <__sfputs_r+0xa>
 8002218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800221c <_vfiprintf_r>:
 800221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002220:	460d      	mov	r5, r1
 8002222:	b09d      	sub	sp, #116	; 0x74
 8002224:	4614      	mov	r4, r2
 8002226:	4698      	mov	r8, r3
 8002228:	4606      	mov	r6, r0
 800222a:	b118      	cbz	r0, 8002234 <_vfiprintf_r+0x18>
 800222c:	6983      	ldr	r3, [r0, #24]
 800222e:	b90b      	cbnz	r3, 8002234 <_vfiprintf_r+0x18>
 8002230:	f7ff feb8 	bl	8001fa4 <__sinit>
 8002234:	4b89      	ldr	r3, [pc, #548]	; (800245c <_vfiprintf_r+0x240>)
 8002236:	429d      	cmp	r5, r3
 8002238:	d11b      	bne.n	8002272 <_vfiprintf_r+0x56>
 800223a:	6875      	ldr	r5, [r6, #4]
 800223c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800223e:	07d9      	lsls	r1, r3, #31
 8002240:	d405      	bmi.n	800224e <_vfiprintf_r+0x32>
 8002242:	89ab      	ldrh	r3, [r5, #12]
 8002244:	059a      	lsls	r2, r3, #22
 8002246:	d402      	bmi.n	800224e <_vfiprintf_r+0x32>
 8002248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800224a:	f7ff ff49 	bl	80020e0 <__retarget_lock_acquire_recursive>
 800224e:	89ab      	ldrh	r3, [r5, #12]
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	d501      	bpl.n	8002258 <_vfiprintf_r+0x3c>
 8002254:	692b      	ldr	r3, [r5, #16]
 8002256:	b9eb      	cbnz	r3, 8002294 <_vfiprintf_r+0x78>
 8002258:	4629      	mov	r1, r5
 800225a:	4630      	mov	r0, r6
 800225c:	f7ff fd1a 	bl	8001c94 <__swsetup_r>
 8002260:	b1c0      	cbz	r0, 8002294 <_vfiprintf_r+0x78>
 8002262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002264:	07dc      	lsls	r4, r3, #31
 8002266:	d50e      	bpl.n	8002286 <_vfiprintf_r+0x6a>
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	b01d      	add	sp, #116	; 0x74
 800226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002272:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <_vfiprintf_r+0x244>)
 8002274:	429d      	cmp	r5, r3
 8002276:	d101      	bne.n	800227c <_vfiprintf_r+0x60>
 8002278:	68b5      	ldr	r5, [r6, #8]
 800227a:	e7df      	b.n	800223c <_vfiprintf_r+0x20>
 800227c:	4b79      	ldr	r3, [pc, #484]	; (8002464 <_vfiprintf_r+0x248>)
 800227e:	429d      	cmp	r5, r3
 8002280:	bf08      	it	eq
 8002282:	68f5      	ldreq	r5, [r6, #12]
 8002284:	e7da      	b.n	800223c <_vfiprintf_r+0x20>
 8002286:	89ab      	ldrh	r3, [r5, #12]
 8002288:	0598      	lsls	r0, r3, #22
 800228a:	d4ed      	bmi.n	8002268 <_vfiprintf_r+0x4c>
 800228c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800228e:	f7ff ff28 	bl	80020e2 <__retarget_lock_release_recursive>
 8002292:	e7e9      	b.n	8002268 <_vfiprintf_r+0x4c>
 8002294:	2300      	movs	r3, #0
 8002296:	9309      	str	r3, [sp, #36]	; 0x24
 8002298:	2320      	movs	r3, #32
 800229a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800229e:	f8cd 800c 	str.w	r8, [sp, #12]
 80022a2:	2330      	movs	r3, #48	; 0x30
 80022a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002468 <_vfiprintf_r+0x24c>
 80022a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ac:	f04f 0901 	mov.w	r9, #1
 80022b0:	4623      	mov	r3, r4
 80022b2:	469a      	mov	sl, r3
 80022b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022b8:	b10a      	cbz	r2, 80022be <_vfiprintf_r+0xa2>
 80022ba:	2a25      	cmp	r2, #37	; 0x25
 80022bc:	d1f9      	bne.n	80022b2 <_vfiprintf_r+0x96>
 80022be:	ebba 0b04 	subs.w	fp, sl, r4
 80022c2:	d00b      	beq.n	80022dc <_vfiprintf_r+0xc0>
 80022c4:	465b      	mov	r3, fp
 80022c6:	4622      	mov	r2, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	4630      	mov	r0, r6
 80022cc:	f7ff ff93 	bl	80021f6 <__sfputs_r>
 80022d0:	3001      	adds	r0, #1
 80022d2:	f000 80aa 	beq.w	800242a <_vfiprintf_r+0x20e>
 80022d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022d8:	445a      	add	r2, fp
 80022da:	9209      	str	r2, [sp, #36]	; 0x24
 80022dc:	f89a 3000 	ldrb.w	r3, [sl]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a2 	beq.w	800242a <_vfiprintf_r+0x20e>
 80022e6:	2300      	movs	r3, #0
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022f0:	f10a 0a01 	add.w	sl, sl, #1
 80022f4:	9304      	str	r3, [sp, #16]
 80022f6:	9307      	str	r3, [sp, #28]
 80022f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022fc:	931a      	str	r3, [sp, #104]	; 0x68
 80022fe:	4654      	mov	r4, sl
 8002300:	2205      	movs	r2, #5
 8002302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002306:	4858      	ldr	r0, [pc, #352]	; (8002468 <_vfiprintf_r+0x24c>)
 8002308:	f7fd ff72 	bl	80001f0 <memchr>
 800230c:	9a04      	ldr	r2, [sp, #16]
 800230e:	b9d8      	cbnz	r0, 8002348 <_vfiprintf_r+0x12c>
 8002310:	06d1      	lsls	r1, r2, #27
 8002312:	bf44      	itt	mi
 8002314:	2320      	movmi	r3, #32
 8002316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800231a:	0713      	lsls	r3, r2, #28
 800231c:	bf44      	itt	mi
 800231e:	232b      	movmi	r3, #43	; 0x2b
 8002320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002324:	f89a 3000 	ldrb.w	r3, [sl]
 8002328:	2b2a      	cmp	r3, #42	; 0x2a
 800232a:	d015      	beq.n	8002358 <_vfiprintf_r+0x13c>
 800232c:	9a07      	ldr	r2, [sp, #28]
 800232e:	4654      	mov	r4, sl
 8002330:	2000      	movs	r0, #0
 8002332:	f04f 0c0a 	mov.w	ip, #10
 8002336:	4621      	mov	r1, r4
 8002338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	2b09      	cmp	r3, #9
 8002340:	d94e      	bls.n	80023e0 <_vfiprintf_r+0x1c4>
 8002342:	b1b0      	cbz	r0, 8002372 <_vfiprintf_r+0x156>
 8002344:	9207      	str	r2, [sp, #28]
 8002346:	e014      	b.n	8002372 <_vfiprintf_r+0x156>
 8002348:	eba0 0308 	sub.w	r3, r0, r8
 800234c:	fa09 f303 	lsl.w	r3, r9, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	46a2      	mov	sl, r4
 8002356:	e7d2      	b.n	80022fe <_vfiprintf_r+0xe2>
 8002358:	9b03      	ldr	r3, [sp, #12]
 800235a:	1d19      	adds	r1, r3, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	9103      	str	r1, [sp, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	bfbb      	ittet	lt
 8002364:	425b      	neglt	r3, r3
 8002366:	f042 0202 	orrlt.w	r2, r2, #2
 800236a:	9307      	strge	r3, [sp, #28]
 800236c:	9307      	strlt	r3, [sp, #28]
 800236e:	bfb8      	it	lt
 8002370:	9204      	strlt	r2, [sp, #16]
 8002372:	7823      	ldrb	r3, [r4, #0]
 8002374:	2b2e      	cmp	r3, #46	; 0x2e
 8002376:	d10c      	bne.n	8002392 <_vfiprintf_r+0x176>
 8002378:	7863      	ldrb	r3, [r4, #1]
 800237a:	2b2a      	cmp	r3, #42	; 0x2a
 800237c:	d135      	bne.n	80023ea <_vfiprintf_r+0x1ce>
 800237e:	9b03      	ldr	r3, [sp, #12]
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	9203      	str	r2, [sp, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	bfb8      	it	lt
 800238a:	f04f 33ff 	movlt.w	r3, #4294967295
 800238e:	3402      	adds	r4, #2
 8002390:	9305      	str	r3, [sp, #20]
 8002392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002478 <_vfiprintf_r+0x25c>
 8002396:	7821      	ldrb	r1, [r4, #0]
 8002398:	2203      	movs	r2, #3
 800239a:	4650      	mov	r0, sl
 800239c:	f7fd ff28 	bl	80001f0 <memchr>
 80023a0:	b140      	cbz	r0, 80023b4 <_vfiprintf_r+0x198>
 80023a2:	2340      	movs	r3, #64	; 0x40
 80023a4:	eba0 000a 	sub.w	r0, r0, sl
 80023a8:	fa03 f000 	lsl.w	r0, r3, r0
 80023ac:	9b04      	ldr	r3, [sp, #16]
 80023ae:	4303      	orrs	r3, r0
 80023b0:	3401      	adds	r4, #1
 80023b2:	9304      	str	r3, [sp, #16]
 80023b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023b8:	482c      	ldr	r0, [pc, #176]	; (800246c <_vfiprintf_r+0x250>)
 80023ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023be:	2206      	movs	r2, #6
 80023c0:	f7fd ff16 	bl	80001f0 <memchr>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d03f      	beq.n	8002448 <_vfiprintf_r+0x22c>
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <_vfiprintf_r+0x254>)
 80023ca:	bb1b      	cbnz	r3, 8002414 <_vfiprintf_r+0x1f8>
 80023cc:	9b03      	ldr	r3, [sp, #12]
 80023ce:	3307      	adds	r3, #7
 80023d0:	f023 0307 	bic.w	r3, r3, #7
 80023d4:	3308      	adds	r3, #8
 80023d6:	9303      	str	r3, [sp, #12]
 80023d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023da:	443b      	add	r3, r7
 80023dc:	9309      	str	r3, [sp, #36]	; 0x24
 80023de:	e767      	b.n	80022b0 <_vfiprintf_r+0x94>
 80023e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80023e4:	460c      	mov	r4, r1
 80023e6:	2001      	movs	r0, #1
 80023e8:	e7a5      	b.n	8002336 <_vfiprintf_r+0x11a>
 80023ea:	2300      	movs	r3, #0
 80023ec:	3401      	adds	r4, #1
 80023ee:	9305      	str	r3, [sp, #20]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0c0a 	mov.w	ip, #10
 80023f6:	4620      	mov	r0, r4
 80023f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023fc:	3a30      	subs	r2, #48	; 0x30
 80023fe:	2a09      	cmp	r2, #9
 8002400:	d903      	bls.n	800240a <_vfiprintf_r+0x1ee>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0c5      	beq.n	8002392 <_vfiprintf_r+0x176>
 8002406:	9105      	str	r1, [sp, #20]
 8002408:	e7c3      	b.n	8002392 <_vfiprintf_r+0x176>
 800240a:	fb0c 2101 	mla	r1, ip, r1, r2
 800240e:	4604      	mov	r4, r0
 8002410:	2301      	movs	r3, #1
 8002412:	e7f0      	b.n	80023f6 <_vfiprintf_r+0x1da>
 8002414:	ab03      	add	r3, sp, #12
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	462a      	mov	r2, r5
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <_vfiprintf_r+0x258>)
 800241c:	a904      	add	r1, sp, #16
 800241e:	4630      	mov	r0, r6
 8002420:	f3af 8000 	nop.w
 8002424:	4607      	mov	r7, r0
 8002426:	1c78      	adds	r0, r7, #1
 8002428:	d1d6      	bne.n	80023d8 <_vfiprintf_r+0x1bc>
 800242a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800242c:	07d9      	lsls	r1, r3, #31
 800242e:	d405      	bmi.n	800243c <_vfiprintf_r+0x220>
 8002430:	89ab      	ldrh	r3, [r5, #12]
 8002432:	059a      	lsls	r2, r3, #22
 8002434:	d402      	bmi.n	800243c <_vfiprintf_r+0x220>
 8002436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002438:	f7ff fe53 	bl	80020e2 <__retarget_lock_release_recursive>
 800243c:	89ab      	ldrh	r3, [r5, #12]
 800243e:	065b      	lsls	r3, r3, #25
 8002440:	f53f af12 	bmi.w	8002268 <_vfiprintf_r+0x4c>
 8002444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002446:	e711      	b.n	800226c <_vfiprintf_r+0x50>
 8002448:	ab03      	add	r3, sp, #12
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	462a      	mov	r2, r5
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <_vfiprintf_r+0x258>)
 8002450:	a904      	add	r1, sp, #16
 8002452:	4630      	mov	r0, r6
 8002454:	f000 f880 	bl	8002558 <_printf_i>
 8002458:	e7e4      	b.n	8002424 <_vfiprintf_r+0x208>
 800245a:	bf00      	nop
 800245c:	08002f40 	.word	0x08002f40
 8002460:	08002f60 	.word	0x08002f60
 8002464:	08002f20 	.word	0x08002f20
 8002468:	08002f80 	.word	0x08002f80
 800246c:	08002f8a 	.word	0x08002f8a
 8002470:	00000000 	.word	0x00000000
 8002474:	080021f7 	.word	0x080021f7
 8002478:	08002f86 	.word	0x08002f86

0800247c <_printf_common>:
 800247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002480:	4616      	mov	r6, r2
 8002482:	4699      	mov	r9, r3
 8002484:	688a      	ldr	r2, [r1, #8]
 8002486:	690b      	ldr	r3, [r1, #16]
 8002488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800248c:	4293      	cmp	r3, r2
 800248e:	bfb8      	it	lt
 8002490:	4613      	movlt	r3, r2
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002498:	4607      	mov	r7, r0
 800249a:	460c      	mov	r4, r1
 800249c:	b10a      	cbz	r2, 80024a2 <_printf_common+0x26>
 800249e:	3301      	adds	r3, #1
 80024a0:	6033      	str	r3, [r6, #0]
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	0699      	lsls	r1, r3, #26
 80024a6:	bf42      	ittt	mi
 80024a8:	6833      	ldrmi	r3, [r6, #0]
 80024aa:	3302      	addmi	r3, #2
 80024ac:	6033      	strmi	r3, [r6, #0]
 80024ae:	6825      	ldr	r5, [r4, #0]
 80024b0:	f015 0506 	ands.w	r5, r5, #6
 80024b4:	d106      	bne.n	80024c4 <_printf_common+0x48>
 80024b6:	f104 0a19 	add.w	sl, r4, #25
 80024ba:	68e3      	ldr	r3, [r4, #12]
 80024bc:	6832      	ldr	r2, [r6, #0]
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	42ab      	cmp	r3, r5
 80024c2:	dc26      	bgt.n	8002512 <_printf_common+0x96>
 80024c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024c8:	1e13      	subs	r3, r2, #0
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	bf18      	it	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	0692      	lsls	r2, r2, #26
 80024d2:	d42b      	bmi.n	800252c <_printf_common+0xb0>
 80024d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024d8:	4649      	mov	r1, r9
 80024da:	4638      	mov	r0, r7
 80024dc:	47c0      	blx	r8
 80024de:	3001      	adds	r0, #1
 80024e0:	d01e      	beq.n	8002520 <_printf_common+0xa4>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	68e5      	ldr	r5, [r4, #12]
 80024e6:	6832      	ldr	r2, [r6, #0]
 80024e8:	f003 0306 	and.w	r3, r3, #6
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	bf08      	it	eq
 80024f0:	1aad      	subeq	r5, r5, r2
 80024f2:	68a3      	ldr	r3, [r4, #8]
 80024f4:	6922      	ldr	r2, [r4, #16]
 80024f6:	bf0c      	ite	eq
 80024f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024fc:	2500      	movne	r5, #0
 80024fe:	4293      	cmp	r3, r2
 8002500:	bfc4      	itt	gt
 8002502:	1a9b      	subgt	r3, r3, r2
 8002504:	18ed      	addgt	r5, r5, r3
 8002506:	2600      	movs	r6, #0
 8002508:	341a      	adds	r4, #26
 800250a:	42b5      	cmp	r5, r6
 800250c:	d11a      	bne.n	8002544 <_printf_common+0xc8>
 800250e:	2000      	movs	r0, #0
 8002510:	e008      	b.n	8002524 <_printf_common+0xa8>
 8002512:	2301      	movs	r3, #1
 8002514:	4652      	mov	r2, sl
 8002516:	4649      	mov	r1, r9
 8002518:	4638      	mov	r0, r7
 800251a:	47c0      	blx	r8
 800251c:	3001      	adds	r0, #1
 800251e:	d103      	bne.n	8002528 <_printf_common+0xac>
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002528:	3501      	adds	r5, #1
 800252a:	e7c6      	b.n	80024ba <_printf_common+0x3e>
 800252c:	18e1      	adds	r1, r4, r3
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	2030      	movs	r0, #48	; 0x30
 8002532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002536:	4422      	add	r2, r4
 8002538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800253c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002540:	3302      	adds	r3, #2
 8002542:	e7c7      	b.n	80024d4 <_printf_common+0x58>
 8002544:	2301      	movs	r3, #1
 8002546:	4622      	mov	r2, r4
 8002548:	4649      	mov	r1, r9
 800254a:	4638      	mov	r0, r7
 800254c:	47c0      	blx	r8
 800254e:	3001      	adds	r0, #1
 8002550:	d0e6      	beq.n	8002520 <_printf_common+0xa4>
 8002552:	3601      	adds	r6, #1
 8002554:	e7d9      	b.n	800250a <_printf_common+0x8e>
	...

08002558 <_printf_i>:
 8002558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	7e0f      	ldrb	r7, [r1, #24]
 800255e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002560:	2f78      	cmp	r7, #120	; 0x78
 8002562:	4691      	mov	r9, r2
 8002564:	4680      	mov	r8, r0
 8002566:	460c      	mov	r4, r1
 8002568:	469a      	mov	sl, r3
 800256a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800256e:	d807      	bhi.n	8002580 <_printf_i+0x28>
 8002570:	2f62      	cmp	r7, #98	; 0x62
 8002572:	d80a      	bhi.n	800258a <_printf_i+0x32>
 8002574:	2f00      	cmp	r7, #0
 8002576:	f000 80d8 	beq.w	800272a <_printf_i+0x1d2>
 800257a:	2f58      	cmp	r7, #88	; 0x58
 800257c:	f000 80a3 	beq.w	80026c6 <_printf_i+0x16e>
 8002580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002588:	e03a      	b.n	8002600 <_printf_i+0xa8>
 800258a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800258e:	2b15      	cmp	r3, #21
 8002590:	d8f6      	bhi.n	8002580 <_printf_i+0x28>
 8002592:	a101      	add	r1, pc, #4	; (adr r1, 8002598 <_printf_i+0x40>)
 8002594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002598:	080025f1 	.word	0x080025f1
 800259c:	08002605 	.word	0x08002605
 80025a0:	08002581 	.word	0x08002581
 80025a4:	08002581 	.word	0x08002581
 80025a8:	08002581 	.word	0x08002581
 80025ac:	08002581 	.word	0x08002581
 80025b0:	08002605 	.word	0x08002605
 80025b4:	08002581 	.word	0x08002581
 80025b8:	08002581 	.word	0x08002581
 80025bc:	08002581 	.word	0x08002581
 80025c0:	08002581 	.word	0x08002581
 80025c4:	08002711 	.word	0x08002711
 80025c8:	08002635 	.word	0x08002635
 80025cc:	080026f3 	.word	0x080026f3
 80025d0:	08002581 	.word	0x08002581
 80025d4:	08002581 	.word	0x08002581
 80025d8:	08002733 	.word	0x08002733
 80025dc:	08002581 	.word	0x08002581
 80025e0:	08002635 	.word	0x08002635
 80025e4:	08002581 	.word	0x08002581
 80025e8:	08002581 	.word	0x08002581
 80025ec:	080026fb 	.word	0x080026fb
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	1d1a      	adds	r2, r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	602a      	str	r2, [r5, #0]
 80025f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002600:	2301      	movs	r3, #1
 8002602:	e0a3      	b.n	800274c <_printf_i+0x1f4>
 8002604:	6820      	ldr	r0, [r4, #0]
 8002606:	6829      	ldr	r1, [r5, #0]
 8002608:	0606      	lsls	r6, r0, #24
 800260a:	f101 0304 	add.w	r3, r1, #4
 800260e:	d50a      	bpl.n	8002626 <_printf_i+0xce>
 8002610:	680e      	ldr	r6, [r1, #0]
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	2e00      	cmp	r6, #0
 8002616:	da03      	bge.n	8002620 <_printf_i+0xc8>
 8002618:	232d      	movs	r3, #45	; 0x2d
 800261a:	4276      	negs	r6, r6
 800261c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002620:	485e      	ldr	r0, [pc, #376]	; (800279c <_printf_i+0x244>)
 8002622:	230a      	movs	r3, #10
 8002624:	e019      	b.n	800265a <_printf_i+0x102>
 8002626:	680e      	ldr	r6, [r1, #0]
 8002628:	602b      	str	r3, [r5, #0]
 800262a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800262e:	bf18      	it	ne
 8002630:	b236      	sxthne	r6, r6
 8002632:	e7ef      	b.n	8002614 <_printf_i+0xbc>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	1d19      	adds	r1, r3, #4
 800263a:	6029      	str	r1, [r5, #0]
 800263c:	0601      	lsls	r1, r0, #24
 800263e:	d501      	bpl.n	8002644 <_printf_i+0xec>
 8002640:	681e      	ldr	r6, [r3, #0]
 8002642:	e002      	b.n	800264a <_printf_i+0xf2>
 8002644:	0646      	lsls	r6, r0, #25
 8002646:	d5fb      	bpl.n	8002640 <_printf_i+0xe8>
 8002648:	881e      	ldrh	r6, [r3, #0]
 800264a:	4854      	ldr	r0, [pc, #336]	; (800279c <_printf_i+0x244>)
 800264c:	2f6f      	cmp	r7, #111	; 0x6f
 800264e:	bf0c      	ite	eq
 8002650:	2308      	moveq	r3, #8
 8002652:	230a      	movne	r3, #10
 8002654:	2100      	movs	r1, #0
 8002656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800265a:	6865      	ldr	r5, [r4, #4]
 800265c:	60a5      	str	r5, [r4, #8]
 800265e:	2d00      	cmp	r5, #0
 8002660:	bfa2      	ittt	ge
 8002662:	6821      	ldrge	r1, [r4, #0]
 8002664:	f021 0104 	bicge.w	r1, r1, #4
 8002668:	6021      	strge	r1, [r4, #0]
 800266a:	b90e      	cbnz	r6, 8002670 <_printf_i+0x118>
 800266c:	2d00      	cmp	r5, #0
 800266e:	d04d      	beq.n	800270c <_printf_i+0x1b4>
 8002670:	4615      	mov	r5, r2
 8002672:	fbb6 f1f3 	udiv	r1, r6, r3
 8002676:	fb03 6711 	mls	r7, r3, r1, r6
 800267a:	5dc7      	ldrb	r7, [r0, r7]
 800267c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002680:	4637      	mov	r7, r6
 8002682:	42bb      	cmp	r3, r7
 8002684:	460e      	mov	r6, r1
 8002686:	d9f4      	bls.n	8002672 <_printf_i+0x11a>
 8002688:	2b08      	cmp	r3, #8
 800268a:	d10b      	bne.n	80026a4 <_printf_i+0x14c>
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	07de      	lsls	r6, r3, #31
 8002690:	d508      	bpl.n	80026a4 <_printf_i+0x14c>
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	6861      	ldr	r1, [r4, #4]
 8002696:	4299      	cmp	r1, r3
 8002698:	bfde      	ittt	le
 800269a:	2330      	movle	r3, #48	; 0x30
 800269c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026a4:	1b52      	subs	r2, r2, r5
 80026a6:	6122      	str	r2, [r4, #16]
 80026a8:	f8cd a000 	str.w	sl, [sp]
 80026ac:	464b      	mov	r3, r9
 80026ae:	aa03      	add	r2, sp, #12
 80026b0:	4621      	mov	r1, r4
 80026b2:	4640      	mov	r0, r8
 80026b4:	f7ff fee2 	bl	800247c <_printf_common>
 80026b8:	3001      	adds	r0, #1
 80026ba:	d14c      	bne.n	8002756 <_printf_i+0x1fe>
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	b004      	add	sp, #16
 80026c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c6:	4835      	ldr	r0, [pc, #212]	; (800279c <_printf_i+0x244>)
 80026c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026cc:	6829      	ldr	r1, [r5, #0]
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80026d4:	6029      	str	r1, [r5, #0]
 80026d6:	061d      	lsls	r5, r3, #24
 80026d8:	d514      	bpl.n	8002704 <_printf_i+0x1ac>
 80026da:	07df      	lsls	r7, r3, #31
 80026dc:	bf44      	itt	mi
 80026de:	f043 0320 	orrmi.w	r3, r3, #32
 80026e2:	6023      	strmi	r3, [r4, #0]
 80026e4:	b91e      	cbnz	r6, 80026ee <_printf_i+0x196>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f023 0320 	bic.w	r3, r3, #32
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	2310      	movs	r3, #16
 80026f0:	e7b0      	b.n	8002654 <_printf_i+0xfc>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	2378      	movs	r3, #120	; 0x78
 80026fc:	4828      	ldr	r0, [pc, #160]	; (80027a0 <_printf_i+0x248>)
 80026fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002702:	e7e3      	b.n	80026cc <_printf_i+0x174>
 8002704:	0659      	lsls	r1, r3, #25
 8002706:	bf48      	it	mi
 8002708:	b2b6      	uxthmi	r6, r6
 800270a:	e7e6      	b.n	80026da <_printf_i+0x182>
 800270c:	4615      	mov	r5, r2
 800270e:	e7bb      	b.n	8002688 <_printf_i+0x130>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	6826      	ldr	r6, [r4, #0]
 8002714:	6961      	ldr	r1, [r4, #20]
 8002716:	1d18      	adds	r0, r3, #4
 8002718:	6028      	str	r0, [r5, #0]
 800271a:	0635      	lsls	r5, r6, #24
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	d501      	bpl.n	8002724 <_printf_i+0x1cc>
 8002720:	6019      	str	r1, [r3, #0]
 8002722:	e002      	b.n	800272a <_printf_i+0x1d2>
 8002724:	0670      	lsls	r0, r6, #25
 8002726:	d5fb      	bpl.n	8002720 <_printf_i+0x1c8>
 8002728:	8019      	strh	r1, [r3, #0]
 800272a:	2300      	movs	r3, #0
 800272c:	6123      	str	r3, [r4, #16]
 800272e:	4615      	mov	r5, r2
 8002730:	e7ba      	b.n	80026a8 <_printf_i+0x150>
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	1d1a      	adds	r2, r3, #4
 8002736:	602a      	str	r2, [r5, #0]
 8002738:	681d      	ldr	r5, [r3, #0]
 800273a:	6862      	ldr	r2, [r4, #4]
 800273c:	2100      	movs	r1, #0
 800273e:	4628      	mov	r0, r5
 8002740:	f7fd fd56 	bl	80001f0 <memchr>
 8002744:	b108      	cbz	r0, 800274a <_printf_i+0x1f2>
 8002746:	1b40      	subs	r0, r0, r5
 8002748:	6060      	str	r0, [r4, #4]
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	6123      	str	r3, [r4, #16]
 800274e:	2300      	movs	r3, #0
 8002750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002754:	e7a8      	b.n	80026a8 <_printf_i+0x150>
 8002756:	6923      	ldr	r3, [r4, #16]
 8002758:	462a      	mov	r2, r5
 800275a:	4649      	mov	r1, r9
 800275c:	4640      	mov	r0, r8
 800275e:	47d0      	blx	sl
 8002760:	3001      	adds	r0, #1
 8002762:	d0ab      	beq.n	80026bc <_printf_i+0x164>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	079b      	lsls	r3, r3, #30
 8002768:	d413      	bmi.n	8002792 <_printf_i+0x23a>
 800276a:	68e0      	ldr	r0, [r4, #12]
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	4298      	cmp	r0, r3
 8002770:	bfb8      	it	lt
 8002772:	4618      	movlt	r0, r3
 8002774:	e7a4      	b.n	80026c0 <_printf_i+0x168>
 8002776:	2301      	movs	r3, #1
 8002778:	4632      	mov	r2, r6
 800277a:	4649      	mov	r1, r9
 800277c:	4640      	mov	r0, r8
 800277e:	47d0      	blx	sl
 8002780:	3001      	adds	r0, #1
 8002782:	d09b      	beq.n	80026bc <_printf_i+0x164>
 8002784:	3501      	adds	r5, #1
 8002786:	68e3      	ldr	r3, [r4, #12]
 8002788:	9903      	ldr	r1, [sp, #12]
 800278a:	1a5b      	subs	r3, r3, r1
 800278c:	42ab      	cmp	r3, r5
 800278e:	dcf2      	bgt.n	8002776 <_printf_i+0x21e>
 8002790:	e7eb      	b.n	800276a <_printf_i+0x212>
 8002792:	2500      	movs	r5, #0
 8002794:	f104 0619 	add.w	r6, r4, #25
 8002798:	e7f5      	b.n	8002786 <_printf_i+0x22e>
 800279a:	bf00      	nop
 800279c:	08002f91 	.word	0x08002f91
 80027a0:	08002fa2 	.word	0x08002fa2

080027a4 <__sread>:
 80027a4:	b510      	push	{r4, lr}
 80027a6:	460c      	mov	r4, r1
 80027a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ac:	f000 f894 	bl	80028d8 <_read_r>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	bfab      	itete	ge
 80027b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027b6:	89a3      	ldrhlt	r3, [r4, #12]
 80027b8:	181b      	addge	r3, r3, r0
 80027ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027be:	bfac      	ite	ge
 80027c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80027c2:	81a3      	strhlt	r3, [r4, #12]
 80027c4:	bd10      	pop	{r4, pc}

080027c6 <__swrite>:
 80027c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ca:	461f      	mov	r7, r3
 80027cc:	898b      	ldrh	r3, [r1, #12]
 80027ce:	05db      	lsls	r3, r3, #23
 80027d0:	4605      	mov	r5, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	4616      	mov	r6, r2
 80027d6:	d505      	bpl.n	80027e4 <__swrite+0x1e>
 80027d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027dc:	2302      	movs	r3, #2
 80027de:	2200      	movs	r2, #0
 80027e0:	f000 f868 	bl	80028b4 <_lseek_r>
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	4632      	mov	r2, r6
 80027f2:	463b      	mov	r3, r7
 80027f4:	4628      	mov	r0, r5
 80027f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027fa:	f000 b817 	b.w	800282c <_write_r>

080027fe <__sseek>:
 80027fe:	b510      	push	{r4, lr}
 8002800:	460c      	mov	r4, r1
 8002802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002806:	f000 f855 	bl	80028b4 <_lseek_r>
 800280a:	1c43      	adds	r3, r0, #1
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	bf15      	itete	ne
 8002810:	6560      	strne	r0, [r4, #84]	; 0x54
 8002812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800281a:	81a3      	strheq	r3, [r4, #12]
 800281c:	bf18      	it	ne
 800281e:	81a3      	strhne	r3, [r4, #12]
 8002820:	bd10      	pop	{r4, pc}

08002822 <__sclose>:
 8002822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002826:	f000 b813 	b.w	8002850 <_close_r>
	...

0800282c <_write_r>:
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	4d07      	ldr	r5, [pc, #28]	; (800284c <_write_r+0x20>)
 8002830:	4604      	mov	r4, r0
 8002832:	4608      	mov	r0, r1
 8002834:	4611      	mov	r1, r2
 8002836:	2200      	movs	r2, #0
 8002838:	602a      	str	r2, [r5, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f905 	bl	8002a4a <_write>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d102      	bne.n	800284a <_write_r+0x1e>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	b103      	cbz	r3, 800284a <_write_r+0x1e>
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	200000d8 	.word	0x200000d8

08002850 <_close_r>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	4d06      	ldr	r5, [pc, #24]	; (800286c <_close_r+0x1c>)
 8002854:	2300      	movs	r3, #0
 8002856:	4604      	mov	r4, r0
 8002858:	4608      	mov	r0, r1
 800285a:	602b      	str	r3, [r5, #0]
 800285c:	f000 f926 	bl	8002aac <_close>
 8002860:	1c43      	adds	r3, r0, #1
 8002862:	d102      	bne.n	800286a <_close_r+0x1a>
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	b103      	cbz	r3, 800286a <_close_r+0x1a>
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	bd38      	pop	{r3, r4, r5, pc}
 800286c:	200000d8 	.word	0x200000d8

08002870 <_fstat_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4d07      	ldr	r5, [pc, #28]	; (8002890 <_fstat_r+0x20>)
 8002874:	2300      	movs	r3, #0
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	f000 f95c 	bl	8002b3a <_fstat>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	d102      	bne.n	800288c <_fstat_r+0x1c>
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	b103      	cbz	r3, 800288c <_fstat_r+0x1c>
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	bd38      	pop	{r3, r4, r5, pc}
 800288e:	bf00      	nop
 8002890:	200000d8 	.word	0x200000d8

08002894 <_isatty_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4d06      	ldr	r5, [pc, #24]	; (80028b0 <_isatty_r+0x1c>)
 8002898:	2300      	movs	r3, #0
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f000 fab2 	bl	8002e08 <_isatty>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_isatty_r+0x1a>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_isatty_r+0x1a>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	200000d8 	.word	0x200000d8

080028b4 <_lseek_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d07      	ldr	r5, [pc, #28]	; (80028d4 <_lseek_r+0x20>)
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	602a      	str	r2, [r5, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8af 	bl	8002a26 <_lseek>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_lseek_r+0x1e>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_lseek_r+0x1e>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	200000d8 	.word	0x200000d8

080028d8 <_read_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4d07      	ldr	r5, [pc, #28]	; (80028f8 <_read_r+0x20>)
 80028dc:	4604      	mov	r4, r0
 80028de:	4608      	mov	r0, r1
 80028e0:	4611      	mov	r1, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	602a      	str	r2, [r5, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 f845 	bl	8002976 <_read>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_read_r+0x1e>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_read_r+0x1e>
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	200000d8 	.word	0x200000d8

080028fc <findslot>:
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <findslot+0x2c>)
 80028fe:	b510      	push	{r4, lr}
 8002900:	4604      	mov	r4, r0
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	b118      	cbz	r0, 800290e <findslot+0x12>
 8002906:	6983      	ldr	r3, [r0, #24]
 8002908:	b90b      	cbnz	r3, 800290e <findslot+0x12>
 800290a:	f7ff fb4b 	bl	8001fa4 <__sinit>
 800290e:	2c13      	cmp	r4, #19
 8002910:	d807      	bhi.n	8002922 <findslot+0x26>
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <findslot+0x30>)
 8002914:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002918:	3201      	adds	r2, #1
 800291a:	d002      	beq.n	8002922 <findslot+0x26>
 800291c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002920:	bd10      	pop	{r4, pc}
 8002922:	2000      	movs	r0, #0
 8002924:	e7fc      	b.n	8002920 <findslot+0x24>
 8002926:	bf00      	nop
 8002928:	20000018 	.word	0x20000018
 800292c:	200000e8 	.word	0x200000e8

08002930 <error>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	4604      	mov	r4, r0
 8002934:	f7fe ff9c 	bl	8001870 <__errno>
 8002938:	2613      	movs	r6, #19
 800293a:	4605      	mov	r5, r0
 800293c:	2700      	movs	r7, #0
 800293e:	4630      	mov	r0, r6
 8002940:	4639      	mov	r1, r7
 8002942:	beab      	bkpt	0x00ab
 8002944:	4606      	mov	r6, r0
 8002946:	602e      	str	r6, [r5, #0]
 8002948:	4620      	mov	r0, r4
 800294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800294c <checkerror>:
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d101      	bne.n	8002954 <checkerror+0x8>
 8002950:	f7ff bfee 	b.w	8002930 <error>
 8002954:	4770      	bx	lr

08002956 <_swiread>:
 8002956:	b530      	push	{r4, r5, lr}
 8002958:	b085      	sub	sp, #20
 800295a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800295e:	9203      	str	r2, [sp, #12]
 8002960:	2406      	movs	r4, #6
 8002962:	ad01      	add	r5, sp, #4
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	beab      	bkpt	0x00ab
 800296a:	4604      	mov	r4, r0
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff ffed 	bl	800294c <checkerror>
 8002972:	b005      	add	sp, #20
 8002974:	bd30      	pop	{r4, r5, pc}

08002976 <_read>:
 8002976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002978:	4615      	mov	r5, r2
 800297a:	9101      	str	r1, [sp, #4]
 800297c:	f7ff ffbe 	bl	80028fc <findslot>
 8002980:	9901      	ldr	r1, [sp, #4]
 8002982:	4604      	mov	r4, r0
 8002984:	b938      	cbnz	r0, 8002996 <_read+0x20>
 8002986:	f7fe ff73 	bl	8001870 <__errno>
 800298a:	2309      	movs	r3, #9
 800298c:	6003      	str	r3, [r0, #0]
 800298e:	f04f 30ff 	mov.w	r0, #4294967295
 8002992:	b003      	add	sp, #12
 8002994:	bd30      	pop	{r4, r5, pc}
 8002996:	6800      	ldr	r0, [r0, #0]
 8002998:	462a      	mov	r2, r5
 800299a:	f7ff ffdc 	bl	8002956 <_swiread>
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	d0f7      	beq.n	8002992 <_read+0x1c>
 80029a2:	6863      	ldr	r3, [r4, #4]
 80029a4:	1a2a      	subs	r2, r5, r0
 80029a6:	4413      	add	r3, r2
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	4610      	mov	r0, r2
 80029ac:	e7f1      	b.n	8002992 <_read+0x1c>

080029ae <_swilseek>:
 80029ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029b0:	460c      	mov	r4, r1
 80029b2:	4616      	mov	r6, r2
 80029b4:	f7ff ffa2 	bl	80028fc <findslot>
 80029b8:	4605      	mov	r5, r0
 80029ba:	b940      	cbnz	r0, 80029ce <_swilseek+0x20>
 80029bc:	f7fe ff58 	bl	8001870 <__errno>
 80029c0:	2309      	movs	r3, #9
 80029c2:	6003      	str	r3, [r0, #0]
 80029c4:	f04f 34ff 	mov.w	r4, #4294967295
 80029c8:	4620      	mov	r0, r4
 80029ca:	b003      	add	sp, #12
 80029cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ce:	2e02      	cmp	r6, #2
 80029d0:	d903      	bls.n	80029da <_swilseek+0x2c>
 80029d2:	f7fe ff4d 	bl	8001870 <__errno>
 80029d6:	2316      	movs	r3, #22
 80029d8:	e7f3      	b.n	80029c2 <_swilseek+0x14>
 80029da:	2e01      	cmp	r6, #1
 80029dc:	d112      	bne.n	8002a04 <_swilseek+0x56>
 80029de:	6843      	ldr	r3, [r0, #4]
 80029e0:	18e4      	adds	r4, r4, r3
 80029e2:	d4f6      	bmi.n	80029d2 <_swilseek+0x24>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	260a      	movs	r6, #10
 80029e8:	e9cd 3400 	strd	r3, r4, [sp]
 80029ec:	466f      	mov	r7, sp
 80029ee:	4630      	mov	r0, r6
 80029f0:	4639      	mov	r1, r7
 80029f2:	beab      	bkpt	0x00ab
 80029f4:	4606      	mov	r6, r0
 80029f6:	4630      	mov	r0, r6
 80029f8:	f7ff ffa8 	bl	800294c <checkerror>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	dbe1      	blt.n	80029c4 <_swilseek+0x16>
 8002a00:	606c      	str	r4, [r5, #4]
 8002a02:	e7e1      	b.n	80029c8 <_swilseek+0x1a>
 8002a04:	2e02      	cmp	r6, #2
 8002a06:	d1ed      	bne.n	80029e4 <_swilseek+0x36>
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	260c      	movs	r6, #12
 8002a0e:	466f      	mov	r7, sp
 8002a10:	4630      	mov	r0, r6
 8002a12:	4639      	mov	r1, r7
 8002a14:	beab      	bkpt	0x00ab
 8002a16:	4606      	mov	r6, r0
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f7ff ff97 	bl	800294c <checkerror>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	d0d0      	beq.n	80029c4 <_swilseek+0x16>
 8002a22:	4404      	add	r4, r0
 8002a24:	e7de      	b.n	80029e4 <_swilseek+0x36>

08002a26 <_lseek>:
 8002a26:	f7ff bfc2 	b.w	80029ae <_swilseek>

08002a2a <_swiwrite>:
 8002a2a:	b530      	push	{r4, r5, lr}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a32:	9203      	str	r2, [sp, #12]
 8002a34:	2405      	movs	r4, #5
 8002a36:	ad01      	add	r5, sp, #4
 8002a38:	4620      	mov	r0, r4
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	beab      	bkpt	0x00ab
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff ff83 	bl	800294c <checkerror>
 8002a46:	b005      	add	sp, #20
 8002a48:	bd30      	pop	{r4, r5, pc}

08002a4a <_write>:
 8002a4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a4c:	4615      	mov	r5, r2
 8002a4e:	9101      	str	r1, [sp, #4]
 8002a50:	f7ff ff54 	bl	80028fc <findslot>
 8002a54:	9901      	ldr	r1, [sp, #4]
 8002a56:	4604      	mov	r4, r0
 8002a58:	b930      	cbnz	r0, 8002a68 <_write+0x1e>
 8002a5a:	f7fe ff09 	bl	8001870 <__errno>
 8002a5e:	2309      	movs	r3, #9
 8002a60:	6003      	str	r3, [r0, #0]
 8002a62:	f04f 30ff 	mov.w	r0, #4294967295
 8002a66:	e012      	b.n	8002a8e <_write+0x44>
 8002a68:	6800      	ldr	r0, [r0, #0]
 8002a6a:	462a      	mov	r2, r5
 8002a6c:	f7ff ffdd 	bl	8002a2a <_swiwrite>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	dbf6      	blt.n	8002a62 <_write+0x18>
 8002a74:	6862      	ldr	r2, [r4, #4]
 8002a76:	1a2b      	subs	r3, r5, r0
 8002a78:	441a      	add	r2, r3
 8002a7a:	42a8      	cmp	r0, r5
 8002a7c:	6062      	str	r2, [r4, #4]
 8002a7e:	d105      	bne.n	8002a8c <_write+0x42>
 8002a80:	2000      	movs	r0, #0
 8002a82:	b003      	add	sp, #12
 8002a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a88:	f7ff bf52 	b.w	8002930 <error>
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	b003      	add	sp, #12
 8002a90:	bd30      	pop	{r4, r5, pc}

08002a92 <_swiclose>:
 8002a92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a94:	2402      	movs	r4, #2
 8002a96:	9001      	str	r0, [sp, #4]
 8002a98:	ad01      	add	r5, sp, #4
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	beab      	bkpt	0x00ab
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ff52 	bl	800294c <checkerror>
 8002aa8:	b003      	add	sp, #12
 8002aaa:	bd30      	pop	{r4, r5, pc}

08002aac <_close>:
 8002aac:	b538      	push	{r3, r4, r5, lr}
 8002aae:	4605      	mov	r5, r0
 8002ab0:	f7ff ff24 	bl	80028fc <findslot>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	b930      	cbnz	r0, 8002ac6 <_close+0x1a>
 8002ab8:	f7fe feda 	bl	8001870 <__errno>
 8002abc:	2309      	movs	r3, #9
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
 8002ac6:	3d01      	subs	r5, #1
 8002ac8:	2d01      	cmp	r5, #1
 8002aca:	d809      	bhi.n	8002ae0 <_close+0x34>
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <_close+0x48>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d104      	bne.n	8002ae0 <_close+0x34>
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	6003      	str	r3, [r0, #0]
 8002adc:	2000      	movs	r0, #0
 8002ade:	e7f1      	b.n	8002ac4 <_close+0x18>
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	f7ff ffd6 	bl	8002a92 <_swiclose>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d1ec      	bne.n	8002ac4 <_close+0x18>
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	6023      	str	r3, [r4, #0]
 8002af0:	e7e8      	b.n	8002ac4 <_close+0x18>
 8002af2:	bf00      	nop
 8002af4:	200000e8 	.word	0x200000e8

08002af8 <_swistat>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	460c      	mov	r4, r1
 8002afc:	f7ff fefe 	bl	80028fc <findslot>
 8002b00:	4605      	mov	r5, r0
 8002b02:	b930      	cbnz	r0, 8002b12 <_swistat+0x1a>
 8002b04:	f7fe feb4 	bl	8001870 <__errno>
 8002b08:	2309      	movs	r3, #9
 8002b0a:	6003      	str	r3, [r0, #0]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b18:	6063      	str	r3, [r4, #4]
 8002b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1e:	64a3      	str	r3, [r4, #72]	; 0x48
 8002b20:	260c      	movs	r6, #12
 8002b22:	4630      	mov	r0, r6
 8002b24:	4629      	mov	r1, r5
 8002b26:	beab      	bkpt	0x00ab
 8002b28:	4605      	mov	r5, r0
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	f7ff ff0e 	bl	800294c <checkerror>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	bf1c      	itt	ne
 8002b34:	6120      	strne	r0, [r4, #16]
 8002b36:	2000      	movne	r0, #0
 8002b38:	e7ea      	b.n	8002b10 <_swistat+0x18>

08002b3a <_fstat>:
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4604      	mov	r4, r0
 8002b42:	2258      	movs	r2, #88	; 0x58
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fecd 	bl	80018e4 <memset>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b52:	f7ff bfd1 	b.w	8002af8 <_swistat>

08002b56 <_stat>:
 8002b56:	b538      	push	{r3, r4, r5, lr}
 8002b58:	460d      	mov	r5, r1
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	2258      	movs	r2, #88	; 0x58
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7fe febf 	bl	80018e4 <memset>
 8002b66:	4620      	mov	r0, r4
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f000 f811 	bl	8002b90 <_swiopen>
 8002b6e:	1c43      	adds	r3, r0, #1
 8002b70:	4604      	mov	r4, r0
 8002b72:	d00b      	beq.n	8002b8c <_stat+0x36>
 8002b74:	686b      	ldr	r3, [r5, #4]
 8002b76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002b7a:	606b      	str	r3, [r5, #4]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7ff ffbb 	bl	8002af8 <_swistat>
 8002b82:	4605      	mov	r5, r0
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff ff91 	bl	8002aac <_close>
 8002b8a:	462c      	mov	r4, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}

08002b90 <_swiopen>:
 8002b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b94:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002c40 <_swiopen+0xb0>
 8002b98:	b097      	sub	sp, #92	; 0x5c
 8002b9a:	4607      	mov	r7, r0
 8002b9c:	460e      	mov	r6, r1
 8002b9e:	2500      	movs	r5, #0
 8002ba0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002ba4:	1c61      	adds	r1, r4, #1
 8002ba6:	d037      	beq.n	8002c18 <_swiopen+0x88>
 8002ba8:	3501      	adds	r5, #1
 8002baa:	2d14      	cmp	r5, #20
 8002bac:	d1f8      	bne.n	8002ba0 <_swiopen+0x10>
 8002bae:	f7fe fe5f 	bl	8001870 <__errno>
 8002bb2:	2318      	movs	r3, #24
 8002bb4:	6003      	str	r3, [r0, #0]
 8002bb6:	f04f 34ff 	mov.w	r4, #4294967295
 8002bba:	e03d      	b.n	8002c38 <_swiopen+0xa8>
 8002bbc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002bc0:	f240 6301 	movw	r3, #1537	; 0x601
 8002bc4:	07b2      	lsls	r2, r6, #30
 8002bc6:	bf48      	it	mi
 8002bc8:	f044 0402 	orrmi.w	r4, r4, #2
 8002bcc:	421e      	tst	r6, r3
 8002bce:	bf18      	it	ne
 8002bd0:	f044 0404 	orrne.w	r4, r4, #4
 8002bd4:	0733      	lsls	r3, r6, #28
 8002bd6:	bf48      	it	mi
 8002bd8:	f024 0404 	bicmi.w	r4, r4, #4
 8002bdc:	4638      	mov	r0, r7
 8002bde:	bf48      	it	mi
 8002be0:	f044 0408 	orrmi.w	r4, r4, #8
 8002be4:	9700      	str	r7, [sp, #0]
 8002be6:	f7fd fb53 	bl	8000290 <strlen>
 8002bea:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002bee:	2401      	movs	r4, #1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	beab      	bkpt	0x00ab
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	2c00      	cmp	r4, #0
 8002bfa:	db08      	blt.n	8002c0e <_swiopen+0x7e>
 8002bfc:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002c00:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c8 3004 	str.w	r3, [r8, #4]
 8002c0a:	462c      	mov	r4, r5
 8002c0c:	e014      	b.n	8002c38 <_swiopen+0xa8>
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7ff fe8e 	bl	8002930 <error>
 8002c14:	4604      	mov	r4, r0
 8002c16:	e00f      	b.n	8002c38 <_swiopen+0xa8>
 8002c18:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002c1c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c20:	46e9      	mov	r9, sp
 8002c22:	d1cb      	bne.n	8002bbc <_swiopen+0x2c>
 8002c24:	4649      	mov	r1, r9
 8002c26:	4638      	mov	r0, r7
 8002c28:	f7ff ff95 	bl	8002b56 <_stat>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d0c5      	beq.n	8002bbc <_swiopen+0x2c>
 8002c30:	f7fe fe1e 	bl	8001870 <__errno>
 8002c34:	2311      	movs	r3, #17
 8002c36:	6003      	str	r3, [r0, #0]
 8002c38:	4620      	mov	r0, r4
 8002c3a:	b017      	add	sp, #92	; 0x5c
 8002c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c40:	200000e8 	.word	0x200000e8

08002c44 <_get_semihosting_exts>:
 8002c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c48:	4606      	mov	r6, r0
 8002c4a:	460f      	mov	r7, r1
 8002c4c:	482a      	ldr	r0, [pc, #168]	; (8002cf8 <_get_semihosting_exts+0xb4>)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4615      	mov	r5, r2
 8002c52:	f7ff ff9d 	bl	8002b90 <_swiopen>
 8002c56:	462a      	mov	r2, r5
 8002c58:	4604      	mov	r4, r0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f7fe fe41 	bl	80018e4 <memset>
 8002c62:	1c63      	adds	r3, r4, #1
 8002c64:	d016      	beq.n	8002c94 <_get_semihosting_exts+0x50>
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff fe48 	bl	80028fc <findslot>
 8002c6c:	f04f 090c 	mov.w	r9, #12
 8002c70:	4680      	mov	r8, r0
 8002c72:	4648      	mov	r0, r9
 8002c74:	4641      	mov	r1, r8
 8002c76:	beab      	bkpt	0x00ab
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	f7ff fe66 	bl	800294c <checkerror>
 8002c80:	2803      	cmp	r0, #3
 8002c82:	dd02      	ble.n	8002c8a <_get_semihosting_exts+0x46>
 8002c84:	1ec3      	subs	r3, r0, #3
 8002c86:	42ab      	cmp	r3, r5
 8002c88:	dc08      	bgt.n	8002c9c <_get_semihosting_exts+0x58>
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff ff0e 	bl	8002aac <_close>
 8002c90:	f04f 34ff 	mov.w	r4, #4294967295
 8002c94:	4620      	mov	r0, r4
 8002c96:	b003      	add	sp, #12
 8002c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	eb0d 0102 	add.w	r1, sp, r2
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff fe67 	bl	8002976 <_read>
 8002ca8:	2803      	cmp	r0, #3
 8002caa:	ddee      	ble.n	8002c8a <_get_semihosting_exts+0x46>
 8002cac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cb0:	2b53      	cmp	r3, #83	; 0x53
 8002cb2:	d1ea      	bne.n	8002c8a <_get_semihosting_exts+0x46>
 8002cb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002cb8:	2b48      	cmp	r3, #72	; 0x48
 8002cba:	d1e6      	bne.n	8002c8a <_get_semihosting_exts+0x46>
 8002cbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002cc0:	2b46      	cmp	r3, #70	; 0x46
 8002cc2:	d1e2      	bne.n	8002c8a <_get_semihosting_exts+0x46>
 8002cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cc8:	2b42      	cmp	r3, #66	; 0x42
 8002cca:	d1de      	bne.n	8002c8a <_get_semihosting_exts+0x46>
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4639      	mov	r1, r7
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff fe6c 	bl	80029ae <_swilseek>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	dbd7      	blt.n	8002c8a <_get_semihosting_exts+0x46>
 8002cda:	462a      	mov	r2, r5
 8002cdc:	4631      	mov	r1, r6
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7ff fe49 	bl	8002976 <_read>
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7ff fee0 	bl	8002aac <_close>
 8002cec:	4628      	mov	r0, r5
 8002cee:	f7ff fe2d 	bl	800294c <checkerror>
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	e7ce      	b.n	8002c94 <_get_semihosting_exts+0x50>
 8002cf6:	bf00      	nop
 8002cf8:	08002fb3 	.word	0x08002fb3

08002cfc <initialise_semihosting_exts>:
 8002cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cfe:	4d0a      	ldr	r5, [pc, #40]	; (8002d28 <initialise_semihosting_exts+0x2c>)
 8002d00:	4c0a      	ldr	r4, [pc, #40]	; (8002d2c <initialise_semihosting_exts+0x30>)
 8002d02:	2100      	movs	r1, #0
 8002d04:	2201      	movs	r2, #1
 8002d06:	a801      	add	r0, sp, #4
 8002d08:	6029      	str	r1, [r5, #0]
 8002d0a:	6022      	str	r2, [r4, #0]
 8002d0c:	f7ff ff9a 	bl	8002c44 <_get_semihosting_exts>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	dd07      	ble.n	8002d24 <initialise_semihosting_exts+0x28>
 8002d14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d18:	f003 0201 	and.w	r2, r3, #1
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	602a      	str	r2, [r5, #0]
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	b003      	add	sp, #12
 8002d26:	bd30      	pop	{r4, r5, pc}
 8002d28:	2000007c 	.word	0x2000007c
 8002d2c:	20000080 	.word	0x20000080

08002d30 <_has_ext_stdout_stderr>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4c04      	ldr	r4, [pc, #16]	; (8002d44 <_has_ext_stdout_stderr+0x14>)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da01      	bge.n	8002d3e <_has_ext_stdout_stderr+0xe>
 8002d3a:	f7ff ffdf 	bl	8002cfc <initialise_semihosting_exts>
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	bd10      	pop	{r4, pc}
 8002d42:	bf00      	nop
 8002d44:	20000080 	.word	0x20000080

08002d48 <initialise_monitor_handles>:
 8002d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002e00 <initialise_monitor_handles+0xb8>
 8002d52:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d56:	2303      	movs	r3, #3
 8002d58:	2400      	movs	r4, #0
 8002d5a:	9303      	str	r3, [sp, #12]
 8002d5c:	af01      	add	r7, sp, #4
 8002d5e:	9402      	str	r4, [sp, #8]
 8002d60:	2501      	movs	r5, #1
 8002d62:	4628      	mov	r0, r5
 8002d64:	4639      	mov	r1, r7
 8002d66:	beab      	bkpt	0x00ab
 8002d68:	4605      	mov	r5, r0
 8002d6a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002e04 <initialise_monitor_handles+0xbc>
 8002d6e:	4623      	mov	r3, r4
 8002d70:	4c20      	ldr	r4, [pc, #128]	; (8002df4 <initialise_monitor_handles+0xac>)
 8002d72:	f8c8 5000 	str.w	r5, [r8]
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	2b14      	cmp	r3, #20
 8002d82:	d1fa      	bne.n	8002d7a <initialise_monitor_handles+0x32>
 8002d84:	f7ff ffd4 	bl	8002d30 <_has_ext_stdout_stderr>
 8002d88:	4d1b      	ldr	r5, [pc, #108]	; (8002df8 <initialise_monitor_handles+0xb0>)
 8002d8a:	b1d0      	cbz	r0, 8002dc2 <initialise_monitor_handles+0x7a>
 8002d8c:	f04f 0a03 	mov.w	sl, #3
 8002d90:	2304      	movs	r3, #4
 8002d92:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d96:	2601      	movs	r6, #1
 8002d98:	f8cd a00c 	str.w	sl, [sp, #12]
 8002d9c:	9302      	str	r3, [sp, #8]
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4639      	mov	r1, r7
 8002da2:	beab      	bkpt	0x00ab
 8002da4:	4683      	mov	fp, r0
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <initialise_monitor_handles+0xb4>)
 8002da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8002dac:	f8c3 b000 	str.w	fp, [r3]
 8002db0:	2308      	movs	r3, #8
 8002db2:	f8cd a00c 	str.w	sl, [sp, #12]
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	4630      	mov	r0, r6
 8002dba:	4639      	mov	r1, r7
 8002dbc:	beab      	bkpt	0x00ab
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	602e      	str	r6, [r5, #0]
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	bf02      	ittt	eq
 8002dc8:	4b0c      	ldreq	r3, [pc, #48]	; (8002dfc <initialise_monitor_handles+0xb4>)
 8002dca:	681b      	ldreq	r3, [r3, #0]
 8002dcc:	602b      	streq	r3, [r5, #0]
 8002dce:	2600      	movs	r6, #0
 8002dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	6066      	str	r6, [r4, #4]
 8002dd8:	f7ff ffaa 	bl	8002d30 <_has_ext_stdout_stderr>
 8002ddc:	b130      	cbz	r0, 8002dec <initialise_monitor_handles+0xa4>
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <initialise_monitor_handles+0xb4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002de6:	682b      	ldr	r3, [r5, #0]
 8002de8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002dec:	b005      	add	sp, #20
 8002dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	200000e8 	.word	0x200000e8
 8002df8:	200000dc 	.word	0x200000dc
 8002dfc:	200000e4 	.word	0x200000e4
 8002e00:	08002fc9 	.word	0x08002fc9
 8002e04:	200000e0 	.word	0x200000e0

08002e08 <_isatty>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	f7ff fd77 	bl	80028fc <findslot>
 8002e0e:	2509      	movs	r5, #9
 8002e10:	4604      	mov	r4, r0
 8002e12:	b920      	cbnz	r0, 8002e1e <_isatty+0x16>
 8002e14:	f7fe fd2c 	bl	8001870 <__errno>
 8002e18:	6005      	str	r5, [r0, #0]
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
 8002e1e:	4628      	mov	r0, r5
 8002e20:	4621      	mov	r1, r4
 8002e22:	beab      	bkpt	0x00ab
 8002e24:	4604      	mov	r4, r0
 8002e26:	2c01      	cmp	r4, #1
 8002e28:	d0f7      	beq.n	8002e1a <_isatty+0x12>
 8002e2a:	f7fe fd21 	bl	8001870 <__errno>
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4605      	mov	r5, r0
 8002e32:	2613      	movs	r6, #19
 8002e34:	4630      	mov	r0, r6
 8002e36:	4621      	mov	r1, r4
 8002e38:	beab      	bkpt	0x00ab
 8002e3a:	4606      	mov	r6, r0
 8002e3c:	602e      	str	r6, [r5, #0]
 8002e3e:	e7ec      	b.n	8002e1a <_isatty+0x12>

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
