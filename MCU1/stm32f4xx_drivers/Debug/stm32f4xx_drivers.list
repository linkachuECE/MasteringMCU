
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ffc  08001004  00011004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ffc  08000ffc  00011004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ffc  08000ffc  00011004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ffc  08001004  00011004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011004  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000152f  00000000  00000000  00011034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000465  00000000  00000000  00012563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  000129c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00012b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002fb5  00000000  00000000  00012c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a93  00000000  00000000  00015c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ba20  00000000  00000000  00017698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000230b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  00023108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fe4 	.word	0x08000fe4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000fe4 	.word	0x08000fe4

080001e8 <delay>:
#define	ANALOG_PIN4		4

// Arduino led
#define LED_PIN		9

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 20000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <SPI2_GPIO_Inits+0xf8>)
 8000220:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	220f      	movs	r2, #15
 8000226:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2202      	movs	r2, #2
 800022c:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2203      	movs	r2, #3
 8000232:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2200      	movs	r2, #0
 800023e:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2205      	movs	r2, #5
 8000244:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a30      	ldr	r2, [pc, #192]	; (800030c <SPI2_GPIO_Inits+0xf8>)
 800024a:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	220e      	movs	r2, #14
 8000250:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2202      	movs	r2, #2
 8000256:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2203      	movs	r2, #3
 800025c:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2200      	movs	r2, #0
 8000262:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2205      	movs	r2, #5
 800026e:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a26      	ldr	r2, [pc, #152]	; (800030c <SPI2_GPIO_Inits+0xf8>)
 8000274:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	220d      	movs	r2, #13
 800027a:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2202      	movs	r2, #2
 8000280:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2203      	movs	r2, #3
 8000286:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2205      	movs	r2, #5
 800029a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	; (800030c <SPI2_GPIO_Inits+0xf8>)
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	220c      	movs	r2, #12
 80002a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2202      	movs	r2, #2
 80002b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2203      	movs	r2, #3
 80002b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2205      	movs	r2, #5
 80002d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480d      	ldr	r0, [pc, #52]	; (800030c <SPI2_GPIO_Inits+0xf8>)
 80002d8:	f000 f964 	bl	80005a4 <GPIO_PeriClockControl>

	GPIO_Init(&(SPIPort->MOSI));
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fa4c 	bl	800077c <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	330c      	adds	r3, #12
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fa47 	bl	800077c <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3318      	adds	r3, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fa42 	bl	800077c <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3324      	adds	r3, #36	; 0x24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fa3d 	bl	800077c <GPIO_Init>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40020400 	.word	0x40020400

08000310 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	 * - Low Clock polarity, first phase detection
	 * - Hardware controlled slave select
	 * - Single master
	 */

	SPIDevice->pSPIx = SPI2;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a13      	ldr	r2, [pc, #76]	; (8000368 <SPI2_Init+0x58>)
 800031c:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2201      	movs	r2, #1
 8000322:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2201      	movs	r2, #1
 8000328:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV2;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2200      	movs	r2, #0
 800033a:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_HW;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2200      	movs	r2, #0
 8000346:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_LSBFIRST;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2201      	movs	r2, #1
 800034c:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 fce0 	bl	8000d14 <SPI_Init>

	// Enable SSOE so that NSS goes low when SPE goes high
	SPI_SSOEControl(SPIDevice->pSPIx, ENABLE);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2101      	movs	r1, #1
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fd84 	bl	8000e68 <SPI_SSOEControl>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40003800 	.word	0x40003800

0800036c <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* USRPB){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	USRPB->pGPIOx = GPIOA;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <USRBTN_Init+0x40>)
 8000378:	601a      	str	r2, [r3, #0]
	USRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	711a      	strb	r2, [r3, #4]
	USRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	715a      	strb	r2, [r3, #5]
	USRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2202      	movs	r2, #2
 800038a:	719a      	strb	r2, [r3, #6]
	USRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2200      	movs	r2, #0
 8000390:	71da      	strb	r2, [r3, #7]

	GPIO_Init(USRPB);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f9f2 	bl	800077c <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 8000398:	2201      	movs	r2, #1
 800039a:	2101      	movs	r1, #1
 800039c:	2006      	movs	r0, #6
 800039e:	f000 fbad 	bl	8000afc <GPIO_IRQInterruptConfig>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000

080003b0 <SendCmdGetAckByte>:

void SendCmdGetAckByte(SPI_RegDef_t* pSPIx, uint8_t* cmdCode, uint8_t* ackByte){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 80003bc:	23ff      	movs	r3, #255	; 0xff
 80003be:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyReadByte;

	// Send command code
	SPI_SendData(pSPIx, cmdCode, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	68b9      	ldr	r1, [r7, #8]
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f000 fd7f 	bl	8000ec8 <SPI_SendData>

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 80003ca:	f107 0316 	add.w	r3, r7, #22
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	68f8      	ldr	r0, [r7, #12]
 80003d4:	f000 fda9 	bl	8000f2a <SPI_ReceiveData>

	// Send dummy byte so that data can be retrieved from slave
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 80003d8:	f107 0317 	add.w	r3, r7, #23
 80003dc:	2201      	movs	r2, #1
 80003de:	4619      	mov	r1, r3
 80003e0:	68f8      	ldr	r0, [r7, #12]
 80003e2:	f000 fd71 	bl	8000ec8 <SPI_SendData>

	// Read the acknowledge byte
	SPI_ReceiveData(pSPIx, ackByte, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	6879      	ldr	r1, [r7, #4]
 80003ea:	68f8      	ldr	r0, [r7, #12]
 80003ec:	f000 fd9d 	bl	8000f2a <SPI_ReceiveData>
}
 80003f0:	bf00      	nop
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SPI_Verify_Response>:

uint8_t SPI_Verify_Response(uint8_t ackbyte){
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5){
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2bf5      	cmp	r3, #245	; 0xf5
 8000406:	d101      	bne.n	800040c <SPI_Verify_Response+0x14>
		//ack
		return 1;
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <SPI_Verify_Response+0x16>
	}else{
		//nack
		return 0;
 800040c:	2300      	movs	r3, #0
	}
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <main>:

int main(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	b096      	sub	sp, #88	; 0x58
 8000420:	af00      	add	r7, sp, #0

	uint8_t dummyWriteByte = 0xFF;
 8000422:	23ff      	movs	r3, #255	; 0xff
 8000424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t dummyReadByte;

	// Initialize the appropriate GPIO pins on port B
	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 8000428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fef1 	bl	8000214 <SPI2_GPIO_Inits>

	// Initialize the SPI2 peripheral
	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff6a 	bl	8000310 <SPI2_Init>

	// Initialize user button and interrupts
	GPIO_Handle_t USRPB;
	memset(&USRPB, 0, sizeof(USRPB));
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	220c      	movs	r2, #12
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fdc5 	bl	8000fd4 <memset>
	USRBTN_Init(&USRPB);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff8c 	bl	800036c <USRBTN_Init>

	SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fccd 	bl	8000df8 <SPI_PeripheralControl>
		uint8_t cmdCode;
		uint8_t ackByte;
		uint8_t args[2];

		//******** 1. CMD_LED_CTRL *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800045e:	bf00      	nop
 8000460:	2100      	movs	r1, #0
 8000462:	4839      	ldr	r0, [pc, #228]	; (8000548 <main+0x12c>)
 8000464:	f000 fb34 	bl	8000ad0 <GPIO_ReadFromInputPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f8      	beq.n	8000460 <main+0x44>
		delay();
 800046e:	f7ff febb 	bl	80001e8 <delay>

		SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fcbe 	bl	8000df8 <SPI_PeripheralControl>

		cmdCode = COMMAND_LED_CTRL;
 800047c:	2350      	movs	r3, #80	; 0x50
 800047e:	72fb      	strb	r3, [r7, #11]

		SendCmdGetAckByte(SPI2, &cmdCode, &ackByte);
 8000480:	f107 020a 	add.w	r2, r7, #10
 8000484:	f107 030b 	add.w	r3, r7, #11
 8000488:	4619      	mov	r1, r3
 800048a:	4830      	ldr	r0, [pc, #192]	; (800054c <main+0x130>)
 800048c:	f7ff ff90 	bl	80003b0 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 8000490:	7abb      	ldrb	r3, [r7, #10]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffb0 	bl	80003f8 <SPI_Verify_Response>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00a      	beq.n	80004b4 <main+0x98>
			args[0] = LED_PIN;
 800049e:	2309      	movs	r3, #9
 80004a0:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	727b      	strb	r3, [r7, #9]

			SPI_SendData(SPI2, args, 2);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	2202      	movs	r2, #2
 80004ac:	4619      	mov	r1, r3
 80004ae:	4827      	ldr	r0, [pc, #156]	; (800054c <main+0x130>)
 80004b0:	f000 fd0a 	bl	8000ec8 <SPI_SendData>
		}

		//******** 2. CMD_SENSOR_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80004b4:	bf00      	nop
 80004b6:	2100      	movs	r1, #0
 80004b8:	4823      	ldr	r0, [pc, #140]	; (8000548 <main+0x12c>)
 80004ba:	f000 fb09 	bl	8000ad0 <GPIO_ReadFromInputPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f8      	beq.n	80004b6 <main+0x9a>
		delay();
 80004c4:	f7ff fe90 	bl	80001e8 <delay>

		cmdCode = COMMAND_SENSOR_READ;
 80004c8:	2351      	movs	r3, #81	; 0x51
 80004ca:	72fb      	strb	r3, [r7, #11]

		SendCmdGetAckByte(SPI2, &cmdCode, &ackByte);
 80004cc:	f107 020a 	add.w	r2, r7, #10
 80004d0:	f107 030b 	add.w	r3, r7, #11
 80004d4:	4619      	mov	r1, r3
 80004d6:	481d      	ldr	r0, [pc, #116]	; (800054c <main+0x130>)
 80004d8:	f7ff ff6a 	bl	80003b0 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 80004dc:	7abb      	ldrb	r3, [r7, #10]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff8a 	bl	80003f8 <SPI_Verify_Response>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <main+0xe0>
			args[0] = ANALOG_PIN0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	723b      	strb	r3, [r7, #8]

			SPI_SendData(SPI2, args, 1);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	4815      	ldr	r0, [pc, #84]	; (800054c <main+0x130>)
 80004f8:	f000 fce6 	bl	8000ec8 <SPI_SendData>
		}

		// Do dummy read to clear the RXNE register
		SPI_ReceiveData(SPI2, &dummyReadByte, 1);
 80004fc:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <main+0x130>)
 8000506:	f000 fd10 	bl	8000f2a <SPI_ReceiveData>

		// Send a dummy byte, fetch the response from the slave
		SPI_SendData(SPI2, &dummyWriteByte, 1);
 800050a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x130>)
 8000514:	f000 fcd8 	bl	8000ec8 <SPI_SendData>

		uint8_t analogRead;
		SPI_ReceiveData(SPI2, &analogRead, 1);
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <main+0x130>)
 8000520:	f000 fd03 	bl	8000f2a <SPI_ReceiveData>

		delay();
 8000524:	f7ff fe60 	bl	80001e8 <delay>

		while(SPI_GetFlagStatus(mySPIDevice.pSPIx, SPI_BSY_FLAG));
 8000528:	bf00      	nop
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fcb6 	bl	8000ea0 <SPI_GetFlagStatus>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f7      	bne.n	800052a <main+0x10e>

		SPI_PeripheralControl(mySPIDevice.pSPIx, DISABLE);
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fc5a 	bl	8000df8 <SPI_PeripheralControl>
	while(1){
 8000544:	e78b      	b.n	800045e <main+0x42>
 8000546:	bf00      	nop
 8000548:	40020000 	.word	0x40020000
 800054c:	40003800 	.word	0x40003800

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057e:	f000 fd05 	bl	8000f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff ff4b 	bl	800041c <main>

08000586 <LoopForever>:

LoopForever:
    b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000594:	08001004 	.word	0x08001004
  ldr r2, =_sbss
 8000598:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800059c:	2000001c 	.word	0x2000001c

080005a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d162      	bne.n	800067c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a66      	ldr	r2, [pc, #408]	; (8000754 <GPIO_PeriClockControl+0x1b0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80005be:	4b66      	ldr	r3, [pc, #408]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a65      	ldr	r2, [pc, #404]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80005ca:	e0bc      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a63      	ldr	r2, [pc, #396]	; (800075c <GPIO_PeriClockControl+0x1b8>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a5f      	ldr	r2, [pc, #380]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e0:	e0b1      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a5e      	ldr	r2, [pc, #376]	; (8000760 <GPIO_PeriClockControl+0x1bc>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005ea:	4b5b      	ldr	r3, [pc, #364]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a5a      	ldr	r2, [pc, #360]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f6:	e0a6      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a5a      	ldr	r2, [pc, #360]	; (8000764 <GPIO_PeriClockControl+0x1c0>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000600:	4b55      	ldr	r3, [pc, #340]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a54      	ldr	r2, [pc, #336]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060c:	e09b      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a55      	ldr	r2, [pc, #340]	; (8000768 <GPIO_PeriClockControl+0x1c4>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000616:	4b50      	ldr	r3, [pc, #320]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a4f      	ldr	r2, [pc, #316]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000622:	e090      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a51      	ldr	r2, [pc, #324]	; (800076c <GPIO_PeriClockControl+0x1c8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d106      	bne.n	800063a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800062c:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a49      	ldr	r2, [pc, #292]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000638:	e085      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <GPIO_PeriClockControl+0x1cc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d106      	bne.n	8000650 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000642:	4b45      	ldr	r3, [pc, #276]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a44      	ldr	r2, [pc, #272]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064e:	e07a      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a48      	ldr	r2, [pc, #288]	; (8000774 <GPIO_PeriClockControl+0x1d0>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d106      	bne.n	8000666 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800065e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000664:	e06f      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a43      	ldr	r2, [pc, #268]	; (8000778 <GPIO_PeriClockControl+0x1d4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d16b      	bne.n	8000746 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067a:	e064      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d161      	bne.n	8000746 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a33      	ldr	r2, [pc, #204]	; (8000754 <GPIO_PeriClockControl+0x1b0>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d106      	bne.n	8000698 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a32      	ldr	r2, [pc, #200]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000690:	f023 0301 	bic.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000696:	e056      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a30      	ldr	r2, [pc, #192]	; (800075c <GPIO_PeriClockControl+0x1b8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006a6:	f023 0302 	bic.w	r3, r3, #2
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ac:	e04b      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <GPIO_PeriClockControl+0x1bc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006bc:	f023 0304 	bic.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c2:	e040      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <GPIO_PeriClockControl+0x1c0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006d2:	f023 0308 	bic.w	r3, r3, #8
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d8:	e035      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <GPIO_PeriClockControl+0x1c4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006e8:	f023 0310 	bic.w	r3, r3, #16
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ee:	e02a      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <GPIO_PeriClockControl+0x1c8>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 80006fe:	f023 0320 	bic.w	r3, r3, #32
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000704:	e01f      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <GPIO_PeriClockControl+0x1cc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a11      	ldr	r2, [pc, #68]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071a:	e014      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <GPIO_PeriClockControl+0x1d0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800072a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000730:	e009      	b.n	8000746 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <GPIO_PeriClockControl+0x1d4>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d105      	bne.n	8000746 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <GPIO_PeriClockControl+0x1b4>)
 8000740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40021400 	.word	0x40021400
 8000770:	40021800 	.word	0x40021800
 8000774:	40021c00 	.word	0x40021c00
 8000778:	40022000 	.word	0x40022000

0800077c <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff0a 	bl	80005a4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d820      	bhi.n	80007de <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2103      	movs	r1, #3
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	400a      	ands	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	430a      	orrs	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e0d0      	b.n	8000980 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	795b      	ldrb	r3, [r3, #5]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d117      	bne.n	8000816 <GPIO_Init+0x9a>
				// 1. Configure the Falling trigger selection register (FTSR)
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <GPIO_Init+0x19c>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7912      	ldrb	r2, [r2, #4]
 80007ee:	4611      	mov	r1, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	408a      	lsls	r2, r1
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a48      	ldr	r2, [pc, #288]	; (8000918 <GPIO_Init+0x19c>)
 80007f8:	430b      	orrs	r3, r1
 80007fa:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fc:	4b46      	ldr	r3, [pc, #280]	; (8000918 <GPIO_Init+0x19c>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7912      	ldrb	r2, [r2, #4]
 8000804:	4611      	mov	r1, r2
 8000806:	2201      	movs	r2, #1
 8000808:	408a      	lsls	r2, r1
 800080a:	43d2      	mvns	r2, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a42      	ldr	r2, [pc, #264]	; (8000918 <GPIO_Init+0x19c>)
 8000810:	400b      	ands	r3, r1
 8000812:	6093      	str	r3, [r2, #8]
 8000814:	e031      	b.n	800087a <GPIO_Init+0xfe>
			} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b05      	cmp	r3, #5
 800081c:	d117      	bne.n	800084e <GPIO_Init+0xd2>
				// 1. Configure the rising trigger selection register (RTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <GPIO_Init+0x19c>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7912      	ldrb	r2, [r2, #4]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <GPIO_Init+0x19c>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	4b38      	ldr	r3, [pc, #224]	; (8000918 <GPIO_Init+0x19c>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7912      	ldrb	r2, [r2, #4]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	43d2      	mvns	r2, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a34      	ldr	r2, [pc, #208]	; (8000918 <GPIO_Init+0x19c>)
 8000848:	400b      	ands	r3, r1
 800084a:	60d3      	str	r3, [r2, #12]
 800084c:	e015      	b.n	800087a <GPIO_Init+0xfe>
			} else {
				// 1. Configure both registers (RSTR and FTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <GPIO_Init+0x19c>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	7912      	ldrb	r2, [r2, #4]
 8000856:	4611      	mov	r1, r2
 8000858:	2201      	movs	r2, #1
 800085a:	408a      	lsls	r2, r1
 800085c:	4611      	mov	r1, r2
 800085e:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <GPIO_Init+0x19c>)
 8000860:	430b      	orrs	r3, r1
 8000862:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <GPIO_Init+0x19c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <GPIO_Init+0x19c>)
 8000876:	430b      	orrs	r3, r1
 8000878:	60d3      	str	r3, [r2, #12]
			}

			// 2. Configure the GPIO port selection in SYSCFG_EXTICR

			SYSCFG_PCLK_EN();
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <GPIO_Init+0x1a0>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a27      	ldr	r2, [pc, #156]	; (800091c <GPIO_Init+0x1a0>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	74bb      	strb	r3, [r7, #18]

			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <GPIO_Init+0x1a4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d050      	beq.n	8000944 <GPIO_Init+0x1c8>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <GPIO_Init+0x1a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d032      	beq.n	8000912 <GPIO_Init+0x196>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <GPIO_Init+0x1ac>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d02b      	beq.n	800090e <GPIO_Init+0x192>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <GPIO_Init+0x1b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d024      	beq.n	800090a <GPIO_Init+0x18e>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <GPIO_Init+0x1b4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d01d      	beq.n	8000906 <GPIO_Init+0x18a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a19      	ldr	r2, [pc, #100]	; (8000934 <GPIO_Init+0x1b8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d016      	beq.n	8000902 <GPIO_Init+0x186>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <GPIO_Init+0x1bc>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d00f      	beq.n	80008fe <GPIO_Init+0x182>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <GPIO_Init+0x1c0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d008      	beq.n	80008fa <GPIO_Init+0x17e>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <GPIO_Init+0x1c4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <GPIO_Init+0x17a>
 80008f2:	2308      	movs	r3, #8
 80008f4:	e027      	b.n	8000946 <GPIO_Init+0x1ca>
 80008f6:	2300      	movs	r3, #0
 80008f8:	e025      	b.n	8000946 <GPIO_Init+0x1ca>
 80008fa:	2307      	movs	r3, #7
 80008fc:	e023      	b.n	8000946 <GPIO_Init+0x1ca>
 80008fe:	2306      	movs	r3, #6
 8000900:	e021      	b.n	8000946 <GPIO_Init+0x1ca>
 8000902:	2305      	movs	r3, #5
 8000904:	e01f      	b.n	8000946 <GPIO_Init+0x1ca>
 8000906:	2304      	movs	r3, #4
 8000908:	e01d      	b.n	8000946 <GPIO_Init+0x1ca>
 800090a:	2303      	movs	r3, #3
 800090c:	e01b      	b.n	8000946 <GPIO_Init+0x1ca>
 800090e:	2302      	movs	r3, #2
 8000910:	e019      	b.n	8000946 <GPIO_Init+0x1ca>
 8000912:	2301      	movs	r3, #1
 8000914:	e017      	b.n	8000946 <GPIO_Init+0x1ca>
 8000916:	bf00      	nop
 8000918:	40013c00 	.word	0x40013c00
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400
 8000928:	40020800 	.word	0x40020800
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40021000 	.word	0x40021000
 8000934:	40021400 	.word	0x40021400
 8000938:	40021800 	.word	0x40021800
 800093c:	40021c00 	.word	0x40021c00
 8000940:	40022000 	.word	0x40022000
 8000944:	2300      	movs	r3, #0
 8000946:	747b      	strb	r3, [r7, #17]

			SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000948:	4a5f      	ldr	r2, [pc, #380]	; (8000ac8 <GPIO_Init+0x34c>)
 800094a:	7cfb      	ldrb	r3, [r7, #19]
 800094c:	3302      	adds	r3, #2
 800094e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000952:	7c79      	ldrb	r1, [r7, #17]
 8000954:	7cbb      	ldrb	r3, [r7, #18]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	4618      	mov	r0, r3
 800095e:	495a      	ldr	r1, [pc, #360]	; (8000ac8 <GPIO_Init+0x34c>)
 8000960:	7cfb      	ldrb	r3, [r7, #19]
 8000962:	4302      	orrs	r2, r0
 8000964:	3302      	adds	r3, #2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// 3. Enable the EXTI interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800096a:	4b58      	ldr	r3, [pc, #352]	; (8000acc <GPIO_Init+0x350>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	7912      	ldrb	r2, [r2, #4]
 8000972:	4611      	mov	r1, r2
 8000974:	2201      	movs	r2, #1
 8000976:	408a      	lsls	r2, r1
 8000978:	4611      	mov	r1, r2
 800097a:	4a54      	ldr	r2, [pc, #336]	; (8000acc <GPIO_Init+0x350>)
 800097c:	430b      	orrs	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	799b      	ldrb	r3, [r3, #6]
 8000988:	461a      	mov	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2103      	movs	r1, #3
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	400a      	ands	r2, r1
 80009b2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6899      	ldr	r1, [r3, #8]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	79db      	ldrb	r3, [r3, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2103      	movs	r1, #3
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4619      	mov	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	400a      	ands	r2, r1
 80009f6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68d9      	ldr	r1, [r3, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	430a      	orrs	r2, r1
 8000a06:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11f      	bne.n	8000a54 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	408b      	lsls	r3, r1
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6859      	ldr	r1, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d131      	bne.n	8000ac0 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	7c3a      	ldrb	r2, [r7, #16]
 8000a74:	3208      	adds	r2, #8
 8000a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	7c3a      	ldrb	r2, [r7, #16]
 8000a8e:	4001      	ands	r1, r0
 8000a90:	3208      	adds	r2, #8
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7c3a      	ldrb	r2, [r7, #16]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a5b      	ldrb	r3, [r3, #9]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7c3a      	ldrb	r2, [r7, #16]
 8000ab8:	4301      	orrs	r1, r0
 8000aba:	3208      	adds	r2, #8
 8000abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691a      	ldr	r2, [r3, #16]
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
	return value;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d133      	bne.n	8000b7a <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b1f      	cmp	r3, #31
 8000b16:	d80a      	bhi.n	8000b2e <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <GPIO_IRQInterruptConfig+0xf8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <GPIO_IRQInterruptConfig+0xf8>)
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e058      	b.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b1f      	cmp	r3, #31
 8000b32:	d90f      	bls.n	8000b54 <GPIO_IRQInterruptConfig+0x58>
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b3f      	cmp	r3, #63	; 0x3f
 8000b38:	d80c      	bhi.n	8000b54 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <GPIO_IRQInterruptConfig+0xfc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	f002 021f 	and.w	r2, r2, #31
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	; (8000bf8 <GPIO_IRQInterruptConfig+0xfc>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e045      	b.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b3f      	cmp	r3, #63	; 0x3f
 8000b58:	d942      	bls.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b5f      	cmp	r3, #95	; 0x5f
 8000b5e:	d83f      	bhi.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <GPIO_IRQInterruptConfig+0x100>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	f002 021f 	and.w	r2, r2, #31
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	4611      	mov	r1, r2
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <GPIO_IRQInterruptConfig+0x100>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e032      	b.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b1f      	cmp	r3, #31
 8000b7e:	d80a      	bhi.n	8000b96 <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <GPIO_IRQInterruptConfig+0x104>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <GPIO_IRQInterruptConfig+0x104>)
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e024      	b.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b1f      	cmp	r3, #31
 8000b9a:	d90f      	bls.n	8000bbc <GPIO_IRQInterruptConfig+0xc0>
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba0:	d80c      	bhi.n	8000bbc <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <GPIO_IRQInterruptConfig+0x108>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	f002 021f 	and.w	r2, r2, #31
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <GPIO_IRQInterruptConfig+0x108>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e011      	b.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc0:	d90e      	bls.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b5f      	cmp	r3, #95	; 0x5f
 8000bc6:	d80b      	bhi.n	8000be0 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <GPIO_IRQInterruptConfig+0x10c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	f002 021f 	and.w	r2, r2, #31
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <GPIO_IRQInterruptConfig+0x10c>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f811 	bl	8000c0c <GPIO_IRQPriorityConfig>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000e104 	.word	0xe000e104
 8000bfc:	e000e108 	.word	0xe000e108
 8000c00:	e000e180 	.word	0xe000e180
 8000c04:	e000e184 	.word	0xe000e184
 8000c08:	e000e188 	.word	0xe000e188

08000c0c <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c38:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000c3c:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d120      	bne.n	8000cb0 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <SPI_PeriClockControl+0xa8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d106      	bne.n	8000c84 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8000c82:	e038      	b.n	8000cf6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <SPI_PeriClockControl+0xb0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d106      	bne.n	8000c9a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c98:	e02d      	b.n	8000cf6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <SPI_PeriClockControl+0xb4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d129      	bne.n	8000cf6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cae:	e022      	b.n	8000cf6 <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d11f      	bne.n	8000cf6 <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <SPI_PeriClockControl+0xa8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d106      	bne.n	8000ccc <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000cca:	e014      	b.n	8000cf6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <SPI_PeriClockControl+0xb0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d106      	bne.n	8000ce2 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ce0:	e009      	b.n	8000cf6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SPI_PeriClockControl+0xb4>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d105      	bne.n	8000cf6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <SPI_PeriClockControl+0xac>)
 8000cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40003800 	.word	0x40003800
 8000d10:	40003c00 	.word	0x40003c00

08000d14 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff9a 	bl	8000c5c <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	795b      	ldrb	r3, [r3, #5]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d104      	bne.n	8000d4c <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e014      	b.n	8000d76 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d104      	bne.n	8000d5e <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e00b      	b.n	8000d76 <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d107      	bne.n	8000d76 <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d6c:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d74:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	79db      	ldrb	r3, [r3, #7]
 8000d88:	02db      	lsls	r3, r3, #11
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7a1b      	ldrb	r3, [r3, #8]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	461a      	mov	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7a5b      	ldrb	r3, [r3, #9]
 8000da4:	461a      	mov	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7a9b      	ldrb	r3, [r3, #10]
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
	SPI_SSIControl(pSPIHandle->pSPIx, ENABLE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f835 	bl	8000e30 <SPI_SSIControl>

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7adb      	ldrb	r3, [r3, #11]
 8000dca:	01db      	lsls	r3, r3, #7
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f804 	bl	8000df8 <SPI_PeripheralControl>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d106      	bne.n	8000e18 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 8000e16:	e005      	b.n	8000e24 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SPI_SSIControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSIControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <SPI_SSIControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);			// Pull SSI high
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
}
 8000e4e:	e005      	b.n	8000e5c <SPI_SSIControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SPI_SSOEControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f043 0204 	orr.w	r2, r3, #4
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
}
 8000e86:	e005      	b.n	8000e94 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f023 0204 	bic.w	r2, r3, #4
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	605a      	str	r2, [r3, #4]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	// uint32_t dummy;

	while(len > 0){
 8000ed4:	e021      	b.n	8000f1a <SPI_SendData+0x52>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 8000ed6:	bf00      	nop
 8000ed8:	2102      	movs	r1, #2
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff ffe0 	bl	8000ea0 <SPI_GetFlagStatus>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f8      	beq.n	8000ed8 <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <SPI_SendData+0x3c>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3302      	adds	r3, #2
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e007      	b.n	8000f14 <SPI_SendData+0x4c>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1da      	bne.n	8000ed6 <SPI_SendData+0xe>
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <SPI_ReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t* pRxBuffer, uint32_t len){
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	while(len > 0){
 8000f36:	e021      	b.n	8000f7c <SPI_ReceiveData+0x52>
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
 8000f38:	bf00      	nop
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ffaf 	bl	8000ea0 <SPI_GetFlagStatus>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f8      	beq.n	8000f3a <SPI_ReceiveData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <SPI_ReceiveData+0x3c>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	801a      	strh	r2, [r3, #0]
			pRxBuffer += 2;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3302      	adds	r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e007      	b.n	8000f76 <SPI_ReceiveData+0x4c>
		} else {
			*((uint8_t*)pRxBuffer) = pSPIx->DR;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1da      	bne.n	8000f38 <SPI_ReceiveData+0xe>
	}
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <__libc_init_array>:
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4d0d      	ldr	r5, [pc, #52]	; (8000fc4 <__libc_init_array+0x38>)
 8000f90:	4c0d      	ldr	r4, [pc, #52]	; (8000fc8 <__libc_init_array+0x3c>)
 8000f92:	1b64      	subs	r4, r4, r5
 8000f94:	10a4      	asrs	r4, r4, #2
 8000f96:	2600      	movs	r6, #0
 8000f98:	42a6      	cmp	r6, r4
 8000f9a:	d109      	bne.n	8000fb0 <__libc_init_array+0x24>
 8000f9c:	4d0b      	ldr	r5, [pc, #44]	; (8000fcc <__libc_init_array+0x40>)
 8000f9e:	4c0c      	ldr	r4, [pc, #48]	; (8000fd0 <__libc_init_array+0x44>)
 8000fa0:	f000 f820 	bl	8000fe4 <_init>
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	10a4      	asrs	r4, r4, #2
 8000fa8:	2600      	movs	r6, #0
 8000faa:	42a6      	cmp	r6, r4
 8000fac:	d105      	bne.n	8000fba <__libc_init_array+0x2e>
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb4:	4798      	blx	r3
 8000fb6:	3601      	adds	r6, #1
 8000fb8:	e7ee      	b.n	8000f98 <__libc_init_array+0xc>
 8000fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fbe:	4798      	blx	r3
 8000fc0:	3601      	adds	r6, #1
 8000fc2:	e7f2      	b.n	8000faa <__libc_init_array+0x1e>
 8000fc4:	08000ffc 	.word	0x08000ffc
 8000fc8:	08000ffc 	.word	0x08000ffc
 8000fcc:	08000ffc 	.word	0x08000ffc
 8000fd0:	08001000 	.word	0x08001000

08000fd4 <memset>:
 8000fd4:	4402      	add	r2, r0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d100      	bne.n	8000fde <memset+0xa>
 8000fdc:	4770      	bx	lr
 8000fde:	f803 1b01 	strb.w	r1, [r3], #1
 8000fe2:	e7f9      	b.n	8000fd8 <memset+0x4>

08000fe4 <_init>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr

08000ff0 <_fini>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr
