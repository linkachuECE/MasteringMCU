
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e38  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fec  08000fec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000028  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001430  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052e  00000000  00000000  00021478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000219a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000120  00000000  00000000  00021b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000303f  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a74  00000000  00000000  00024c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c2b9  00000000  00000000  000266d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003298c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b4  00000000  00000000  000329dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fc8 	.word	0x08000fc8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000fc8 	.word	0x08000fc8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
} I2CGPIOHandle_t;

// Global handle for use with the interrupt
I2C_Handle_t myI2CHandle;

void delay(uint16_t ms){
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i < (ms*1000); i++);
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	e002      	b.n	800020e <delay+0x16>
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	3301      	adds	r3, #1
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000214:	fb02 f303 	mul.w	r3, r2, r3
 8000218:	461a      	mov	r2, r3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4293      	cmp	r3, r2
 800021e:	d3f3      	bcc.n	8000208 <delay+0x10>
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <I2C1_GPIOInits>:

void I2C1_GPIOInits(I2CGPIOHandle_t *pI2CGPIOHandle){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	pI2CGPIOHandle->SCL.pGPIOx = GPIOB;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <I2C1_GPIOInits+0x78>)
 800023c:	60da      	str	r2, [r3, #12]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2206      	movs	r2, #6
 8000242:	741a      	strb	r2, [r3, #16]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2202      	movs	r2, #2
 8000248:	745a      	strb	r2, [r3, #17]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2204      	movs	r2, #4
 800024e:	755a      	strb	r2, [r3, #21]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2201      	movs	r2, #1
 8000254:	751a      	strb	r2, [r3, #20]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2200      	movs	r2, #0
 800025a:	74da      	strb	r2, [r3, #19]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2202      	movs	r2, #2
 8000260:	749a      	strb	r2, [r3, #18]

	pI2CGPIOHandle->SDA.pGPIOx = GPIOB;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <I2C1_GPIOInits+0x78>)
 8000266:	601a      	str	r2, [r3, #0]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2207      	movs	r2, #7
 800026c:	711a      	strb	r2, [r3, #4]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2202      	movs	r2, #2
 8000272:	715a      	strb	r2, [r3, #5]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2204      	movs	r2, #4
 8000278:	725a      	strb	r2, [r3, #9]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2201      	movs	r2, #1
 800027e:	721a      	strb	r2, [r3, #8]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	71da      	strb	r2, [r3, #7]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2202      	movs	r2, #2
 800028a:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&(pI2CGPIOHandle->SDA));
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f9a2 	bl	80005d8 <GPIO_Init>
	GPIO_Init(&(pI2CGPIOHandle->SCL));
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	330c      	adds	r3, #12
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f99d 	bl	80005d8 <GPIO_Init>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020400 	.word	0x40020400

080002ac <I2C1_Init>:

void I2C1_Init(I2C_Handle_t *pI2CHandle){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx = I2C1;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <I2C1_Init+0x34>)
 80002b8:	601a      	str	r2, [r3, #0]
	pI2CHandle->I2C_Config.AckControl = I2C_ACK_ENABLE;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2201      	movs	r2, #1
 80002be:	725a      	strb	r2, [r3, #9]
	pI2CHandle->I2C_Config.DeviceAddress = 0x3F;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	223f      	movs	r2, #63	; 0x3f
 80002c4:	721a      	strb	r2, [r3, #8]
	pI2CHandle->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	729a      	strb	r2, [r3, #10]
	pI2CHandle->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <I2C1_Init+0x38>)
 80002d0:	605a      	str	r2, [r3, #4]

	I2C_Init(pI2CHandle);
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 fcfe 	bl	8000cd4 <I2C_Init>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40005400 	.word	0x40005400
 80002e4:	000186a0 	.word	0x000186a0

080002e8 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* pUSRPB){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	pUSRPB->pGPIOx = GPIOA;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <USRBTN_Init+0x40>)
 80002f4:	601a      	str	r2, [r3, #0]
	pUSRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	711a      	strb	r2, [r3, #4]
	pUSRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2205      	movs	r2, #5
 8000300:	715a      	strb	r2, [r3, #5]
	pUSRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2202      	movs	r2, #2
 8000306:	719a      	strb	r2, [r3, #6]
	pUSRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]

	GPIO_Init(pUSRPB);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 f962 	bl	80005d8 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	2006      	movs	r0, #6
 800031a:	f000 fb0b 	bl	8000934 <GPIO_IRQInterruptConfig>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000

0800032c <sendMessage>:

void sendMessage(){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	char* message = "Yo Janiyah";
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <sendMessage+0x3c>)
 8000334:	607b      	str	r3, [r7, #4]

	// Enable I2C1
	I2C_PeripheralControl(myI2CHandle.pI2Cx, ENABLE);
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <sendMessage+0x40>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2101      	movs	r1, #1
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fe02 	bl	8000f46 <I2C_PeripheralControl>

	I2C_MasterSendData(&myI2CHandle, (uint8_t*)message, strlen(message), SLAVEADDR);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff50 	bl	80001e8 <strlen>
 8000348:	4602      	mov	r2, r0
 800034a:	2368      	movs	r3, #104	; 0x68
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	4807      	ldr	r0, [pc, #28]	; (800036c <sendMessage+0x40>)
 8000350:	f000 fd96 	bl	8000e80 <I2C_MasterSendData>

	I2C_PeripheralControl(myI2CHandle.pI2Cx, DISABLE);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <sendMessage+0x40>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fdf3 	bl	8000f46 <I2C_PeripheralControl>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	08000fe0 	.word	0x08000fe0
 800036c:	20000034 	.word	0x20000034

08000370 <main>:

int main(){
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0
	// Initialize the GPIO's to be used for I2C
	I2CGPIOHandle_t I2C1GPIOs;
	I2C1_GPIOInits(&I2C1GPIOs);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff58 	bl	8000230 <I2C1_GPIOInits>

	// Initialize I2C1 itself
	I2C1_Init(&myI2CHandle);
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <main+0x20>)
 8000382:	f7ff ff93 	bl	80002ac <I2C1_Init>

	// Initialize push button
	GPIO_Handle_t USRPB;
	USRBTN_Init(&USRPB);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ffad 	bl	80002e8 <USRBTN_Init>

	while(1);
 800038e:	e7fe      	b.n	800038e <main+0x1e>
 8000390:	20000034 	.word	0x20000034

08000394 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	delay(200);
 8000398:	20c8      	movs	r0, #200	; 0xc8
 800039a:	f7ff ff2d 	bl	80001f8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fb78 	bl	8000a94 <GPIO_IRQHandling>
	sendMessage();
 80003a4:	f7ff ffc2 	bl	800032c <sendMessage>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 fdd1 	bl	8000f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ffc7 	bl	8000370 <main>

080003e2 <LoopForever>:

LoopForever:
    b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003f0:	08000ff4 	.word	0x08000ff4
  ldr r2, =_sbss
 80003f4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003f8:	20000040 	.word	0x20000040

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d162      	bne.n	80004d8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a66      	ldr	r2, [pc, #408]	; (80005b0 <GPIO_PeriClockControl+0x1b0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a65      	ldr	r2, [pc, #404]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 8000426:	e0bc      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a63      	ldr	r2, [pc, #396]	; (80005b8 <GPIO_PeriClockControl+0x1b8>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000430:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a5f      	ldr	r2, [pc, #380]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e0b1      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a5e      	ldr	r2, [pc, #376]	; (80005bc <GPIO_PeriClockControl+0x1bc>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000446:	4b5b      	ldr	r3, [pc, #364]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a5a      	ldr	r2, [pc, #360]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e0a6      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a5a      	ldr	r2, [pc, #360]	; (80005c0 <GPIO_PeriClockControl+0x1c0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800045c:	4b55      	ldr	r3, [pc, #340]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a54      	ldr	r2, [pc, #336]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e09b      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a55      	ldr	r2, [pc, #340]	; (80005c4 <GPIO_PeriClockControl+0x1c4>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000472:	4b50      	ldr	r3, [pc, #320]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a4f      	ldr	r2, [pc, #316]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000478:	f043 0310 	orr.w	r3, r3, #16
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e090      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a51      	ldr	r2, [pc, #324]	; (80005c8 <GPIO_PeriClockControl+0x1c8>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000488:	4b4a      	ldr	r3, [pc, #296]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a49      	ldr	r2, [pc, #292]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e085      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a4c      	ldr	r2, [pc, #304]	; (80005cc <GPIO_PeriClockControl+0x1cc>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a44      	ldr	r2, [pc, #272]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	e07a      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a48      	ldr	r2, [pc, #288]	; (80005d0 <GPIO_PeriClockControl+0x1d0>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004b4:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a3e      	ldr	r2, [pc, #248]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c0:	e06f      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a43      	ldr	r2, [pc, #268]	; (80005d4 <GPIO_PeriClockControl+0x1d4>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d16b      	bne.n	80005a2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a39      	ldr	r2, [pc, #228]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d6:	e064      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d161      	bne.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <GPIO_PeriClockControl+0x1b0>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a32      	ldr	r2, [pc, #200]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f2:	e056      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <GPIO_PeriClockControl+0x1b8>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d106      	bne.n	800050a <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000502:	f023 0302 	bic.w	r3, r3, #2
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000508:	e04b      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <GPIO_PeriClockControl+0x1bc>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d106      	bne.n	8000520 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000518:	f023 0304 	bic.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051e:	e040      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <GPIO_PeriClockControl+0x1c0>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d106      	bne.n	8000536 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800052e:	f023 0308 	bic.w	r3, r3, #8
 8000532:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000534:	e035      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <GPIO_PeriClockControl+0x1c4>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d106      	bne.n	800054c <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000544:	f023 0310 	bic.w	r3, r3, #16
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054a:	e02a      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <GPIO_PeriClockControl+0x1c8>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d106      	bne.n	8000562 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800055a:	f023 0320 	bic.w	r3, r3, #32
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000560:	e01f      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <GPIO_PeriClockControl+0x1cc>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000576:	e014      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <GPIO_PeriClockControl+0x1d0>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058c:	e009      	b.n	80005a2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <GPIO_PeriClockControl+0x1d4>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d105      	bne.n	80005a2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <GPIO_PeriClockControl+0x1b4>)
 800059c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020800 	.word	0x40020800
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40021400 	.word	0x40021400
 80005cc:	40021800 	.word	0x40021800
 80005d0:	40021c00 	.word	0x40021c00
 80005d4:	40022000 	.word	0x40022000

080005d8 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2101      	movs	r1, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff0a 	bl	8000400 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d820      	bhi.n	800063a <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	2103      	movs	r1, #3
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	43db      	mvns	r3, r3
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	400a      	ands	r2, r1
 8000626:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6819      	ldr	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e0d0      	b.n	80007dc <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	795b      	ldrb	r3, [r3, #5]
 800063e:	2b04      	cmp	r3, #4
 8000640:	d117      	bne.n	8000672 <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000642:	4b4c      	ldr	r3, [pc, #304]	; (8000774 <GPIO_Init+0x19c>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	4611      	mov	r1, r2
 8000652:	4a48      	ldr	r2, [pc, #288]	; (8000774 <GPIO_Init+0x19c>)
 8000654:	430b      	orrs	r3, r1
 8000656:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <GPIO_Init+0x19c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	7912      	ldrb	r2, [r2, #4]
 8000660:	4611      	mov	r1, r2
 8000662:	2201      	movs	r2, #1
 8000664:	408a      	lsls	r2, r1
 8000666:	43d2      	mvns	r2, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a42      	ldr	r2, [pc, #264]	; (8000774 <GPIO_Init+0x19c>)
 800066c:	400b      	ands	r3, r1
 800066e:	6093      	str	r3, [r2, #8]
 8000670:	e031      	b.n	80006d6 <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	795b      	ldrb	r3, [r3, #5]
 8000676:	2b05      	cmp	r3, #5
 8000678:	d117      	bne.n	80006aa <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <GPIO_Init+0x19c>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	7912      	ldrb	r2, [r2, #4]
 8000682:	4611      	mov	r1, r2
 8000684:	2201      	movs	r2, #1
 8000686:	408a      	lsls	r2, r1
 8000688:	4611      	mov	r1, r2
 800068a:	4a3a      	ldr	r2, [pc, #232]	; (8000774 <GPIO_Init+0x19c>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000690:	4b38      	ldr	r3, [pc, #224]	; (8000774 <GPIO_Init+0x19c>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	7912      	ldrb	r2, [r2, #4]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	43d2      	mvns	r2, r2
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <GPIO_Init+0x19c>)
 80006a4:	400b      	ands	r3, r1
 80006a6:	60d3      	str	r3, [r2, #12]
 80006a8:	e015      	b.n	80006d6 <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <GPIO_Init+0x19c>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	7912      	ldrb	r2, [r2, #4]
 80006b2:	4611      	mov	r1, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	408a      	lsls	r2, r1
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <GPIO_Init+0x19c>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <GPIO_Init+0x19c>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	7912      	ldrb	r2, [r2, #4]
 80006c8:	4611      	mov	r1, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	408a      	lsls	r2, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <GPIO_Init+0x19c>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <GPIO_Init+0x1a0>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a27      	ldr	r2, [pc, #156]	; (8000778 <GPIO_Init+0x1a0>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	089b      	lsrs	r3, r3, #2
 80006e8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <GPIO_Init+0x1a4>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d050      	beq.n	80007a0 <GPIO_Init+0x1c8>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <GPIO_Init+0x1a8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d032      	beq.n	800076e <GPIO_Init+0x196>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <GPIO_Init+0x1ac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d02b      	beq.n	800076a <GPIO_Init+0x192>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <GPIO_Init+0x1b0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d024      	beq.n	8000766 <GPIO_Init+0x18e>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1a      	ldr	r2, [pc, #104]	; (800078c <GPIO_Init+0x1b4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d01d      	beq.n	8000762 <GPIO_Init+0x18a>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <GPIO_Init+0x1b8>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d016      	beq.n	800075e <GPIO_Init+0x186>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <GPIO_Init+0x1bc>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d00f      	beq.n	800075a <GPIO_Init+0x182>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <GPIO_Init+0x1c0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d008      	beq.n	8000756 <GPIO_Init+0x17e>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <GPIO_Init+0x1c4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d101      	bne.n	8000752 <GPIO_Init+0x17a>
 800074e:	2308      	movs	r3, #8
 8000750:	e027      	b.n	80007a2 <GPIO_Init+0x1ca>
 8000752:	2300      	movs	r3, #0
 8000754:	e025      	b.n	80007a2 <GPIO_Init+0x1ca>
 8000756:	2307      	movs	r3, #7
 8000758:	e023      	b.n	80007a2 <GPIO_Init+0x1ca>
 800075a:	2306      	movs	r3, #6
 800075c:	e021      	b.n	80007a2 <GPIO_Init+0x1ca>
 800075e:	2305      	movs	r3, #5
 8000760:	e01f      	b.n	80007a2 <GPIO_Init+0x1ca>
 8000762:	2304      	movs	r3, #4
 8000764:	e01d      	b.n	80007a2 <GPIO_Init+0x1ca>
 8000766:	2303      	movs	r3, #3
 8000768:	e01b      	b.n	80007a2 <GPIO_Init+0x1ca>
 800076a:	2302      	movs	r3, #2
 800076c:	e019      	b.n	80007a2 <GPIO_Init+0x1ca>
 800076e:	2301      	movs	r3, #1
 8000770:	e017      	b.n	80007a2 <GPIO_Init+0x1ca>
 8000772:	bf00      	nop
 8000774:	40013c00 	.word	0x40013c00
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40020400 	.word	0x40020400
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40021000 	.word	0x40021000
 8000790:	40021400 	.word	0x40021400
 8000794:	40021800 	.word	0x40021800
 8000798:	40021c00 	.word	0x40021c00
 800079c:	40022000 	.word	0x40022000
 80007a0:	2300      	movs	r3, #0
 80007a2:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80007a4:	4a61      	ldr	r2, [pc, #388]	; (800092c <GPIO_Init+0x354>)
 80007a6:	7cfb      	ldrb	r3, [r7, #19]
 80007a8:	3302      	adds	r3, #2
 80007aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ae:	7c79      	ldrb	r1, [r7, #17]
 80007b0:	7cbb      	ldrb	r3, [r7, #18]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	495c      	ldr	r1, [pc, #368]	; (800092c <GPIO_Init+0x354>)
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	4302      	orrs	r2, r0
 80007c0:	3302      	adds	r3, #2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <GPIO_Init+0x358>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	7912      	ldrb	r2, [r2, #4]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a56      	ldr	r2, [pc, #344]	; (8000930 <GPIO_Init+0x358>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	799b      	ldrb	r3, [r3, #6]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	2103      	movs	r1, #3
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6899      	ldr	r1, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	430a      	orrs	r2, r1
 800081e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	79db      	ldrb	r3, [r3, #7]
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2103      	movs	r1, #3
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68d9      	ldr	r1, [r3, #12]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	430a      	orrs	r2, r1
 8000862:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d003      	beq.n	8000878 <GPIO_Init+0x2a0>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d11f      	bne.n	80008b8 <GPIO_Init+0x2e0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	4619      	mov	r1, r3
 8000894:	2301      	movs	r3, #1
 8000896:	408b      	lsls	r3, r1
 8000898:	43db      	mvns	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	400a      	ands	r2, r1
 80008a2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6859      	ldr	r1, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]
		temp = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d131      	bne.n	8000924 <GPIO_Init+0x34c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7c3a      	ldrb	r2, [r7, #16]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	7c3a      	ldrb	r2, [r7, #16]
 80008f2:	4001      	ands	r1, r0
 80008f4:	3208      	adds	r2, #8
 80008f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	7c3a      	ldrb	r2, [r7, #16]
 8000900:	3208      	adds	r2, #8
 8000902:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a5b      	ldrb	r3, [r3, #9]
 800090a:	461a      	mov	r2, r3
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	4618      	mov	r0, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	7c3a      	ldrb	r2, [r7, #16]
 800091c:	4301      	orrs	r1, r0
 800091e:	3208      	adds	r2, #8
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013800 	.word	0x40013800
 8000930:	40013c00 	.word	0x40013c00

08000934 <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d133      	bne.n	80009b2 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b1f      	cmp	r3, #31
 800094e:	d80a      	bhi.n	8000966 <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <GPIO_IRQInterruptConfig+0xf8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <GPIO_IRQInterruptConfig+0xf8>)
 8000960:	430b      	orrs	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e058      	b.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b1f      	cmp	r3, #31
 800096a:	d90f      	bls.n	800098c <GPIO_IRQInterruptConfig+0x58>
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b3f      	cmp	r3, #63	; 0x3f
 8000970:	d80c      	bhi.n	800098c <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <GPIO_IRQInterruptConfig+0xfc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	f002 021f 	and.w	r2, r2, #31
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <GPIO_IRQInterruptConfig+0xfc>)
 8000986:	430b      	orrs	r3, r1
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e045      	b.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b3f      	cmp	r3, #63	; 0x3f
 8000990:	d942      	bls.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b5f      	cmp	r3, #95	; 0x5f
 8000996:	d83f      	bhi.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <GPIO_IRQInterruptConfig+0x100>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	f002 021f 	and.w	r2, r2, #31
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <GPIO_IRQInterruptConfig+0x100>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e032      	b.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	d80a      	bhi.n	80009ce <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <GPIO_IRQInterruptConfig+0x104>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <GPIO_IRQInterruptConfig+0x104>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	e024      	b.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b1f      	cmp	r3, #31
 80009d2:	d90f      	bls.n	80009f4 <GPIO_IRQInterruptConfig+0xc0>
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b3f      	cmp	r3, #63	; 0x3f
 80009d8:	d80c      	bhi.n	80009f4 <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <GPIO_IRQInterruptConfig+0x108>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	f002 021f 	and.w	r2, r2, #31
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <GPIO_IRQInterruptConfig+0x108>)
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e011      	b.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b3f      	cmp	r3, #63	; 0x3f
 80009f8:	d90e      	bls.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b5f      	cmp	r3, #95	; 0x5f
 80009fe:	d80b      	bhi.n	8000a18 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <GPIO_IRQInterruptConfig+0x10c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	f002 021f 	and.w	r2, r2, #31
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <GPIO_IRQInterruptConfig+0x10c>)
 8000a14:	430b      	orrs	r3, r1
 8000a16:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f811 	bl	8000a44 <GPIO_IRQPriorityConfig>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000e104 	.word	0xe000e104
 8000a34:	e000e108 	.word	0xe000e108
 8000a38:	e000e180 	.word	0xe000e180
 8000a3c:	e000e184 	.word	0xe000e184
 8000a40:	e000e188 	.word	0xe000e188

08000a44 <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	3304      	adds	r3, #4
 8000a66:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a70:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a74:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	7b7b      	ldrb	r3, [r7, #13]
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	431a      	orrs	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <GPIO_IRQHandling>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQHandling(uint8_t pinNumber){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << pinNumber)){
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <GPIO_IRQHandling+0x3c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	4013      	ands	r3, r2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d009      	beq.n	8000ac4 <GPIO_IRQHandling+0x30>
		// Clear the pending register by writing 1 to the corresponding bit
		EXTI->PR |= (1 << pinNumber);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <GPIO_IRQHandling+0x3c>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <GPIO_IRQHandling+0x3c>)
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6153      	str	r3, [r2, #20]
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40013c00 	.word	0x40013c00

08000ad4 <I2C_GenerateStartCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <I2C_GenerateStopCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <I2C_ExecuteAddressPhase>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t RorW){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
 8000b20:	4613      	mov	r3, r2
 8000b22:	70bb      	strb	r3, [r7, #2]
	if (RorW == READ)
 8000b24:	78bb      	ldrb	r3, [r7, #2]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d107      	bne.n	8000b3a <I2C_ExecuteAddressPhase+0x26>
		pI2Cx->DR = ((slaveAddr << 1) | (0b00000001));
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	461a      	mov	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	611a      	str	r2, [r3, #16]
	else if (RorW == WRITE)
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
}
 8000b38:	e007      	b.n	8000b4a <I2C_ExecuteAddressPhase+0x36>
	else if (RorW == WRITE)
 8000b3a:	78bb      	ldrb	r3, [r7, #2]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <I2C_ExecuteAddressPhase+0x36>
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <I2C_ClearADDRFlag>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	uint32_t dummy;
	dummy = pI2Cx->SR1;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	60fb      	str	r3, [r7, #12]
	dummy = pI2Cx->SR2;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	60fb      	str	r3, [r7, #12]
	(void)dummy;
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <I2C_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d120      	bne.n	8000bcc <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DI();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DI();
	}
}
 8000b9e:	e038      	b.n	8000c12 <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <I2C_PeriClockControl+0xb0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb4:	e02d      	b.n	8000c12 <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <I2C_PeriClockControl+0xb4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d129      	bne.n	8000c12 <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bca:	e022      	b.n	8000c12 <I2C_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11f      	bne.n	8000c12 <I2C_PeriClockControl+0x9a>
		if(pI2Cx == I2C1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <I2C_PeriClockControl+0x70>
			I2C1_PCLK_DI();
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be6:	e014      	b.n	8000c12 <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <I2C_PeriClockControl+0xb0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d106      	bne.n	8000bfe <I2C_PeriClockControl+0x86>
			I2C2_PCLK_DI();
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bf6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bfc:	e009      	b.n	8000c12 <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <I2C_PeriClockControl+0xb4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d105      	bne.n	8000c12 <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_DI();
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000c0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40005800 	.word	0x40005800
 8000c2c:	40005c00 	.word	0x40005c00

08000c30 <RCC_GetPCLK1Value>:
 *
 * @return		- APB1 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1Value(void){
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
	uint32_t pclk1, apb1p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <RCC_GetPCLK1Value+0x90>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 8000c44:	7afb      	ldrb	r3, [r7, #11]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <RCC_GetPCLK1Value+0x94>)
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e004      	b.n	8000c5a <RCC_GetPCLK1Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d101      	bne.n	8000c5a <RCC_GetPCLK1Value+0x2a>
		systemClk = 8000000;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <RCC_GetPCLK1Value+0x98>)
 8000c58:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	//AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <RCC_GetPCLK1Value+0x90>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b07      	cmp	r3, #7
 8000c6a:	d802      	bhi.n	8000c72 <RCC_GetPCLK1Value+0x42>
		ahbp = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	e005      	b.n	8000c7e <RCC_GetPCLK1Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3b08      	subs	r3, #8
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <RCC_GetPCLK1Value+0x9c>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	613b      	str	r3, [r7, #16]

	//APB1 prescaler starts at 10th bit
	temp = (RCC->CFGR >> 10) & 0b111;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <RCC_GetPCLK1Value+0x90>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	0a9b      	lsrs	r3, r3, #10
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d802      	bhi.n	8000c96 <RCC_GetPCLK1Value+0x66>
		apb1p = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e005      	b.n	8000ca2 <RCC_GetPCLK1Value+0x72>
	else
		apb1p = APB1Prescaler[temp - 0b100];
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3b04      	subs	r3, #4
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <RCC_GetPCLK1Value+0xa0>)
 8000c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca0:	617b      	str	r3, [r7, #20]

	pclk1 = systemClk/(ahbp * apb1p);
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000cb2:	683b      	ldr	r3, [r7, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	00f42400 	.word	0x00f42400
 8000cc8:	007a1200 	.word	0x007a1200
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000010 	.word	0x20000010

08000cd4 <I2C_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff46 	bl	8000b78 <I2C_PeriClockControl>

	tempreg |= (pI2CHandle->I2C_Config.AckControl << 10);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7a5b      	ldrb	r3, [r3, #9]
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 8000d06:	f7ff ff93 	bl	8000c30 <RCC_GetPCLK1Value>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <I2C_Init+0x17c>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d20:	605a      	str	r2, [r3, #4]

	// Address configuration
	tempreg = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
	tempreg = (pI2CHandle->I2C_Config.DeviceAddress << I2C_OAR1_ADD7);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7a1b      	ldrb	r3, [r3, #8]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6899      	ldr	r1, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	609a      	str	r2, [r3, #8]

	// Set to 7-bit slave address mode
	pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_ADD_MODE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d4c:	609a      	str	r2, [r3, #8]

	// Bit 14 of OAR1 has to be kept at 1 by software, for some reason
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d5c:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	817b      	strh	r3, [r7, #10]
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a3b      	ldr	r2, [pc, #236]	; (8000e54 <I2C_Init+0x180>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d817      	bhi.n	8000d9c <I2C_Init+0xc8>
		// Mode is standard mode
		pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_FS);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d7a:	61da      	str	r2, [r3, #28]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.SCLSpeed);
 8000d7c:	f7ff ff58 	bl	8000c30 <RCC_GetPCLK1Value>
 8000d80:	4602      	mov	r2, r0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8c:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & (0xFFF);
 8000d8e:	897b      	ldrh	r3, [r7, #10]
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e02a      	b.n	8000df2 <I2C_Init+0x11e>
	} else {
		// Mode is fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	69da      	ldr	r2, [r3, #28]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000daa:	61da      	str	r2, [r3, #28]

		if(pI2CHandle->I2C_Config.FMDutyCycle == I2C_FM_DUTY_2){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7a9b      	ldrb	r3, [r3, #10]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10b      	bne.n	8000dcc <I2C_Init+0xf8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.SCLSpeed);
 8000db4:	f7ff ff3c 	bl	8000c30 <RCC_GetPCLK1Value>
 8000db8:	4601      	mov	r1, r0
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc8:	817b      	strh	r3, [r7, #10]
 8000dca:	e00c      	b.n	8000de6 <I2C_Init+0x112>
		} else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.SCLSpeed);
 8000dcc:	f7ff ff30 	bl	8000c30 <RCC_GetPCLK1Value>
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	009a      	lsls	r2, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de4:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & (0xFFF);
 8000de6:	897b      	ldrh	r3, [r7, #10]
 8000de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= (tempreg);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69d9      	ldr	r1, [r3, #28]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <I2C_Init+0x180>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d809      	bhi.n	8000e20 <I2C_Init+0x14c>
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000e0c:	f7ff ff10 	bl	8000c30 <RCC_GetPCLK1Value>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <I2C_Init+0x17c>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	0c9b      	lsrs	r3, r3, #18
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e00c      	b.n	8000e3a <I2C_Init+0x166>
	} else {
		tempreg = ((RCC_GetPCLK1Value() * 300) /1000000U) + 1;
 8000e20:	f7ff ff06 	bl	8000c30 <RCC_GetPCLK1Value>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <I2C_Init+0x17c>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE =  (tempreg & 0x3F);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e44:	621a      	str	r2, [r3, #32]
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	000186a0 	.word	0x000186a0

08000e58 <I2C_GetSR1FlagStatus>:
 *
 * @return		- SET or RESET
 *
 * @Note		- none
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint32_t flagName){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & flagName)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <I2C_GetSR1FlagStatus+0x1a>
		return FLAG_SET;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <I2C_GetSR1FlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <I2C_MasterSendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t len, uint8_t slaveAddr){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fe1e 	bl	8000ad4 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) == FLAG_RESET);
 8000e98:	bf00      	nop
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffd9 	bl	8000e58 <I2C_GetSR1FlagStatus>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f6      	beq.n	8000e9a <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, WRITE);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	78f9      	ldrb	r1, [r7, #3]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe2d 	bl	8000b14 <I2C_ExecuteAddressPhase>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 8000eba:	bf00      	nop
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffc8 	bl	8000e58 <I2C_GetSR1FlagStatus>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f6      	beq.n	8000ebc <I2C_MasterSendData+0x3c>

	// 5. Clear the ADDR flag according to its software sequence
	//    Note: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe3f 	bl	8000b56 <I2C_ClearADDRFlag>

	// 6. Send the data until len becomes 0
	for(int i = 0; i < len; i++){
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e013      	b.n	8000f06 <I2C_MasterSendData+0x86>
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET);
 8000ede:	bf00      	nop
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffb6 	bl	8000e58 <I2C_GetSR1FlagStatus>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f6      	beq.n	8000ee0 <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = pTxbuffer[i];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < len; i++){
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8e7      	bhi.n	8000ede <I2C_MasterSendData+0x5e>
	}

	// 7. When Len becomes zero wait for TXE=1 and BTF=1 before generating ther STOP condition
	//	  Note: TXE=1, BTF-1, means that both SR and DR are empty and next transmission should begin
	//	  when BTF=1 SCL will be stretched (pulled to LOW)
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 8000f0e:	bf00      	nop
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff9e 	bl	8000e58 <I2C_GetSR1FlagStatus>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f6      	beq.n	8000f10 <I2C_MasterSendData+0x90>
			(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET));
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff95 	bl	8000e58 <I2C_GetSR1FlagStatus>
 8000f2e:	4603      	mov	r3, r0
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0ed      	beq.n	8000f10 <I2C_MasterSendData+0x90>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	//    Note: generating STOP automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fddb 	bl	8000af4 <I2C_GenerateStopCondition>

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <I2C_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeripheralControl(I2C_RegDef_t * pI2Cx, uint8_t EnorDi){
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d106      	bne.n	8000f66 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}
 8000f64:	e005      	b.n	8000f72 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 0201 	bic.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <__libc_init_array>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4d0d      	ldr	r5, [pc, #52]	; (8000fb8 <__libc_init_array+0x38>)
 8000f84:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <__libc_init_array+0x3c>)
 8000f86:	1b64      	subs	r4, r4, r5
 8000f88:	10a4      	asrs	r4, r4, #2
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	42a6      	cmp	r6, r4
 8000f8e:	d109      	bne.n	8000fa4 <__libc_init_array+0x24>
 8000f90:	4d0b      	ldr	r5, [pc, #44]	; (8000fc0 <__libc_init_array+0x40>)
 8000f92:	4c0c      	ldr	r4, [pc, #48]	; (8000fc4 <__libc_init_array+0x44>)
 8000f94:	f000 f818 	bl	8000fc8 <_init>
 8000f98:	1b64      	subs	r4, r4, r5
 8000f9a:	10a4      	asrs	r4, r4, #2
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	42a6      	cmp	r6, r4
 8000fa0:	d105      	bne.n	8000fae <__libc_init_array+0x2e>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa8:	4798      	blx	r3
 8000faa:	3601      	adds	r6, #1
 8000fac:	e7ee      	b.n	8000f8c <__libc_init_array+0xc>
 8000fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb2:	4798      	blx	r3
 8000fb4:	3601      	adds	r6, #1
 8000fb6:	e7f2      	b.n	8000f9e <__libc_init_array+0x1e>
 8000fb8:	08000fec 	.word	0x08000fec
 8000fbc:	08000fec 	.word	0x08000fec
 8000fc0:	08000fec 	.word	0x08000fec
 8000fc4:	08000ff0 	.word	0x08000ff0

08000fc8 <_init>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr

08000fd4 <_fini>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr
