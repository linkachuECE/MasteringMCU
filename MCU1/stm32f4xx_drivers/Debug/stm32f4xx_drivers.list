
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002584  08002584  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002584  08002584  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002584  08002584  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800258c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000021a1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000782  00000000  00000000  00022235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  000229b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000220  00000000  00000000  00022c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dc9  00000000  00000000  00022e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ae6  00000000  00000000  00026c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d7ed  00000000  00000000  000296ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00036eec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000116c  00000000  00000000  00036f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800240c 	.word	0x0800240c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800240c 	.word	0x0800240c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define	ANALOG_PIN4		4

// Arduino led
#define LED_PIN		9

void delay(void){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 50000; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d9f7      	bls.n	80002ac <delay+0xc>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a3b      	ldr	r2, [pc, #236]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 80002d8:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	220f      	movs	r2, #15
 80002de:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2202      	movs	r2, #2
 80002e4:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2203      	movs	r2, #3
 80002ea:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2205      	movs	r2, #5
 80002fc:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a30      	ldr	r2, [pc, #192]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000302:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	220e      	movs	r2, #14
 8000308:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2202      	movs	r2, #2
 800030e:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2203      	movs	r2, #3
 8000314:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2205      	movs	r2, #5
 8000326:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a26      	ldr	r2, [pc, #152]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800032c:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	220d      	movs	r2, #13
 8000332:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2202      	movs	r2, #2
 8000338:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2203      	movs	r2, #3
 800033e:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2205      	movs	r2, #5
 8000352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	220c      	movs	r2, #12
 8000360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2202      	movs	r2, #2
 8000368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2203      	movs	r2, #3
 8000370:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2205      	movs	r2, #5
 8000388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800038c:	2101      	movs	r1, #1
 800038e:	480d      	ldr	r0, [pc, #52]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000390:	f000 fb12 	bl	80009b8 <GPIO_PeriClockControl>

	GPIO_Init(&(SPIPort->MOSI));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fbfa 	bl	8000b90 <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	330c      	adds	r3, #12
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fbf5 	bl	8000b90 <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3318      	adds	r3, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fbf0 	bl	8000b90 <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3324      	adds	r3, #36	; 0x24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fbeb 	bl	8000b90 <GPIO_Init>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020400 	.word	0x40020400

080003c8 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	 * - Low Clock polarity, first phase detection
	 * - Hardware controlled slave select
	 * - Single master
	 */

	SPIDevice->pSPIx = SPI2;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <SPI2_Init+0x58>)
 80003d4:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2201      	movs	r2, #1
 80003da:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_HW;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_LSBFIRST;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fe8e 	bl	8001128 <SPI_Init>

	// Enable SSOE so that NSS goes low when SPE goes high
	SPI_SSOEControl(SPIDevice->pSPIx, ENABLE);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 ff32 	bl	800127c <SPI_SSOEControl>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40003800 	.word	0x40003800

08000424 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* USRPB){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	USRPB->pGPIOx = GPIOA;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <USRBTN_Init+0x40>)
 8000430:	601a      	str	r2, [r3, #0]
	USRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	711a      	strb	r2, [r3, #4]
	USRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	715a      	strb	r2, [r3, #5]
	USRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2202      	movs	r2, #2
 8000442:	719a      	strb	r2, [r3, #6]
	USRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	71da      	strb	r2, [r3, #7]

	GPIO_Init(USRPB);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f000 fba0 	bl	8000b90 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	2006      	movs	r0, #6
 8000456:	f000 fd5b 	bl	8000f10 <GPIO_IRQInterruptConfig>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000

08000468 <SendCmdGetAckByte>:

void SendCmdGetAckByte(SPI_RegDef_t* pSPIx, uint8_t* cmdCode, uint8_t* ackByte){
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 8000474:	23ff      	movs	r3, #255	; 0xff
 8000476:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyReadByte;

	// Send command code
	SPI_SendData(pSPIx, cmdCode, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f000 ff2d 	bl	80012dc <SPI_SendData>

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 8000482:	f107 0316 	add.w	r3, r7, #22
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f000 ff57 	bl	800133e <SPI_ReceiveData>

	// Send dummy byte so that data can be retrieved from slave
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 8000490:	f107 0317 	add.w	r3, r7, #23
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f000 ff1f 	bl	80012dc <SPI_SendData>

	// Read the acknowledge byte
	SPI_ReceiveData(pSPIx, ackByte, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 ff4b 	bl	800133e <SPI_ReceiveData>
}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <SPI_Verify_Response>:

uint8_t SPI_Verify_Response(uint8_t ackbyte){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5){
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2bf5      	cmp	r3, #245	; 0xf5
 80004be:	d101      	bne.n	80004c4 <SPI_Verify_Response+0x14>
		//ack
		return 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e000      	b.n	80004c6 <SPI_Verify_Response+0x16>
	}else{
		//nack
		return 0;
 80004c4:	2300      	movs	r3, #0
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <dummyReadDelayWrite>:

void dummyReadDelayWrite(SPI_RegDef_t* pSPIx){
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 80004da:	23ff      	movs	r3, #255	; 0xff
 80004dc:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyReadByte;

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 80004de:	f107 030e 	add.w	r3, r7, #14
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 ff29 	bl	800133e <SPI_ReceiveData>

	// Insert a delay long enough for the arduino to make a measurement
	delay();
 80004ec:	f7ff fed8 	bl	80002a0 <delay>

	// Send a dummy byte
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 80004f0:	f107 030f 	add.w	r3, r7, #15
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 feef 	bl	80012dc <SPI_SendData>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <main>:

int main(void){
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b0a3      	sub	sp, #140	; 0x8c
 800050c:	af00      	add	r7, sp, #0
	uint8_t dummy_read;
	uint8_t dummy_write;

	// Initialize the appropriate GPIO pins on port B
	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 800050e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff feda 	bl	80002cc <SPI2_GPIO_Inits>

	// Initialize the SPI2 peripheral
	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 8000518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff53 	bl	80003c8 <SPI2_Init>

	// Initialize user button and interrupts
	GPIO_Handle_t USRPB;
	memset(&USRPB, 0, sizeof(USRPB));
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	220c      	movs	r2, #12
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f000 ff62 	bl	80013f4 <memset>
	USRBTN_Init(&USRPB);
 8000530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff75 	bl	8000424 <USRBTN_Init>

	SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 800053a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fe64 	bl	800120c <SPI_PeripheralControl>
		uint8_t cmdCode;
		uint8_t ackByte;
		uint8_t args[2];

		//******** 1. CMD_LED_CTRL *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000544:	bf00      	nop
 8000546:	2100      	movs	r1, #0
 8000548:	48aa      	ldr	r0, [pc, #680]	; (80007f4 <main+0x2ec>)
 800054a:	f000 fccb 	bl	8000ee4 <GPIO_ReadFromInputPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f8      	beq.n	8000546 <main+0x3e>
		delay();
 8000554:	f7ff fea4 	bl	80002a0 <delay>

		SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 8000558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe55 	bl	800120c <SPI_PeripheralControl>

		printf("SPI Communication opened\n");
 8000562:	48a5      	ldr	r0, [pc, #660]	; (80007f8 <main+0x2f0>)
 8000564:	f000 ffd4 	bl	8001510 <puts>

		cmdCode = COMMAND_LED_CTRL;
 8000568:	2350      	movs	r3, #80	; 0x50
 800056a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000574:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff75 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 800057e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff94 	bl	80004b0 <SPI_Verify_Response>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00f      	beq.n	80005ae <main+0xa6>
			args[0] = LED_PIN;
 800058e:	2309      	movs	r3, #9
 8000590:	f887 3020 	strb.w	r3, [r7, #32]
			args[1] = LED_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			SPI_SendData(mySPIDevice.pSPIx, args, 2);
 800059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800059c:	f107 0120 	add.w	r1, r7, #32
 80005a0:	2202      	movs	r2, #2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe9a 	bl	80012dc <SPI_SendData>

			printf("LED_CTRL Executed\n");
 80005a8:	4894      	ldr	r0, [pc, #592]	; (80007fc <main+0x2f4>)
 80005aa:	f000 ffb1 	bl	8001510 <puts>
		}


		//******** 2. CMD_SENSOR_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80005ae:	bf00      	nop
 80005b0:	2100      	movs	r1, #0
 80005b2:	4890      	ldr	r0, [pc, #576]	; (80007f4 <main+0x2ec>)
 80005b4:	f000 fc96 	bl	8000ee4 <GPIO_ReadFromInputPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f8      	beq.n	80005b0 <main+0xa8>
		delay();
 80005be:	f7ff fe6f 	bl	80002a0 <delay>

		cmdCode = COMMAND_SENSOR_READ;
 80005c2:	2351      	movs	r3, #81	; 0x51
 80005c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80005c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ca:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80005ce:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff48 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 80005d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff67 	bl	80004b0 <SPI_Verify_Response>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d019      	beq.n	800061c <main+0x114>
			args[0] = ANALOG_PIN0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 80005ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f0:	f107 0120 	add.w	r1, r7, #32
 80005f4:	2201      	movs	r2, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fe70 	bl	80012dc <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 80005fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff67 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t analogRead;
			SPI_ReceiveData(mySPIDevice.pSPIx, &analogRead, 1);
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	f107 0113 	add.w	r1, r7, #19
 800060a:	2201      	movs	r2, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fe96 	bl	800133e <SPI_ReceiveData>

			printf("Read from analog: %d\n", analogRead);
 8000612:	7cfb      	ldrb	r3, [r7, #19]
 8000614:	4619      	mov	r1, r3
 8000616:	487a      	ldr	r0, [pc, #488]	; (8000800 <main+0x2f8>)
 8000618:	f000 fef4 	bl	8001404 <iprintf>
		}

		//******** 3. COMMAND_LED_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800061c:	bf00      	nop
 800061e:	2100      	movs	r1, #0
 8000620:	4874      	ldr	r0, [pc, #464]	; (80007f4 <main+0x2ec>)
 8000622:	f000 fc5f 	bl	8000ee4 <GPIO_ReadFromInputPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0f8      	beq.n	800061e <main+0x116>
		delay();
 800062c:	f7ff fe38 	bl	80002a0 <delay>

		cmdCode = COMMAND_LED_READ;
 8000630:	2352      	movs	r3, #82	; 0x52
 8000632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 8000636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000638:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800063c:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff11 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 8000646:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff30 	bl	80004b0 <SPI_Verify_Response>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d019      	beq.n	800068a <main+0x182>
			args[0] = LED_PIN;
 8000656:	2309      	movs	r3, #9
 8000658:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(SPI2, args, 1);
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	4867      	ldr	r0, [pc, #412]	; (8000804 <main+0x2fc>)
 8000666:	f000 fe39 	bl	80012dc <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 800066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff30 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t ledread;
			SPI_ReceiveData(SPI2, &ledread, 1);
 8000672:	f107 0312 	add.w	r3, r7, #18
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	4862      	ldr	r0, [pc, #392]	; (8000804 <main+0x2fc>)
 800067c:	f000 fe5f 	bl	800133e <SPI_ReceiveData>

			printf("Read from LED: %d\n", ledread);
 8000680:	7cbb      	ldrb	r3, [r7, #18]
 8000682:	4619      	mov	r1, r3
 8000684:	4860      	ldr	r0, [pc, #384]	; (8000808 <main+0x300>)
 8000686:	f000 febd 	bl	8001404 <iprintf>
		}

		//******** 4. COMMAND_PRINT *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800068a:	bf00      	nop
 800068c:	2100      	movs	r1, #0
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <main+0x2ec>)
 8000690:	f000 fc28 	bl	8000ee4 <GPIO_ReadFromInputPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f8      	beq.n	800068c <main+0x184>
		delay();
 800069a:	f7ff fe01 	bl	80002a0 <delay>

		cmdCode = COMMAND_PRINT;
 800069e:	2353      	movs	r3, #83	; 0x53
 80006a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80006a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80006aa:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff feda 	bl	8000468 <SendCmdGetAckByte>

		if(SPI_Verify_Response(ackByte)){
 80006b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fef9 	bl	80004b0 <SPI_Verify_Response>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d03f      	beq.n	8000744 <main+0x23c>
			uint8_t message[] = "Test message";
 80006c4:	4b51      	ldr	r3, [pc, #324]	; (800080c <main+0x304>)
 80006c6:	1d3c      	adds	r4, r7, #4
 80006c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ca:	c407      	stmia	r4!, {r0, r1, r2}
 80006cc:	7023      	strb	r3, [r4, #0]

			args[0] = strlen((char*)message);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd8d 	bl	80001f0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	f107 0120 	add.w	r1, r7, #32
 80006e4:	2201      	movs	r2, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fdf8 	bl	80012dc <SPI_SendData>

			// Dummy read
			SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 80006ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ee:	f107 0182 	add.w	r1, r7, #130	; 0x82
 80006f2:	2201      	movs	r2, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fe22 	bl	800133e <SPI_ReceiveData>

			delay();
 80006fa:	f7ff fdd1 	bl	80002a0 <delay>

			// Send message
			for(int i = 0; i < args[0]; i++){
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000704:	e014      	b.n	8000730 <main+0x228>
				SPI_SendData(mySPIDevice.pSPIx, &message[i], 1);
 8000706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000708:	1d3a      	adds	r2, r7, #4
 800070a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800070e:	4413      	add	r3, r2
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	f000 fde2 	bl	80012dc <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 8000718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071a:	f107 0182 	add.w	r1, r7, #130	; 0x82
 800071e:	2201      	movs	r2, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fe0c 	bl	800133e <SPI_ReceiveData>
			for(int i = 0; i < args[0]; i++){
 8000726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800072a:	3301      	adds	r3, #1
 800072c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000730:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000734:	461a      	mov	r2, r3
 8000736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800073a:	4293      	cmp	r3, r2
 800073c:	dbe3      	blt.n	8000706 <main+0x1fe>
			}

			printf("COMMAND_PRINT executed\n");
 800073e:	4834      	ldr	r0, [pc, #208]	; (8000810 <main+0x308>)
 8000740:	f000 fee6 	bl	8001510 <puts>
		}


		//******** 5. COMMAND_ID_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000744:	bf00      	nop
 8000746:	2100      	movs	r1, #0
 8000748:	482a      	ldr	r0, [pc, #168]	; (80007f4 <main+0x2ec>)
 800074a:	f000 fbcb 	bl	8000ee4 <GPIO_ReadFromInputPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f8      	beq.n	8000746 <main+0x23e>
		delay();
 8000754:	f7ff fda4 	bl	80002a0 <delay>

		cmdCode = COMMAND_ID_READ;
 8000758:	2354      	movs	r3, #84	; 0x54
 800075a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 800075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000760:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000764:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fe7d 	bl	8000468 <SendCmdGetAckByte>

		uint8_t ID[11];

		if(SPI_Verify_Response(ackByte)){
 800076e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fe9c 	bl	80004b0 <SPI_Verify_Response>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d025      	beq.n	80007ca <main+0x2c2>

			for(uint8_t i = 0; i < 10; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000784:	e015      	b.n	80007b2 <main+0x2aa>
				SPI_SendData(mySPIDevice.pSPIx, &dummy_write, 1);
 8000786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000788:	f107 0181 	add.w	r1, r7, #129	; 0x81
 800078c:	2201      	movs	r2, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fda4 	bl	80012dc <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &ID[i], 1);
 8000794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000796:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800079a:	f107 0214 	add.w	r2, r7, #20
 800079e:	4413      	add	r3, r2
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f000 fdcb 	bl	800133e <SPI_ReceiveData>
			for(uint8_t i = 0; i < 10; i++){
 80007a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80007ac:	3301      	adds	r3, #1
 80007ae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80007b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d9e5      	bls.n	8000786 <main+0x27e>
			}

			ID[11] = '\0';
 80007ba:	2300      	movs	r3, #0
 80007bc:	77fb      	strb	r3, [r7, #31]

			printf("ID retrieved from COMMAND_ID_READ:%s\n", (char*)ID);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <main+0x30c>)
 80007c6:	f000 fe1d 	bl	8001404 <iprintf>
		}

		delay();
 80007ca:	f7ff fd69 	bl	80002a0 <delay>

		while(SPI_GetFlagStatus(mySPIDevice.pSPIx, SPI_BSY_FLAG));
 80007ce:	bf00      	nop
 80007d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fd6d 	bl	80012b4 <SPI_GetFlagStatus>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f7      	bne.n	80007d0 <main+0x2c8>

		SPI_PeripheralControl(mySPIDevice.pSPIx, DISABLE);
 80007e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fd11 	bl	800120c <SPI_PeripheralControl>

		printf("SPI Communication closed\n");
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <main+0x310>)
 80007ec:	f000 fe90 	bl	8001510 <puts>
	while(1){
 80007f0:	e6a8      	b.n	8000544 <main+0x3c>
 80007f2:	bf00      	nop
 80007f4:	40020000 	.word	0x40020000
 80007f8:	08002424 	.word	0x08002424
 80007fc:	08002440 	.word	0x08002440
 8000800:	08002454 	.word	0x08002454
 8000804:	40003800 	.word	0x40003800
 8000808:	0800246c 	.word	0x0800246c
 800080c:	080024dc 	.word	0x080024dc
 8000810:	08002480 	.word	0x08002480
 8000814:	08002498 	.word	0x08002498
 8000818:	080024c0 	.word	0x080024c0

0800081c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
	}

return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x12>
	}
	return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f000 fd3a 	bl	80013a0 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20020000 	.word	0x20020000
 8000958:	00000400 	.word	0x00000400
 800095c:	20000080 	.word	0x20000080
 8000960:	20000098 	.word	0x20000098

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000968:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000992:	f000 fd0b 	bl	80013ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fdb7 	bl	8000508 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009a8:	0800258c 	.word	0x0800258c
  ldr r2, =_sbss
 80009ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009b0:	20000094 	.word	0x20000094

080009b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d162      	bne.n	8000a90 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a66      	ldr	r2, [pc, #408]	; (8000b68 <GPIO_PeriClockControl+0x1b0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d106      	bne.n	80009e0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80009d2:	4b66      	ldr	r3, [pc, #408]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a65      	ldr	r2, [pc, #404]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80009de:	e0bc      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a63      	ldr	r2, [pc, #396]	; (8000b70 <GPIO_PeriClockControl+0x1b8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d106      	bne.n	80009f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009e8:	4b60      	ldr	r3, [pc, #384]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a5f      	ldr	r2, [pc, #380]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f4:	e0b1      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a5e      	ldr	r2, [pc, #376]	; (8000b74 <GPIO_PeriClockControl+0x1bc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009fe:	4b5b      	ldr	r3, [pc, #364]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a5a      	ldr	r2, [pc, #360]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0a:	e0a6      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a5a      	ldr	r2, [pc, #360]	; (8000b78 <GPIO_PeriClockControl+0x1c0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d106      	bne.n	8000a22 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a14:	4b55      	ldr	r3, [pc, #340]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a54      	ldr	r2, [pc, #336]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a20:	e09b      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <GPIO_PeriClockControl+0x1c4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d106      	bne.n	8000a38 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a2a:	4b50      	ldr	r3, [pc, #320]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a36:	e090      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a51      	ldr	r2, [pc, #324]	; (8000b80 <GPIO_PeriClockControl+0x1c8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a40:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a49      	ldr	r2, [pc, #292]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a46:	f043 0320 	orr.w	r3, r3, #32
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4c:	e085      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <GPIO_PeriClockControl+0x1cc>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d106      	bne.n	8000a64 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a56:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a62:	e07a      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <GPIO_PeriClockControl+0x1d0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d106      	bne.n	8000a7a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a78:	e06f      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a43      	ldr	r2, [pc, #268]	; (8000b8c <GPIO_PeriClockControl+0x1d4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d16b      	bne.n	8000b5a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000a82:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8e:	e064      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d161      	bne.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <GPIO_PeriClockControl+0x1b0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a32      	ldr	r2, [pc, #200]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aaa:	e056      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <GPIO_PeriClockControl+0x1b8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d106      	bne.n	8000ac2 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac0:	e04b      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <GPIO_PeriClockControl+0x1bc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000ad0:	f023 0304 	bic.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ad6:	e040      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <GPIO_PeriClockControl+0x1c0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d106      	bne.n	8000aee <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000ae6:	f023 0308 	bic.w	r3, r3, #8
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aec:	e035      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <GPIO_PeriClockControl+0x1c4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000afc:	f023 0310 	bic.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b02:	e02a      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <GPIO_PeriClockControl+0x1c8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b12:	f023 0320 	bic.w	r3, r3, #32
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b18:	e01f      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <GPIO_PeriClockControl+0x1cc>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b2e:	e014      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <GPIO_PeriClockControl+0x1d0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b44:	e009      	b.n	8000b5a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <GPIO_PeriClockControl+0x1d4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d105      	bne.n	8000b5a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <GPIO_PeriClockControl+0x1b4>)
 8000b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40021400 	.word	0x40021400
 8000b84:	40021800 	.word	0x40021800
 8000b88:	40021c00 	.word	0x40021c00
 8000b8c:	40022000 	.word	0x40022000

08000b90 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff0a 	bl	80009b8 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d820      	bhi.n	8000bf2 <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2103      	movs	r1, #3
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	400a      	ands	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e0d0      	b.n	8000d94 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	795b      	ldrb	r3, [r3, #5]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d117      	bne.n	8000c2a <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <GPIO_Init+0x19c>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	7912      	ldrb	r2, [r2, #4]
 8000c02:	4611      	mov	r1, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	408a      	lsls	r2, r1
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <GPIO_Init+0x19c>)
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c10:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <GPIO_Init+0x19c>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	7912      	ldrb	r2, [r2, #4]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	408a      	lsls	r2, r1
 8000c1e:	43d2      	mvns	r2, r2
 8000c20:	4611      	mov	r1, r2
 8000c22:	4a42      	ldr	r2, [pc, #264]	; (8000d2c <GPIO_Init+0x19c>)
 8000c24:	400b      	ands	r3, r1
 8000c26:	6093      	str	r3, [r2, #8]
 8000c28:	e031      	b.n	8000c8e <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d117      	bne.n	8000c62 <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <GPIO_Init+0x19c>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	7912      	ldrb	r2, [r2, #4]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	408a      	lsls	r2, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a3a      	ldr	r2, [pc, #232]	; (8000d2c <GPIO_Init+0x19c>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <GPIO_Init+0x19c>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	7912      	ldrb	r2, [r2, #4]
 8000c50:	4611      	mov	r1, r2
 8000c52:	2201      	movs	r2, #1
 8000c54:	408a      	lsls	r2, r1
 8000c56:	43d2      	mvns	r2, r2
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <GPIO_Init+0x19c>)
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	60d3      	str	r3, [r2, #12]
 8000c60:	e015      	b.n	8000c8e <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <GPIO_Init+0x19c>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	7912      	ldrb	r2, [r2, #4]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	408a      	lsls	r2, r1
 8000c70:	4611      	mov	r1, r2
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <GPIO_Init+0x19c>)
 8000c74:	430b      	orrs	r3, r1
 8000c76:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <GPIO_Init+0x19c>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	7912      	ldrb	r2, [r2, #4]
 8000c80:	4611      	mov	r1, r2
 8000c82:	2201      	movs	r2, #1
 8000c84:	408a      	lsls	r2, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <GPIO_Init+0x19c>)
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <GPIO_Init+0x1a0>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <GPIO_Init+0x1a0>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <GPIO_Init+0x1a4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d050      	beq.n	8000d58 <GPIO_Init+0x1c8>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <GPIO_Init+0x1a8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d032      	beq.n	8000d26 <GPIO_Init+0x196>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <GPIO_Init+0x1ac>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d02b      	beq.n	8000d22 <GPIO_Init+0x192>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <GPIO_Init+0x1b0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d024      	beq.n	8000d1e <GPIO_Init+0x18e>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <GPIO_Init+0x1b4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01d      	beq.n	8000d1a <GPIO_Init+0x18a>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <GPIO_Init+0x1b8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d016      	beq.n	8000d16 <GPIO_Init+0x186>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <GPIO_Init+0x1bc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00f      	beq.n	8000d12 <GPIO_Init+0x182>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <GPIO_Init+0x1c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d008      	beq.n	8000d0e <GPIO_Init+0x17e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <GPIO_Init+0x1c4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <GPIO_Init+0x17a>
 8000d06:	2308      	movs	r3, #8
 8000d08:	e027      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e025      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d0e:	2307      	movs	r3, #7
 8000d10:	e023      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d12:	2306      	movs	r3, #6
 8000d14:	e021      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d16:	2305      	movs	r3, #5
 8000d18:	e01f      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	e01d      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e01b      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e019      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e017      	b.n	8000d5a <GPIO_Init+0x1ca>
 8000d2a:	bf00      	nop
 8000d2c:	40013c00 	.word	0x40013c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40021400 	.word	0x40021400
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	40021c00 	.word	0x40021c00
 8000d54:	40022000 	.word	0x40022000
 8000d58:	2300      	movs	r3, #0
 8000d5a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000d5c:	4a5f      	ldr	r2, [pc, #380]	; (8000edc <GPIO_Init+0x34c>)
 8000d5e:	7cfb      	ldrb	r3, [r7, #19]
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d66:	7c79      	ldrb	r1, [r7, #17]
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	495a      	ldr	r1, [pc, #360]	; (8000edc <GPIO_Init+0x34c>)
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	4302      	orrs	r2, r0
 8000d78:	3302      	adds	r3, #2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d7e:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <GPIO_Init+0x350>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	7912      	ldrb	r2, [r2, #4]
 8000d86:	4611      	mov	r1, r2
 8000d88:	2201      	movs	r2, #1
 8000d8a:	408a      	lsls	r2, r1
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a54      	ldr	r2, [pc, #336]	; (8000ee0 <GPIO_Init+0x350>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	791b      	ldrb	r3, [r3, #4]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2103      	movs	r1, #3
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	400a      	ands	r2, r1
 8000dc6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6899      	ldr	r1, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	79db      	ldrb	r3, [r3, #7]
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	400a      	ands	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68d9      	ldr	r1, [r3, #12]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	795b      	ldrb	r3, [r3, #5]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d11f      	bne.n	8000e68 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7a1b      	ldrb	r3, [r3, #8]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	4619      	mov	r1, r3
 8000e44:	2301      	movs	r3, #1
 8000e46:	408b      	lsls	r3, r1
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	400a      	ands	r2, r1
 8000e52:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d131      	bne.n	8000ed4 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	7c3a      	ldrb	r2, [r7, #16]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	7c3a      	ldrb	r2, [r7, #16]
 8000ea2:	4001      	ands	r1, r0
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	7c3a      	ldrb	r2, [r7, #16]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7a5b      	ldrb	r3, [r3, #9]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	7c3a      	ldrb	r2, [r7, #16]
 8000ecc:	4301      	orrs	r1, r0
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
	return value;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d133      	bne.n	8000f8e <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d80a      	bhi.n	8000f42 <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <GPIO_IRQInterruptConfig+0xf8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <GPIO_IRQInterruptConfig+0xf8>)
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e058      	b.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d90f      	bls.n	8000f68 <GPIO_IRQInterruptConfig+0x58>
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	d80c      	bhi.n	8000f68 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <GPIO_IRQInterruptConfig+0xfc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	79fa      	ldrb	r2, [r7, #7]
 8000f54:	f002 021f 	and.w	r2, r2, #31
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4a2a      	ldr	r2, [pc, #168]	; (800100c <GPIO_IRQInterruptConfig+0xfc>)
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e045      	b.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f6c:	d942      	bls.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b5f      	cmp	r3, #95	; 0x5f
 8000f72:	d83f      	bhi.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <GPIO_IRQInterruptConfig+0x100>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	f002 021f 	and.w	r2, r2, #31
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	4611      	mov	r1, r2
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <GPIO_IRQInterruptConfig+0x100>)
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e032      	b.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	d80a      	bhi.n	8000faa <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <GPIO_IRQInterruptConfig+0x104>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <GPIO_IRQInterruptConfig+0x104>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e024      	b.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b1f      	cmp	r3, #31
 8000fae:	d90f      	bls.n	8000fd0 <GPIO_IRQInterruptConfig+0xc0>
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb4:	d80c      	bhi.n	8000fd0 <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <GPIO_IRQInterruptConfig+0x108>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	f002 021f 	and.w	r2, r2, #31
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <GPIO_IRQInterruptConfig+0x108>)
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e011      	b.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd4:	d90e      	bls.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b5f      	cmp	r3, #95	; 0x5f
 8000fda:	d80b      	bhi.n	8000ff4 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <GPIO_IRQInterruptConfig+0x10c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	f002 021f 	and.w	r2, r2, #31
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <GPIO_IRQInterruptConfig+0x10c>)
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f811 	bl	8001020 <GPIO_IRQPriorityConfig>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000e104 	.word	0xe000e104
 8001010:	e000e108 	.word	0xe000e108
 8001014:	e000e180 	.word	0xe000e180
 8001018:	e000e184 	.word	0xe000e184
 800101c:	e000e188 	.word	0xe000e188

08001020 <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3304      	adds	r3, #4
 8001042:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800104c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001050:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	431a      	orrs	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d120      	bne.n	80010c4 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <SPI_PeriClockControl+0xa8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d106      	bne.n	8001098 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <SPI_PeriClockControl+0xac>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <SPI_PeriClockControl+0xac>)
 8001090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8001096:	e038      	b.n	800110a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SPI_PeriClockControl+0xb0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d106      	bne.n	80010ae <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <SPI_PeriClockControl+0xac>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <SPI_PeriClockControl+0xac>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010ac:	e02d      	b.n	800110a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <SPI_PeriClockControl+0xb4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d129      	bne.n	800110a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <SPI_PeriClockControl+0xac>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <SPI_PeriClockControl+0xac>)
 80010bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010c2:	e022      	b.n	800110a <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d11f      	bne.n	800110a <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <SPI_PeriClockControl+0xa8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d106      	bne.n	80010e0 <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <SPI_PeriClockControl+0xac>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <SPI_PeriClockControl+0xac>)
 80010d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010de:	e014      	b.n	800110a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <SPI_PeriClockControl+0xb0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d106      	bne.n	80010f6 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <SPI_PeriClockControl+0xac>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <SPI_PeriClockControl+0xac>)
 80010ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f4:	e009      	b.n	800110a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SPI_PeriClockControl+0xb4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d105      	bne.n	800110a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <SPI_PeriClockControl+0xac>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a06      	ldr	r2, [pc, #24]	; (800111c <SPI_PeriClockControl+0xac>)
 8001104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40013000 	.word	0x40013000
 800111c:	40023800 	.word	0x40023800
 8001120:	40003800 	.word	0x40003800
 8001124:	40003c00 	.word	0x40003c00

08001128 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff9a 	bl	8001070 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e014      	b.n	800118a <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d104      	bne.n	8001172 <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e00b      	b.n	800118a <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	795b      	ldrb	r3, [r3, #5]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d107      	bne.n	800118a <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001180:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001188:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	799b      	ldrb	r3, [r3, #6]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	461a      	mov	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	79db      	ldrb	r3, [r3, #7]
 800119c:	02db      	lsls	r3, r3, #11
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7a1b      	ldrb	r3, [r3, #8]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7a5b      	ldrb	r3, [r3, #9]
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7a9b      	ldrb	r3, [r3, #10]
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
	SPI_SSIControl(pSPIHandle->pSPIx, ENABLE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f835 	bl	8001244 <SPI_SSIControl>

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7adb      	ldrb	r3, [r3, #11]
 80011de:	01db      	lsls	r3, r3, #7
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f804 	bl	800120c <SPI_PeripheralControl>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 800122a:	e005      	b.n	8001238 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SPI_SSIControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSIControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d106      	bne.n	8001264 <SPI_SSIControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);			// Pull SSI high
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
}
 8001262:	e005      	b.n	8001270 <SPI_SSIControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SPI_SSOEControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d106      	bne.n	800129c <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
}
 800129a:	e005      	b.n	80012a8 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 0204 	bic.w	r2, r3, #4
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	// uint32_t dummy;

	while(len > 0){
 80012e8:	e021      	b.n	800132e <SPI_SendData+0x52>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 80012ea:	bf00      	nop
 80012ec:	2102      	movs	r1, #2
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff ffe0 	bl	80012b4 <SPI_GetFlagStatus>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f8      	beq.n	80012ec <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <SPI_SendData+0x3c>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3302      	adds	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	e007      	b.n	8001328 <SPI_SendData+0x4c>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
	while(len > 0){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1da      	bne.n	80012ea <SPI_SendData+0xe>
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <SPI_ReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t* pRxBuffer, uint32_t len){
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
	while(len > 0){
 800134a:	e021      	b.n	8001390 <SPI_ReceiveData+0x52>
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
 800134c:	bf00      	nop
 800134e:	2101      	movs	r1, #1
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f7ff ffaf 	bl	80012b4 <SPI_GetFlagStatus>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f8      	beq.n	800134e <SPI_ReceiveData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <SPI_ReceiveData+0x3c>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	b29a      	uxth	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	801a      	strh	r2, [r3, #0]
			pRxBuffer += 2;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3302      	adds	r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	e007      	b.n	800138a <SPI_ReceiveData+0x4c>
		} else {
			*((uint8_t*)pRxBuffer) = pSPIx->DR;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3301      	adds	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
		}
		len--;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3b01      	subs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1da      	bne.n	800134c <SPI_ReceiveData+0xe>
	}
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <__errno>:
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <__errno+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <__libc_init_array>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4d0d      	ldr	r5, [pc, #52]	; (80013e4 <__libc_init_array+0x38>)
 80013b0:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <__libc_init_array+0x3c>)
 80013b2:	1b64      	subs	r4, r4, r5
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	2600      	movs	r6, #0
 80013b8:	42a6      	cmp	r6, r4
 80013ba:	d109      	bne.n	80013d0 <__libc_init_array+0x24>
 80013bc:	4d0b      	ldr	r5, [pc, #44]	; (80013ec <__libc_init_array+0x40>)
 80013be:	4c0c      	ldr	r4, [pc, #48]	; (80013f0 <__libc_init_array+0x44>)
 80013c0:	f001 f824 	bl	800240c <_init>
 80013c4:	1b64      	subs	r4, r4, r5
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	2600      	movs	r6, #0
 80013ca:	42a6      	cmp	r6, r4
 80013cc:	d105      	bne.n	80013da <__libc_init_array+0x2e>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d4:	4798      	blx	r3
 80013d6:	3601      	adds	r6, #1
 80013d8:	e7ee      	b.n	80013b8 <__libc_init_array+0xc>
 80013da:	f855 3b04 	ldr.w	r3, [r5], #4
 80013de:	4798      	blx	r3
 80013e0:	3601      	adds	r6, #1
 80013e2:	e7f2      	b.n	80013ca <__libc_init_array+0x1e>
 80013e4:	08002584 	.word	0x08002584
 80013e8:	08002584 	.word	0x08002584
 80013ec:	08002584 	.word	0x08002584
 80013f0:	08002588 	.word	0x08002588

080013f4 <memset>:
 80013f4:	4402      	add	r2, r0
 80013f6:	4603      	mov	r3, r0
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d100      	bne.n	80013fe <memset+0xa>
 80013fc:	4770      	bx	lr
 80013fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001402:	e7f9      	b.n	80013f8 <memset+0x4>

08001404 <iprintf>:
 8001404:	b40f      	push	{r0, r1, r2, r3}
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <iprintf+0x2c>)
 8001408:	b513      	push	{r0, r1, r4, lr}
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	b124      	cbz	r4, 8001418 <iprintf+0x14>
 800140e:	69a3      	ldr	r3, [r4, #24]
 8001410:	b913      	cbnz	r3, 8001418 <iprintf+0x14>
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fa5e 	bl	80018d4 <__sinit>
 8001418:	ab05      	add	r3, sp, #20
 800141a:	9a04      	ldr	r2, [sp, #16]
 800141c:	68a1      	ldr	r1, [r4, #8]
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4620      	mov	r0, r4
 8001422:	f000 fc67 	bl	8001cf4 <_vfiprintf_r>
 8001426:	b002      	add	sp, #8
 8001428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800142c:	b004      	add	sp, #16
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000

08001434 <_puts_r>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	460e      	mov	r6, r1
 8001438:	4605      	mov	r5, r0
 800143a:	b118      	cbz	r0, 8001444 <_puts_r+0x10>
 800143c:	6983      	ldr	r3, [r0, #24]
 800143e:	b90b      	cbnz	r3, 8001444 <_puts_r+0x10>
 8001440:	f000 fa48 	bl	80018d4 <__sinit>
 8001444:	69ab      	ldr	r3, [r5, #24]
 8001446:	68ac      	ldr	r4, [r5, #8]
 8001448:	b913      	cbnz	r3, 8001450 <_puts_r+0x1c>
 800144a:	4628      	mov	r0, r5
 800144c:	f000 fa42 	bl	80018d4 <__sinit>
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <_puts_r+0xd0>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d120      	bne.n	8001498 <_puts_r+0x64>
 8001456:	686c      	ldr	r4, [r5, #4]
 8001458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800145a:	07db      	lsls	r3, r3, #31
 800145c:	d405      	bmi.n	800146a <_puts_r+0x36>
 800145e:	89a3      	ldrh	r3, [r4, #12]
 8001460:	0598      	lsls	r0, r3, #22
 8001462:	d402      	bmi.n	800146a <_puts_r+0x36>
 8001464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001466:	f000 fad3 	bl	8001a10 <__retarget_lock_acquire_recursive>
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	0719      	lsls	r1, r3, #28
 800146e:	d51d      	bpl.n	80014ac <_puts_r+0x78>
 8001470:	6923      	ldr	r3, [r4, #16]
 8001472:	b1db      	cbz	r3, 80014ac <_puts_r+0x78>
 8001474:	3e01      	subs	r6, #1
 8001476:	68a3      	ldr	r3, [r4, #8]
 8001478:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800147c:	3b01      	subs	r3, #1
 800147e:	60a3      	str	r3, [r4, #8]
 8001480:	bb39      	cbnz	r1, 80014d2 <_puts_r+0x9e>
 8001482:	2b00      	cmp	r3, #0
 8001484:	da38      	bge.n	80014f8 <_puts_r+0xc4>
 8001486:	4622      	mov	r2, r4
 8001488:	210a      	movs	r1, #10
 800148a:	4628      	mov	r0, r5
 800148c:	f000 f848 	bl	8001520 <__swbuf_r>
 8001490:	3001      	adds	r0, #1
 8001492:	d011      	beq.n	80014b8 <_puts_r+0x84>
 8001494:	250a      	movs	r5, #10
 8001496:	e011      	b.n	80014bc <_puts_r+0x88>
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <_puts_r+0xd4>)
 800149a:	429c      	cmp	r4, r3
 800149c:	d101      	bne.n	80014a2 <_puts_r+0x6e>
 800149e:	68ac      	ldr	r4, [r5, #8]
 80014a0:	e7da      	b.n	8001458 <_puts_r+0x24>
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <_puts_r+0xd8>)
 80014a4:	429c      	cmp	r4, r3
 80014a6:	bf08      	it	eq
 80014a8:	68ec      	ldreq	r4, [r5, #12]
 80014aa:	e7d5      	b.n	8001458 <_puts_r+0x24>
 80014ac:	4621      	mov	r1, r4
 80014ae:	4628      	mov	r0, r5
 80014b0:	f000 f888 	bl	80015c4 <__swsetup_r>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d0dd      	beq.n	8001474 <_puts_r+0x40>
 80014b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80014bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014be:	07da      	lsls	r2, r3, #31
 80014c0:	d405      	bmi.n	80014ce <_puts_r+0x9a>
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	059b      	lsls	r3, r3, #22
 80014c6:	d402      	bmi.n	80014ce <_puts_r+0x9a>
 80014c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ca:	f000 faa2 	bl	8001a12 <__retarget_lock_release_recursive>
 80014ce:	4628      	mov	r0, r5
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da04      	bge.n	80014e0 <_puts_r+0xac>
 80014d6:	69a2      	ldr	r2, [r4, #24]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dc06      	bgt.n	80014ea <_puts_r+0xb6>
 80014dc:	290a      	cmp	r1, #10
 80014de:	d004      	beq.n	80014ea <_puts_r+0xb6>
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	6022      	str	r2, [r4, #0]
 80014e6:	7019      	strb	r1, [r3, #0]
 80014e8:	e7c5      	b.n	8001476 <_puts_r+0x42>
 80014ea:	4622      	mov	r2, r4
 80014ec:	4628      	mov	r0, r5
 80014ee:	f000 f817 	bl	8001520 <__swbuf_r>
 80014f2:	3001      	adds	r0, #1
 80014f4:	d1bf      	bne.n	8001476 <_puts_r+0x42>
 80014f6:	e7df      	b.n	80014b8 <_puts_r+0x84>
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	250a      	movs	r5, #10
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	6022      	str	r2, [r4, #0]
 8001500:	701d      	strb	r5, [r3, #0]
 8001502:	e7db      	b.n	80014bc <_puts_r+0x88>
 8001504:	08002510 	.word	0x08002510
 8001508:	08002530 	.word	0x08002530
 800150c:	080024f0 	.word	0x080024f0

08001510 <puts>:
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <puts+0xc>)
 8001512:	4601      	mov	r1, r0
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f7ff bf8d 	b.w	8001434 <_puts_r>
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000

08001520 <__swbuf_r>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	460e      	mov	r6, r1
 8001524:	4614      	mov	r4, r2
 8001526:	4605      	mov	r5, r0
 8001528:	b118      	cbz	r0, 8001532 <__swbuf_r+0x12>
 800152a:	6983      	ldr	r3, [r0, #24]
 800152c:	b90b      	cbnz	r3, 8001532 <__swbuf_r+0x12>
 800152e:	f000 f9d1 	bl	80018d4 <__sinit>
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <__swbuf_r+0x98>)
 8001534:	429c      	cmp	r4, r3
 8001536:	d12b      	bne.n	8001590 <__swbuf_r+0x70>
 8001538:	686c      	ldr	r4, [r5, #4]
 800153a:	69a3      	ldr	r3, [r4, #24]
 800153c:	60a3      	str	r3, [r4, #8]
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	071a      	lsls	r2, r3, #28
 8001542:	d52f      	bpl.n	80015a4 <__swbuf_r+0x84>
 8001544:	6923      	ldr	r3, [r4, #16]
 8001546:	b36b      	cbz	r3, 80015a4 <__swbuf_r+0x84>
 8001548:	6923      	ldr	r3, [r4, #16]
 800154a:	6820      	ldr	r0, [r4, #0]
 800154c:	1ac0      	subs	r0, r0, r3
 800154e:	6963      	ldr	r3, [r4, #20]
 8001550:	b2f6      	uxtb	r6, r6
 8001552:	4283      	cmp	r3, r0
 8001554:	4637      	mov	r7, r6
 8001556:	dc04      	bgt.n	8001562 <__swbuf_r+0x42>
 8001558:	4621      	mov	r1, r4
 800155a:	4628      	mov	r0, r5
 800155c:	f000 f926 	bl	80017ac <_fflush_r>
 8001560:	bb30      	cbnz	r0, 80015b0 <__swbuf_r+0x90>
 8001562:	68a3      	ldr	r3, [r4, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60a3      	str	r3, [r4, #8]
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	6022      	str	r2, [r4, #0]
 800156e:	701e      	strb	r6, [r3, #0]
 8001570:	6963      	ldr	r3, [r4, #20]
 8001572:	3001      	adds	r0, #1
 8001574:	4283      	cmp	r3, r0
 8001576:	d004      	beq.n	8001582 <__swbuf_r+0x62>
 8001578:	89a3      	ldrh	r3, [r4, #12]
 800157a:	07db      	lsls	r3, r3, #31
 800157c:	d506      	bpl.n	800158c <__swbuf_r+0x6c>
 800157e:	2e0a      	cmp	r6, #10
 8001580:	d104      	bne.n	800158c <__swbuf_r+0x6c>
 8001582:	4621      	mov	r1, r4
 8001584:	4628      	mov	r0, r5
 8001586:	f000 f911 	bl	80017ac <_fflush_r>
 800158a:	b988      	cbnz	r0, 80015b0 <__swbuf_r+0x90>
 800158c:	4638      	mov	r0, r7
 800158e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <__swbuf_r+0x9c>)
 8001592:	429c      	cmp	r4, r3
 8001594:	d101      	bne.n	800159a <__swbuf_r+0x7a>
 8001596:	68ac      	ldr	r4, [r5, #8]
 8001598:	e7cf      	b.n	800153a <__swbuf_r+0x1a>
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <__swbuf_r+0xa0>)
 800159c:	429c      	cmp	r4, r3
 800159e:	bf08      	it	eq
 80015a0:	68ec      	ldreq	r4, [r5, #12]
 80015a2:	e7ca      	b.n	800153a <__swbuf_r+0x1a>
 80015a4:	4621      	mov	r1, r4
 80015a6:	4628      	mov	r0, r5
 80015a8:	f000 f80c 	bl	80015c4 <__swsetup_r>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d0cb      	beq.n	8001548 <__swbuf_r+0x28>
 80015b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80015b4:	e7ea      	b.n	800158c <__swbuf_r+0x6c>
 80015b6:	bf00      	nop
 80015b8:	08002510 	.word	0x08002510
 80015bc:	08002530 	.word	0x08002530
 80015c0:	080024f0 	.word	0x080024f0

080015c4 <__swsetup_r>:
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <__swsetup_r+0xcc>)
 80015c6:	b570      	push	{r4, r5, r6, lr}
 80015c8:	681d      	ldr	r5, [r3, #0]
 80015ca:	4606      	mov	r6, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	b125      	cbz	r5, 80015da <__swsetup_r+0x16>
 80015d0:	69ab      	ldr	r3, [r5, #24]
 80015d2:	b913      	cbnz	r3, 80015da <__swsetup_r+0x16>
 80015d4:	4628      	mov	r0, r5
 80015d6:	f000 f97d 	bl	80018d4 <__sinit>
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <__swsetup_r+0xd0>)
 80015dc:	429c      	cmp	r4, r3
 80015de:	d10f      	bne.n	8001600 <__swsetup_r+0x3c>
 80015e0:	686c      	ldr	r4, [r5, #4]
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015e8:	0719      	lsls	r1, r3, #28
 80015ea:	d42c      	bmi.n	8001646 <__swsetup_r+0x82>
 80015ec:	06dd      	lsls	r5, r3, #27
 80015ee:	d411      	bmi.n	8001614 <__swsetup_r+0x50>
 80015f0:	2309      	movs	r3, #9
 80015f2:	6033      	str	r3, [r6, #0]
 80015f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015f8:	81a3      	strh	r3, [r4, #12]
 80015fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fe:	e03e      	b.n	800167e <__swsetup_r+0xba>
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <__swsetup_r+0xd4>)
 8001602:	429c      	cmp	r4, r3
 8001604:	d101      	bne.n	800160a <__swsetup_r+0x46>
 8001606:	68ac      	ldr	r4, [r5, #8]
 8001608:	e7eb      	b.n	80015e2 <__swsetup_r+0x1e>
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <__swsetup_r+0xd8>)
 800160c:	429c      	cmp	r4, r3
 800160e:	bf08      	it	eq
 8001610:	68ec      	ldreq	r4, [r5, #12]
 8001612:	e7e6      	b.n	80015e2 <__swsetup_r+0x1e>
 8001614:	0758      	lsls	r0, r3, #29
 8001616:	d512      	bpl.n	800163e <__swsetup_r+0x7a>
 8001618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800161a:	b141      	cbz	r1, 800162e <__swsetup_r+0x6a>
 800161c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001620:	4299      	cmp	r1, r3
 8001622:	d002      	beq.n	800162a <__swsetup_r+0x66>
 8001624:	4630      	mov	r0, r6
 8001626:	f000 fa5b 	bl	8001ae0 <_free_r>
 800162a:	2300      	movs	r3, #0
 800162c:	6363      	str	r3, [r4, #52]	; 0x34
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001634:	81a3      	strh	r3, [r4, #12]
 8001636:	2300      	movs	r3, #0
 8001638:	6063      	str	r3, [r4, #4]
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	81a3      	strh	r3, [r4, #12]
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	b94b      	cbnz	r3, 800165e <__swsetup_r+0x9a>
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001654:	d003      	beq.n	800165e <__swsetup_r+0x9a>
 8001656:	4621      	mov	r1, r4
 8001658:	4630      	mov	r0, r6
 800165a:	f000 fa01 	bl	8001a60 <__smakebuf_r>
 800165e:	89a0      	ldrh	r0, [r4, #12]
 8001660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001664:	f010 0301 	ands.w	r3, r0, #1
 8001668:	d00a      	beq.n	8001680 <__swsetup_r+0xbc>
 800166a:	2300      	movs	r3, #0
 800166c:	60a3      	str	r3, [r4, #8]
 800166e:	6963      	ldr	r3, [r4, #20]
 8001670:	425b      	negs	r3, r3
 8001672:	61a3      	str	r3, [r4, #24]
 8001674:	6923      	ldr	r3, [r4, #16]
 8001676:	b943      	cbnz	r3, 800168a <__swsetup_r+0xc6>
 8001678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800167c:	d1ba      	bne.n	80015f4 <__swsetup_r+0x30>
 800167e:	bd70      	pop	{r4, r5, r6, pc}
 8001680:	0781      	lsls	r1, r0, #30
 8001682:	bf58      	it	pl
 8001684:	6963      	ldrpl	r3, [r4, #20]
 8001686:	60a3      	str	r3, [r4, #8]
 8001688:	e7f4      	b.n	8001674 <__swsetup_r+0xb0>
 800168a:	2000      	movs	r0, #0
 800168c:	e7f7      	b.n	800167e <__swsetup_r+0xba>
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000
 8001694:	08002510 	.word	0x08002510
 8001698:	08002530 	.word	0x08002530
 800169c:	080024f0 	.word	0x080024f0

080016a0 <__sflush_r>:
 80016a0:	898a      	ldrh	r2, [r1, #12]
 80016a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a6:	4605      	mov	r5, r0
 80016a8:	0710      	lsls	r0, r2, #28
 80016aa:	460c      	mov	r4, r1
 80016ac:	d458      	bmi.n	8001760 <__sflush_r+0xc0>
 80016ae:	684b      	ldr	r3, [r1, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dc05      	bgt.n	80016c0 <__sflush_r+0x20>
 80016b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dc02      	bgt.n	80016c0 <__sflush_r+0x20>
 80016ba:	2000      	movs	r0, #0
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016c2:	2e00      	cmp	r6, #0
 80016c4:	d0f9      	beq.n	80016ba <__sflush_r+0x1a>
 80016c6:	2300      	movs	r3, #0
 80016c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016cc:	682f      	ldr	r7, [r5, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	d032      	beq.n	8001738 <__sflush_r+0x98>
 80016d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	075a      	lsls	r2, r3, #29
 80016d8:	d505      	bpl.n	80016e6 <__sflush_r+0x46>
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	1ac0      	subs	r0, r0, r3
 80016de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016e0:	b10b      	cbz	r3, 80016e6 <__sflush_r+0x46>
 80016e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e4:	1ac0      	subs	r0, r0, r3
 80016e6:	2300      	movs	r3, #0
 80016e8:	4602      	mov	r2, r0
 80016ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016ec:	6a21      	ldr	r1, [r4, #32]
 80016ee:	4628      	mov	r0, r5
 80016f0:	47b0      	blx	r6
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	d106      	bne.n	8001706 <__sflush_r+0x66>
 80016f8:	6829      	ldr	r1, [r5, #0]
 80016fa:	291d      	cmp	r1, #29
 80016fc:	d82c      	bhi.n	8001758 <__sflush_r+0xb8>
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <__sflush_r+0x108>)
 8001700:	40ca      	lsrs	r2, r1
 8001702:	07d6      	lsls	r6, r2, #31
 8001704:	d528      	bpl.n	8001758 <__sflush_r+0xb8>
 8001706:	2200      	movs	r2, #0
 8001708:	6062      	str	r2, [r4, #4]
 800170a:	04d9      	lsls	r1, r3, #19
 800170c:	6922      	ldr	r2, [r4, #16]
 800170e:	6022      	str	r2, [r4, #0]
 8001710:	d504      	bpl.n	800171c <__sflush_r+0x7c>
 8001712:	1c42      	adds	r2, r0, #1
 8001714:	d101      	bne.n	800171a <__sflush_r+0x7a>
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	b903      	cbnz	r3, 800171c <__sflush_r+0x7c>
 800171a:	6560      	str	r0, [r4, #84]	; 0x54
 800171c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800171e:	602f      	str	r7, [r5, #0]
 8001720:	2900      	cmp	r1, #0
 8001722:	d0ca      	beq.n	80016ba <__sflush_r+0x1a>
 8001724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001728:	4299      	cmp	r1, r3
 800172a:	d002      	beq.n	8001732 <__sflush_r+0x92>
 800172c:	4628      	mov	r0, r5
 800172e:	f000 f9d7 	bl	8001ae0 <_free_r>
 8001732:	2000      	movs	r0, #0
 8001734:	6360      	str	r0, [r4, #52]	; 0x34
 8001736:	e7c1      	b.n	80016bc <__sflush_r+0x1c>
 8001738:	6a21      	ldr	r1, [r4, #32]
 800173a:	2301      	movs	r3, #1
 800173c:	4628      	mov	r0, r5
 800173e:	47b0      	blx	r6
 8001740:	1c41      	adds	r1, r0, #1
 8001742:	d1c7      	bne.n	80016d4 <__sflush_r+0x34>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0c4      	beq.n	80016d4 <__sflush_r+0x34>
 800174a:	2b1d      	cmp	r3, #29
 800174c:	d001      	beq.n	8001752 <__sflush_r+0xb2>
 800174e:	2b16      	cmp	r3, #22
 8001750:	d101      	bne.n	8001756 <__sflush_r+0xb6>
 8001752:	602f      	str	r7, [r5, #0]
 8001754:	e7b1      	b.n	80016ba <__sflush_r+0x1a>
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	81a3      	strh	r3, [r4, #12]
 800175e:	e7ad      	b.n	80016bc <__sflush_r+0x1c>
 8001760:	690f      	ldr	r7, [r1, #16]
 8001762:	2f00      	cmp	r7, #0
 8001764:	d0a9      	beq.n	80016ba <__sflush_r+0x1a>
 8001766:	0793      	lsls	r3, r2, #30
 8001768:	680e      	ldr	r6, [r1, #0]
 800176a:	bf08      	it	eq
 800176c:	694b      	ldreq	r3, [r1, #20]
 800176e:	600f      	str	r7, [r1, #0]
 8001770:	bf18      	it	ne
 8001772:	2300      	movne	r3, #0
 8001774:	eba6 0807 	sub.w	r8, r6, r7
 8001778:	608b      	str	r3, [r1, #8]
 800177a:	f1b8 0f00 	cmp.w	r8, #0
 800177e:	dd9c      	ble.n	80016ba <__sflush_r+0x1a>
 8001780:	6a21      	ldr	r1, [r4, #32]
 8001782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001784:	4643      	mov	r3, r8
 8001786:	463a      	mov	r2, r7
 8001788:	4628      	mov	r0, r5
 800178a:	47b0      	blx	r6
 800178c:	2800      	cmp	r0, #0
 800178e:	dc06      	bgt.n	800179e <__sflush_r+0xfe>
 8001790:	89a3      	ldrh	r3, [r4, #12]
 8001792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001796:	81a3      	strh	r3, [r4, #12]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800179c:	e78e      	b.n	80016bc <__sflush_r+0x1c>
 800179e:	4407      	add	r7, r0
 80017a0:	eba8 0800 	sub.w	r8, r8, r0
 80017a4:	e7e9      	b.n	800177a <__sflush_r+0xda>
 80017a6:	bf00      	nop
 80017a8:	20400001 	.word	0x20400001

080017ac <_fflush_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	690b      	ldr	r3, [r1, #16]
 80017b0:	4605      	mov	r5, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	b913      	cbnz	r3, 80017bc <_fflush_r+0x10>
 80017b6:	2500      	movs	r5, #0
 80017b8:	4628      	mov	r0, r5
 80017ba:	bd38      	pop	{r3, r4, r5, pc}
 80017bc:	b118      	cbz	r0, 80017c6 <_fflush_r+0x1a>
 80017be:	6983      	ldr	r3, [r0, #24]
 80017c0:	b90b      	cbnz	r3, 80017c6 <_fflush_r+0x1a>
 80017c2:	f000 f887 	bl	80018d4 <__sinit>
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <_fflush_r+0x6c>)
 80017c8:	429c      	cmp	r4, r3
 80017ca:	d11b      	bne.n	8001804 <_fflush_r+0x58>
 80017cc:	686c      	ldr	r4, [r5, #4]
 80017ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ef      	beq.n	80017b6 <_fflush_r+0xa>
 80017d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017d8:	07d0      	lsls	r0, r2, #31
 80017da:	d404      	bmi.n	80017e6 <_fflush_r+0x3a>
 80017dc:	0599      	lsls	r1, r3, #22
 80017de:	d402      	bmi.n	80017e6 <_fflush_r+0x3a>
 80017e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017e2:	f000 f915 	bl	8001a10 <__retarget_lock_acquire_recursive>
 80017e6:	4628      	mov	r0, r5
 80017e8:	4621      	mov	r1, r4
 80017ea:	f7ff ff59 	bl	80016a0 <__sflush_r>
 80017ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017f0:	07da      	lsls	r2, r3, #31
 80017f2:	4605      	mov	r5, r0
 80017f4:	d4e0      	bmi.n	80017b8 <_fflush_r+0xc>
 80017f6:	89a3      	ldrh	r3, [r4, #12]
 80017f8:	059b      	lsls	r3, r3, #22
 80017fa:	d4dd      	bmi.n	80017b8 <_fflush_r+0xc>
 80017fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017fe:	f000 f908 	bl	8001a12 <__retarget_lock_release_recursive>
 8001802:	e7d9      	b.n	80017b8 <_fflush_r+0xc>
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <_fflush_r+0x70>)
 8001806:	429c      	cmp	r4, r3
 8001808:	d101      	bne.n	800180e <_fflush_r+0x62>
 800180a:	68ac      	ldr	r4, [r5, #8]
 800180c:	e7df      	b.n	80017ce <_fflush_r+0x22>
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <_fflush_r+0x74>)
 8001810:	429c      	cmp	r4, r3
 8001812:	bf08      	it	eq
 8001814:	68ec      	ldreq	r4, [r5, #12]
 8001816:	e7da      	b.n	80017ce <_fflush_r+0x22>
 8001818:	08002510 	.word	0x08002510
 800181c:	08002530 	.word	0x08002530
 8001820:	080024f0 	.word	0x080024f0

08001824 <std>:
 8001824:	2300      	movs	r3, #0
 8001826:	b510      	push	{r4, lr}
 8001828:	4604      	mov	r4, r0
 800182a:	e9c0 3300 	strd	r3, r3, [r0]
 800182e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001832:	6083      	str	r3, [r0, #8]
 8001834:	8181      	strh	r1, [r0, #12]
 8001836:	6643      	str	r3, [r0, #100]	; 0x64
 8001838:	81c2      	strh	r2, [r0, #14]
 800183a:	6183      	str	r3, [r0, #24]
 800183c:	4619      	mov	r1, r3
 800183e:	2208      	movs	r2, #8
 8001840:	305c      	adds	r0, #92	; 0x5c
 8001842:	f7ff fdd7 	bl	80013f4 <memset>
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <std+0x38>)
 8001848:	6263      	str	r3, [r4, #36]	; 0x24
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <std+0x3c>)
 800184c:	62a3      	str	r3, [r4, #40]	; 0x28
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <std+0x40>)
 8001850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <std+0x44>)
 8001854:	6224      	str	r4, [r4, #32]
 8001856:	6323      	str	r3, [r4, #48]	; 0x30
 8001858:	bd10      	pop	{r4, pc}
 800185a:	bf00      	nop
 800185c:	0800229d 	.word	0x0800229d
 8001860:	080022bf 	.word	0x080022bf
 8001864:	080022f7 	.word	0x080022f7
 8001868:	0800231b 	.word	0x0800231b

0800186c <_cleanup_r>:
 800186c:	4901      	ldr	r1, [pc, #4]	; (8001874 <_cleanup_r+0x8>)
 800186e:	f000 b8af 	b.w	80019d0 <_fwalk_reent>
 8001872:	bf00      	nop
 8001874:	080017ad 	.word	0x080017ad

08001878 <__sfmoreglue>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	2268      	movs	r2, #104	; 0x68
 800187c:	1e4d      	subs	r5, r1, #1
 800187e:	4355      	muls	r5, r2
 8001880:	460e      	mov	r6, r1
 8001882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001886:	f000 f997 	bl	8001bb8 <_malloc_r>
 800188a:	4604      	mov	r4, r0
 800188c:	b140      	cbz	r0, 80018a0 <__sfmoreglue+0x28>
 800188e:	2100      	movs	r1, #0
 8001890:	e9c0 1600 	strd	r1, r6, [r0]
 8001894:	300c      	adds	r0, #12
 8001896:	60a0      	str	r0, [r4, #8]
 8001898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800189c:	f7ff fdaa 	bl	80013f4 <memset>
 80018a0:	4620      	mov	r0, r4
 80018a2:	bd70      	pop	{r4, r5, r6, pc}

080018a4 <__sfp_lock_acquire>:
 80018a4:	4801      	ldr	r0, [pc, #4]	; (80018ac <__sfp_lock_acquire+0x8>)
 80018a6:	f000 b8b3 	b.w	8001a10 <__retarget_lock_acquire_recursive>
 80018aa:	bf00      	nop
 80018ac:	20000085 	.word	0x20000085

080018b0 <__sfp_lock_release>:
 80018b0:	4801      	ldr	r0, [pc, #4]	; (80018b8 <__sfp_lock_release+0x8>)
 80018b2:	f000 b8ae 	b.w	8001a12 <__retarget_lock_release_recursive>
 80018b6:	bf00      	nop
 80018b8:	20000085 	.word	0x20000085

080018bc <__sinit_lock_acquire>:
 80018bc:	4801      	ldr	r0, [pc, #4]	; (80018c4 <__sinit_lock_acquire+0x8>)
 80018be:	f000 b8a7 	b.w	8001a10 <__retarget_lock_acquire_recursive>
 80018c2:	bf00      	nop
 80018c4:	20000086 	.word	0x20000086

080018c8 <__sinit_lock_release>:
 80018c8:	4801      	ldr	r0, [pc, #4]	; (80018d0 <__sinit_lock_release+0x8>)
 80018ca:	f000 b8a2 	b.w	8001a12 <__retarget_lock_release_recursive>
 80018ce:	bf00      	nop
 80018d0:	20000086 	.word	0x20000086

080018d4 <__sinit>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4604      	mov	r4, r0
 80018d8:	f7ff fff0 	bl	80018bc <__sinit_lock_acquire>
 80018dc:	69a3      	ldr	r3, [r4, #24]
 80018de:	b11b      	cbz	r3, 80018e8 <__sinit+0x14>
 80018e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018e4:	f7ff bff0 	b.w	80018c8 <__sinit_lock_release>
 80018e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80018ec:	6523      	str	r3, [r4, #80]	; 0x50
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <__sinit+0x68>)
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <__sinit+0x6c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80018f6:	42a3      	cmp	r3, r4
 80018f8:	bf04      	itt	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	61a3      	streq	r3, [r4, #24]
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 f820 	bl	8001944 <__sfp>
 8001904:	6060      	str	r0, [r4, #4]
 8001906:	4620      	mov	r0, r4
 8001908:	f000 f81c 	bl	8001944 <__sfp>
 800190c:	60a0      	str	r0, [r4, #8]
 800190e:	4620      	mov	r0, r4
 8001910:	f000 f818 	bl	8001944 <__sfp>
 8001914:	2200      	movs	r2, #0
 8001916:	60e0      	str	r0, [r4, #12]
 8001918:	2104      	movs	r1, #4
 800191a:	6860      	ldr	r0, [r4, #4]
 800191c:	f7ff ff82 	bl	8001824 <std>
 8001920:	68a0      	ldr	r0, [r4, #8]
 8001922:	2201      	movs	r2, #1
 8001924:	2109      	movs	r1, #9
 8001926:	f7ff ff7d 	bl	8001824 <std>
 800192a:	68e0      	ldr	r0, [r4, #12]
 800192c:	2202      	movs	r2, #2
 800192e:	2112      	movs	r1, #18
 8001930:	f7ff ff78 	bl	8001824 <std>
 8001934:	2301      	movs	r3, #1
 8001936:	61a3      	str	r3, [r4, #24]
 8001938:	e7d2      	b.n	80018e0 <__sinit+0xc>
 800193a:	bf00      	nop
 800193c:	080024ec 	.word	0x080024ec
 8001940:	0800186d 	.word	0x0800186d

08001944 <__sfp>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	4607      	mov	r7, r0
 8001948:	f7ff ffac 	bl	80018a4 <__sfp_lock_acquire>
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <__sfp+0x84>)
 800194e:	681e      	ldr	r6, [r3, #0]
 8001950:	69b3      	ldr	r3, [r6, #24]
 8001952:	b913      	cbnz	r3, 800195a <__sfp+0x16>
 8001954:	4630      	mov	r0, r6
 8001956:	f7ff ffbd 	bl	80018d4 <__sinit>
 800195a:	3648      	adds	r6, #72	; 0x48
 800195c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001960:	3b01      	subs	r3, #1
 8001962:	d503      	bpl.n	800196c <__sfp+0x28>
 8001964:	6833      	ldr	r3, [r6, #0]
 8001966:	b30b      	cbz	r3, 80019ac <__sfp+0x68>
 8001968:	6836      	ldr	r6, [r6, #0]
 800196a:	e7f7      	b.n	800195c <__sfp+0x18>
 800196c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001970:	b9d5      	cbnz	r5, 80019a8 <__sfp+0x64>
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <__sfp+0x88>)
 8001974:	60e3      	str	r3, [r4, #12]
 8001976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800197a:	6665      	str	r5, [r4, #100]	; 0x64
 800197c:	f000 f847 	bl	8001a0e <__retarget_lock_init_recursive>
 8001980:	f7ff ff96 	bl	80018b0 <__sfp_lock_release>
 8001984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800198c:	6025      	str	r5, [r4, #0]
 800198e:	61a5      	str	r5, [r4, #24]
 8001990:	2208      	movs	r2, #8
 8001992:	4629      	mov	r1, r5
 8001994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001998:	f7ff fd2c 	bl	80013f4 <memset>
 800199c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019a4:	4620      	mov	r0, r4
 80019a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019a8:	3468      	adds	r4, #104	; 0x68
 80019aa:	e7d9      	b.n	8001960 <__sfp+0x1c>
 80019ac:	2104      	movs	r1, #4
 80019ae:	4638      	mov	r0, r7
 80019b0:	f7ff ff62 	bl	8001878 <__sfmoreglue>
 80019b4:	4604      	mov	r4, r0
 80019b6:	6030      	str	r0, [r6, #0]
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1d5      	bne.n	8001968 <__sfp+0x24>
 80019bc:	f7ff ff78 	bl	80018b0 <__sfp_lock_release>
 80019c0:	230c      	movs	r3, #12
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	e7ee      	b.n	80019a4 <__sfp+0x60>
 80019c6:	bf00      	nop
 80019c8:	080024ec 	.word	0x080024ec
 80019cc:	ffff0001 	.word	0xffff0001

080019d0 <_fwalk_reent>:
 80019d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019d4:	4606      	mov	r6, r0
 80019d6:	4688      	mov	r8, r1
 80019d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019dc:	2700      	movs	r7, #0
 80019de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019e2:	f1b9 0901 	subs.w	r9, r9, #1
 80019e6:	d505      	bpl.n	80019f4 <_fwalk_reent+0x24>
 80019e8:	6824      	ldr	r4, [r4, #0]
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d1f7      	bne.n	80019de <_fwalk_reent+0xe>
 80019ee:	4638      	mov	r0, r7
 80019f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019f4:	89ab      	ldrh	r3, [r5, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d907      	bls.n	8001a0a <_fwalk_reent+0x3a>
 80019fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019fe:	3301      	adds	r3, #1
 8001a00:	d003      	beq.n	8001a0a <_fwalk_reent+0x3a>
 8001a02:	4629      	mov	r1, r5
 8001a04:	4630      	mov	r0, r6
 8001a06:	47c0      	blx	r8
 8001a08:	4307      	orrs	r7, r0
 8001a0a:	3568      	adds	r5, #104	; 0x68
 8001a0c:	e7e9      	b.n	80019e2 <_fwalk_reent+0x12>

08001a0e <__retarget_lock_init_recursive>:
 8001a0e:	4770      	bx	lr

08001a10 <__retarget_lock_acquire_recursive>:
 8001a10:	4770      	bx	lr

08001a12 <__retarget_lock_release_recursive>:
 8001a12:	4770      	bx	lr

08001a14 <__swhatbuf_r>:
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	460e      	mov	r6, r1
 8001a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	b096      	sub	sp, #88	; 0x58
 8001a20:	4614      	mov	r4, r2
 8001a22:	461d      	mov	r5, r3
 8001a24:	da08      	bge.n	8001a38 <__swhatbuf_r+0x24>
 8001a26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	602a      	str	r2, [r5, #0]
 8001a2e:	061a      	lsls	r2, r3, #24
 8001a30:	d410      	bmi.n	8001a54 <__swhatbuf_r+0x40>
 8001a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a36:	e00e      	b.n	8001a56 <__swhatbuf_r+0x42>
 8001a38:	466a      	mov	r2, sp
 8001a3a:	f000 fc95 	bl	8002368 <_fstat_r>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	dbf1      	blt.n	8001a26 <__swhatbuf_r+0x12>
 8001a42:	9a01      	ldr	r2, [sp, #4]
 8001a44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a4c:	425a      	negs	r2, r3
 8001a4e:	415a      	adcs	r2, r3
 8001a50:	602a      	str	r2, [r5, #0]
 8001a52:	e7ee      	b.n	8001a32 <__swhatbuf_r+0x1e>
 8001a54:	2340      	movs	r3, #64	; 0x40
 8001a56:	2000      	movs	r0, #0
 8001a58:	6023      	str	r3, [r4, #0]
 8001a5a:	b016      	add	sp, #88	; 0x58
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a60 <__smakebuf_r>:
 8001a60:	898b      	ldrh	r3, [r1, #12]
 8001a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a64:	079d      	lsls	r5, r3, #30
 8001a66:	4606      	mov	r6, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	d507      	bpl.n	8001a7c <__smakebuf_r+0x1c>
 8001a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	6123      	str	r3, [r4, #16]
 8001a74:	2301      	movs	r3, #1
 8001a76:	6163      	str	r3, [r4, #20]
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	ab01      	add	r3, sp, #4
 8001a7e:	466a      	mov	r2, sp
 8001a80:	f7ff ffc8 	bl	8001a14 <__swhatbuf_r>
 8001a84:	9900      	ldr	r1, [sp, #0]
 8001a86:	4605      	mov	r5, r0
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 f895 	bl	8001bb8 <_malloc_r>
 8001a8e:	b948      	cbnz	r0, 8001aa4 <__smakebuf_r+0x44>
 8001a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a94:	059a      	lsls	r2, r3, #22
 8001a96:	d4ef      	bmi.n	8001a78 <__smakebuf_r+0x18>
 8001a98:	f023 0303 	bic.w	r3, r3, #3
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	81a3      	strh	r3, [r4, #12]
 8001aa2:	e7e3      	b.n	8001a6c <__smakebuf_r+0xc>
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <__smakebuf_r+0x7c>)
 8001aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	6020      	str	r0, [r4, #0]
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	81a3      	strh	r3, [r4, #12]
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	6163      	str	r3, [r4, #20]
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	6120      	str	r0, [r4, #16]
 8001aba:	b15b      	cbz	r3, 8001ad4 <__smakebuf_r+0x74>
 8001abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f000 fc63 	bl	800238c <_isatty_r>
 8001ac6:	b128      	cbz	r0, 8001ad4 <__smakebuf_r+0x74>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	81a3      	strh	r3, [r4, #12]
 8001ad4:	89a0      	ldrh	r0, [r4, #12]
 8001ad6:	4305      	orrs	r5, r0
 8001ad8:	81a5      	strh	r5, [r4, #12]
 8001ada:	e7cd      	b.n	8001a78 <__smakebuf_r+0x18>
 8001adc:	0800186d 	.word	0x0800186d

08001ae0 <_free_r>:
 8001ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	d044      	beq.n	8001b70 <_free_r+0x90>
 8001ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aea:	9001      	str	r0, [sp, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f1a1 0404 	sub.w	r4, r1, #4
 8001af2:	bfb8      	it	lt
 8001af4:	18e4      	addlt	r4, r4, r3
 8001af6:	f000 fc6b 	bl	80023d0 <__malloc_lock>
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <_free_r+0x94>)
 8001afc:	9801      	ldr	r0, [sp, #4]
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	b933      	cbnz	r3, 8001b10 <_free_r+0x30>
 8001b02:	6063      	str	r3, [r4, #4]
 8001b04:	6014      	str	r4, [r2, #0]
 8001b06:	b003      	add	sp, #12
 8001b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b0c:	f000 bc66 	b.w	80023dc <__malloc_unlock>
 8001b10:	42a3      	cmp	r3, r4
 8001b12:	d908      	bls.n	8001b26 <_free_r+0x46>
 8001b14:	6825      	ldr	r5, [r4, #0]
 8001b16:	1961      	adds	r1, r4, r5
 8001b18:	428b      	cmp	r3, r1
 8001b1a:	bf01      	itttt	eq
 8001b1c:	6819      	ldreq	r1, [r3, #0]
 8001b1e:	685b      	ldreq	r3, [r3, #4]
 8001b20:	1949      	addeq	r1, r1, r5
 8001b22:	6021      	streq	r1, [r4, #0]
 8001b24:	e7ed      	b.n	8001b02 <_free_r+0x22>
 8001b26:	461a      	mov	r2, r3
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	b10b      	cbz	r3, 8001b30 <_free_r+0x50>
 8001b2c:	42a3      	cmp	r3, r4
 8001b2e:	d9fa      	bls.n	8001b26 <_free_r+0x46>
 8001b30:	6811      	ldr	r1, [r2, #0]
 8001b32:	1855      	adds	r5, r2, r1
 8001b34:	42a5      	cmp	r5, r4
 8001b36:	d10b      	bne.n	8001b50 <_free_r+0x70>
 8001b38:	6824      	ldr	r4, [r4, #0]
 8001b3a:	4421      	add	r1, r4
 8001b3c:	1854      	adds	r4, r2, r1
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	d1e0      	bne.n	8001b06 <_free_r+0x26>
 8001b44:	681c      	ldr	r4, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	6053      	str	r3, [r2, #4]
 8001b4a:	4421      	add	r1, r4
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	e7da      	b.n	8001b06 <_free_r+0x26>
 8001b50:	d902      	bls.n	8001b58 <_free_r+0x78>
 8001b52:	230c      	movs	r3, #12
 8001b54:	6003      	str	r3, [r0, #0]
 8001b56:	e7d6      	b.n	8001b06 <_free_r+0x26>
 8001b58:	6825      	ldr	r5, [r4, #0]
 8001b5a:	1961      	adds	r1, r4, r5
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	bf04      	itt	eq
 8001b60:	6819      	ldreq	r1, [r3, #0]
 8001b62:	685b      	ldreq	r3, [r3, #4]
 8001b64:	6063      	str	r3, [r4, #4]
 8001b66:	bf04      	itt	eq
 8001b68:	1949      	addeq	r1, r1, r5
 8001b6a:	6021      	streq	r1, [r4, #0]
 8001b6c:	6054      	str	r4, [r2, #4]
 8001b6e:	e7ca      	b.n	8001b06 <_free_r+0x26>
 8001b70:	b003      	add	sp, #12
 8001b72:	bd30      	pop	{r4, r5, pc}
 8001b74:	20000088 	.word	0x20000088

08001b78 <sbrk_aligned>:
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	4e0e      	ldr	r6, [pc, #56]	; (8001bb4 <sbrk_aligned+0x3c>)
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	6831      	ldr	r1, [r6, #0]
 8001b80:	4605      	mov	r5, r0
 8001b82:	b911      	cbnz	r1, 8001b8a <sbrk_aligned+0x12>
 8001b84:	f000 fb7a 	bl	800227c <_sbrk_r>
 8001b88:	6030      	str	r0, [r6, #0]
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 fb75 	bl	800227c <_sbrk_r>
 8001b92:	1c43      	adds	r3, r0, #1
 8001b94:	d00a      	beq.n	8001bac <sbrk_aligned+0x34>
 8001b96:	1cc4      	adds	r4, r0, #3
 8001b98:	f024 0403 	bic.w	r4, r4, #3
 8001b9c:	42a0      	cmp	r0, r4
 8001b9e:	d007      	beq.n	8001bb0 <sbrk_aligned+0x38>
 8001ba0:	1a21      	subs	r1, r4, r0
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 fb6a 	bl	800227c <_sbrk_r>
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d101      	bne.n	8001bb0 <sbrk_aligned+0x38>
 8001bac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	2000008c 	.word	0x2000008c

08001bb8 <_malloc_r>:
 8001bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bbc:	1ccd      	adds	r5, r1, #3
 8001bbe:	f025 0503 	bic.w	r5, r5, #3
 8001bc2:	3508      	adds	r5, #8
 8001bc4:	2d0c      	cmp	r5, #12
 8001bc6:	bf38      	it	cc
 8001bc8:	250c      	movcc	r5, #12
 8001bca:	2d00      	cmp	r5, #0
 8001bcc:	4607      	mov	r7, r0
 8001bce:	db01      	blt.n	8001bd4 <_malloc_r+0x1c>
 8001bd0:	42a9      	cmp	r1, r5
 8001bd2:	d905      	bls.n	8001be0 <_malloc_r+0x28>
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	2600      	movs	r6, #0
 8001bda:	4630      	mov	r0, r6
 8001bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001be0:	4e2e      	ldr	r6, [pc, #184]	; (8001c9c <_malloc_r+0xe4>)
 8001be2:	f000 fbf5 	bl	80023d0 <__malloc_lock>
 8001be6:	6833      	ldr	r3, [r6, #0]
 8001be8:	461c      	mov	r4, r3
 8001bea:	bb34      	cbnz	r4, 8001c3a <_malloc_r+0x82>
 8001bec:	4629      	mov	r1, r5
 8001bee:	4638      	mov	r0, r7
 8001bf0:	f7ff ffc2 	bl	8001b78 <sbrk_aligned>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	d14d      	bne.n	8001c96 <_malloc_r+0xde>
 8001bfa:	6834      	ldr	r4, [r6, #0]
 8001bfc:	4626      	mov	r6, r4
 8001bfe:	2e00      	cmp	r6, #0
 8001c00:	d140      	bne.n	8001c84 <_malloc_r+0xcc>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	4631      	mov	r1, r6
 8001c06:	4638      	mov	r0, r7
 8001c08:	eb04 0803 	add.w	r8, r4, r3
 8001c0c:	f000 fb36 	bl	800227c <_sbrk_r>
 8001c10:	4580      	cmp	r8, r0
 8001c12:	d13a      	bne.n	8001c8a <_malloc_r+0xd2>
 8001c14:	6821      	ldr	r1, [r4, #0]
 8001c16:	3503      	adds	r5, #3
 8001c18:	1a6d      	subs	r5, r5, r1
 8001c1a:	f025 0503 	bic.w	r5, r5, #3
 8001c1e:	3508      	adds	r5, #8
 8001c20:	2d0c      	cmp	r5, #12
 8001c22:	bf38      	it	cc
 8001c24:	250c      	movcc	r5, #12
 8001c26:	4629      	mov	r1, r5
 8001c28:	4638      	mov	r0, r7
 8001c2a:	f7ff ffa5 	bl	8001b78 <sbrk_aligned>
 8001c2e:	3001      	adds	r0, #1
 8001c30:	d02b      	beq.n	8001c8a <_malloc_r+0xd2>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	442b      	add	r3, r5
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	e00e      	b.n	8001c58 <_malloc_r+0xa0>
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	1b52      	subs	r2, r2, r5
 8001c3e:	d41e      	bmi.n	8001c7e <_malloc_r+0xc6>
 8001c40:	2a0b      	cmp	r2, #11
 8001c42:	d916      	bls.n	8001c72 <_malloc_r+0xba>
 8001c44:	1961      	adds	r1, r4, r5
 8001c46:	42a3      	cmp	r3, r4
 8001c48:	6025      	str	r5, [r4, #0]
 8001c4a:	bf18      	it	ne
 8001c4c:	6059      	strne	r1, [r3, #4]
 8001c4e:	6863      	ldr	r3, [r4, #4]
 8001c50:	bf08      	it	eq
 8001c52:	6031      	streq	r1, [r6, #0]
 8001c54:	5162      	str	r2, [r4, r5]
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f104 060b 	add.w	r6, r4, #11
 8001c5e:	f000 fbbd 	bl	80023dc <__malloc_unlock>
 8001c62:	f026 0607 	bic.w	r6, r6, #7
 8001c66:	1d23      	adds	r3, r4, #4
 8001c68:	1af2      	subs	r2, r6, r3
 8001c6a:	d0b6      	beq.n	8001bda <_malloc_r+0x22>
 8001c6c:	1b9b      	subs	r3, r3, r6
 8001c6e:	50a3      	str	r3, [r4, r2]
 8001c70:	e7b3      	b.n	8001bda <_malloc_r+0x22>
 8001c72:	6862      	ldr	r2, [r4, #4]
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	bf0c      	ite	eq
 8001c78:	6032      	streq	r2, [r6, #0]
 8001c7a:	605a      	strne	r2, [r3, #4]
 8001c7c:	e7ec      	b.n	8001c58 <_malloc_r+0xa0>
 8001c7e:	4623      	mov	r3, r4
 8001c80:	6864      	ldr	r4, [r4, #4]
 8001c82:	e7b2      	b.n	8001bea <_malloc_r+0x32>
 8001c84:	4634      	mov	r4, r6
 8001c86:	6876      	ldr	r6, [r6, #4]
 8001c88:	e7b9      	b.n	8001bfe <_malloc_r+0x46>
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4638      	mov	r0, r7
 8001c90:	f000 fba4 	bl	80023dc <__malloc_unlock>
 8001c94:	e7a1      	b.n	8001bda <_malloc_r+0x22>
 8001c96:	6025      	str	r5, [r4, #0]
 8001c98:	e7de      	b.n	8001c58 <_malloc_r+0xa0>
 8001c9a:	bf00      	nop
 8001c9c:	20000088 	.word	0x20000088

08001ca0 <__sfputc_r>:
 8001ca0:	6893      	ldr	r3, [r2, #8]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	b410      	push	{r4}
 8001ca8:	6093      	str	r3, [r2, #8]
 8001caa:	da08      	bge.n	8001cbe <__sfputc_r+0x1e>
 8001cac:	6994      	ldr	r4, [r2, #24]
 8001cae:	42a3      	cmp	r3, r4
 8001cb0:	db01      	blt.n	8001cb6 <__sfputc_r+0x16>
 8001cb2:	290a      	cmp	r1, #10
 8001cb4:	d103      	bne.n	8001cbe <__sfputc_r+0x1e>
 8001cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cba:	f7ff bc31 	b.w	8001520 <__swbuf_r>
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	1c58      	adds	r0, r3, #1
 8001cc2:	6010      	str	r0, [r2, #0]
 8001cc4:	7019      	strb	r1, [r3, #0]
 8001cc6:	4608      	mov	r0, r1
 8001cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <__sfputs_r>:
 8001cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd0:	4606      	mov	r6, r0
 8001cd2:	460f      	mov	r7, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	18d5      	adds	r5, r2, r3
 8001cd8:	42ac      	cmp	r4, r5
 8001cda:	d101      	bne.n	8001ce0 <__sfputs_r+0x12>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e007      	b.n	8001cf0 <__sfputs_r+0x22>
 8001ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ce4:	463a      	mov	r2, r7
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7ff ffda 	bl	8001ca0 <__sfputc_r>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d1f3      	bne.n	8001cd8 <__sfputs_r+0xa>
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cf4 <_vfiprintf_r>:
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf8:	460d      	mov	r5, r1
 8001cfa:	b09d      	sub	sp, #116	; 0x74
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	4698      	mov	r8, r3
 8001d00:	4606      	mov	r6, r0
 8001d02:	b118      	cbz	r0, 8001d0c <_vfiprintf_r+0x18>
 8001d04:	6983      	ldr	r3, [r0, #24]
 8001d06:	b90b      	cbnz	r3, 8001d0c <_vfiprintf_r+0x18>
 8001d08:	f7ff fde4 	bl	80018d4 <__sinit>
 8001d0c:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <_vfiprintf_r+0x240>)
 8001d0e:	429d      	cmp	r5, r3
 8001d10:	d11b      	bne.n	8001d4a <_vfiprintf_r+0x56>
 8001d12:	6875      	ldr	r5, [r6, #4]
 8001d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d16:	07d9      	lsls	r1, r3, #31
 8001d18:	d405      	bmi.n	8001d26 <_vfiprintf_r+0x32>
 8001d1a:	89ab      	ldrh	r3, [r5, #12]
 8001d1c:	059a      	lsls	r2, r3, #22
 8001d1e:	d402      	bmi.n	8001d26 <_vfiprintf_r+0x32>
 8001d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d22:	f7ff fe75 	bl	8001a10 <__retarget_lock_acquire_recursive>
 8001d26:	89ab      	ldrh	r3, [r5, #12]
 8001d28:	071b      	lsls	r3, r3, #28
 8001d2a:	d501      	bpl.n	8001d30 <_vfiprintf_r+0x3c>
 8001d2c:	692b      	ldr	r3, [r5, #16]
 8001d2e:	b9eb      	cbnz	r3, 8001d6c <_vfiprintf_r+0x78>
 8001d30:	4629      	mov	r1, r5
 8001d32:	4630      	mov	r0, r6
 8001d34:	f7ff fc46 	bl	80015c4 <__swsetup_r>
 8001d38:	b1c0      	cbz	r0, 8001d6c <_vfiprintf_r+0x78>
 8001d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d3c:	07dc      	lsls	r4, r3, #31
 8001d3e:	d50e      	bpl.n	8001d5e <_vfiprintf_r+0x6a>
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	b01d      	add	sp, #116	; 0x74
 8001d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <_vfiprintf_r+0x244>)
 8001d4c:	429d      	cmp	r5, r3
 8001d4e:	d101      	bne.n	8001d54 <_vfiprintf_r+0x60>
 8001d50:	68b5      	ldr	r5, [r6, #8]
 8001d52:	e7df      	b.n	8001d14 <_vfiprintf_r+0x20>
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <_vfiprintf_r+0x248>)
 8001d56:	429d      	cmp	r5, r3
 8001d58:	bf08      	it	eq
 8001d5a:	68f5      	ldreq	r5, [r6, #12]
 8001d5c:	e7da      	b.n	8001d14 <_vfiprintf_r+0x20>
 8001d5e:	89ab      	ldrh	r3, [r5, #12]
 8001d60:	0598      	lsls	r0, r3, #22
 8001d62:	d4ed      	bmi.n	8001d40 <_vfiprintf_r+0x4c>
 8001d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d66:	f7ff fe54 	bl	8001a12 <__retarget_lock_release_recursive>
 8001d6a:	e7e9      	b.n	8001d40 <_vfiprintf_r+0x4c>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d70:	2320      	movs	r3, #32
 8001d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d7a:	2330      	movs	r3, #48	; 0x30
 8001d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f40 <_vfiprintf_r+0x24c>
 8001d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d84:	f04f 0901 	mov.w	r9, #1
 8001d88:	4623      	mov	r3, r4
 8001d8a:	469a      	mov	sl, r3
 8001d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d90:	b10a      	cbz	r2, 8001d96 <_vfiprintf_r+0xa2>
 8001d92:	2a25      	cmp	r2, #37	; 0x25
 8001d94:	d1f9      	bne.n	8001d8a <_vfiprintf_r+0x96>
 8001d96:	ebba 0b04 	subs.w	fp, sl, r4
 8001d9a:	d00b      	beq.n	8001db4 <_vfiprintf_r+0xc0>
 8001d9c:	465b      	mov	r3, fp
 8001d9e:	4622      	mov	r2, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff ff93 	bl	8001cce <__sfputs_r>
 8001da8:	3001      	adds	r0, #1
 8001daa:	f000 80aa 	beq.w	8001f02 <_vfiprintf_r+0x20e>
 8001dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db0:	445a      	add	r2, fp
 8001db2:	9209      	str	r2, [sp, #36]	; 0x24
 8001db4:	f89a 3000 	ldrb.w	r3, [sl]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a2 	beq.w	8001f02 <_vfiprintf_r+0x20e>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dc8:	f10a 0a01 	add.w	sl, sl, #1
 8001dcc:	9304      	str	r3, [sp, #16]
 8001dce:	9307      	str	r3, [sp, #28]
 8001dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8001dd6:	4654      	mov	r4, sl
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dde:	4858      	ldr	r0, [pc, #352]	; (8001f40 <_vfiprintf_r+0x24c>)
 8001de0:	f7fe fa0e 	bl	8000200 <memchr>
 8001de4:	9a04      	ldr	r2, [sp, #16]
 8001de6:	b9d8      	cbnz	r0, 8001e20 <_vfiprintf_r+0x12c>
 8001de8:	06d1      	lsls	r1, r2, #27
 8001dea:	bf44      	itt	mi
 8001dec:	2320      	movmi	r3, #32
 8001dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001df2:	0713      	lsls	r3, r2, #28
 8001df4:	bf44      	itt	mi
 8001df6:	232b      	movmi	r3, #43	; 0x2b
 8001df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8001e00:	2b2a      	cmp	r3, #42	; 0x2a
 8001e02:	d015      	beq.n	8001e30 <_vfiprintf_r+0x13c>
 8001e04:	9a07      	ldr	r2, [sp, #28]
 8001e06:	4654      	mov	r4, sl
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f04f 0c0a 	mov.w	ip, #10
 8001e0e:	4621      	mov	r1, r4
 8001e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e14:	3b30      	subs	r3, #48	; 0x30
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	d94e      	bls.n	8001eb8 <_vfiprintf_r+0x1c4>
 8001e1a:	b1b0      	cbz	r0, 8001e4a <_vfiprintf_r+0x156>
 8001e1c:	9207      	str	r2, [sp, #28]
 8001e1e:	e014      	b.n	8001e4a <_vfiprintf_r+0x156>
 8001e20:	eba0 0308 	sub.w	r3, r0, r8
 8001e24:	fa09 f303 	lsl.w	r3, r9, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	46a2      	mov	sl, r4
 8001e2e:	e7d2      	b.n	8001dd6 <_vfiprintf_r+0xe2>
 8001e30:	9b03      	ldr	r3, [sp, #12]
 8001e32:	1d19      	adds	r1, r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	9103      	str	r1, [sp, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bfbb      	ittet	lt
 8001e3c:	425b      	neglt	r3, r3
 8001e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8001e42:	9307      	strge	r3, [sp, #28]
 8001e44:	9307      	strlt	r3, [sp, #28]
 8001e46:	bfb8      	it	lt
 8001e48:	9204      	strlt	r2, [sp, #16]
 8001e4a:	7823      	ldrb	r3, [r4, #0]
 8001e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e4e:	d10c      	bne.n	8001e6a <_vfiprintf_r+0x176>
 8001e50:	7863      	ldrb	r3, [r4, #1]
 8001e52:	2b2a      	cmp	r3, #42	; 0x2a
 8001e54:	d135      	bne.n	8001ec2 <_vfiprintf_r+0x1ce>
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	1d1a      	adds	r2, r3, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	9203      	str	r2, [sp, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bfb8      	it	lt
 8001e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e66:	3402      	adds	r4, #2
 8001e68:	9305      	str	r3, [sp, #20]
 8001e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f50 <_vfiprintf_r+0x25c>
 8001e6e:	7821      	ldrb	r1, [r4, #0]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4650      	mov	r0, sl
 8001e74:	f7fe f9c4 	bl	8000200 <memchr>
 8001e78:	b140      	cbz	r0, 8001e8c <_vfiprintf_r+0x198>
 8001e7a:	2340      	movs	r3, #64	; 0x40
 8001e7c:	eba0 000a 	sub.w	r0, r0, sl
 8001e80:	fa03 f000 	lsl.w	r0, r3, r0
 8001e84:	9b04      	ldr	r3, [sp, #16]
 8001e86:	4303      	orrs	r3, r0
 8001e88:	3401      	adds	r4, #1
 8001e8a:	9304      	str	r3, [sp, #16]
 8001e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e90:	482c      	ldr	r0, [pc, #176]	; (8001f44 <_vfiprintf_r+0x250>)
 8001e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e96:	2206      	movs	r2, #6
 8001e98:	f7fe f9b2 	bl	8000200 <memchr>
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d03f      	beq.n	8001f20 <_vfiprintf_r+0x22c>
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <_vfiprintf_r+0x254>)
 8001ea2:	bb1b      	cbnz	r3, 8001eec <_vfiprintf_r+0x1f8>
 8001ea4:	9b03      	ldr	r3, [sp, #12]
 8001ea6:	3307      	adds	r3, #7
 8001ea8:	f023 0307 	bic.w	r3, r3, #7
 8001eac:	3308      	adds	r3, #8
 8001eae:	9303      	str	r3, [sp, #12]
 8001eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eb2:	443b      	add	r3, r7
 8001eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb6:	e767      	b.n	8001d88 <_vfiprintf_r+0x94>
 8001eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e7a5      	b.n	8001e0e <_vfiprintf_r+0x11a>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	3401      	adds	r4, #1
 8001ec6:	9305      	str	r3, [sp, #20]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0c0a 	mov.w	ip, #10
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ed4:	3a30      	subs	r2, #48	; 0x30
 8001ed6:	2a09      	cmp	r2, #9
 8001ed8:	d903      	bls.n	8001ee2 <_vfiprintf_r+0x1ee>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0c5      	beq.n	8001e6a <_vfiprintf_r+0x176>
 8001ede:	9105      	str	r1, [sp, #20]
 8001ee0:	e7c3      	b.n	8001e6a <_vfiprintf_r+0x176>
 8001ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e7f0      	b.n	8001ece <_vfiprintf_r+0x1da>
 8001eec:	ab03      	add	r3, sp, #12
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	462a      	mov	r2, r5
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <_vfiprintf_r+0x258>)
 8001ef4:	a904      	add	r1, sp, #16
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f3af 8000 	nop.w
 8001efc:	4607      	mov	r7, r0
 8001efe:	1c78      	adds	r0, r7, #1
 8001f00:	d1d6      	bne.n	8001eb0 <_vfiprintf_r+0x1bc>
 8001f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f04:	07d9      	lsls	r1, r3, #31
 8001f06:	d405      	bmi.n	8001f14 <_vfiprintf_r+0x220>
 8001f08:	89ab      	ldrh	r3, [r5, #12]
 8001f0a:	059a      	lsls	r2, r3, #22
 8001f0c:	d402      	bmi.n	8001f14 <_vfiprintf_r+0x220>
 8001f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f10:	f7ff fd7f 	bl	8001a12 <__retarget_lock_release_recursive>
 8001f14:	89ab      	ldrh	r3, [r5, #12]
 8001f16:	065b      	lsls	r3, r3, #25
 8001f18:	f53f af12 	bmi.w	8001d40 <_vfiprintf_r+0x4c>
 8001f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f1e:	e711      	b.n	8001d44 <_vfiprintf_r+0x50>
 8001f20:	ab03      	add	r3, sp, #12
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	462a      	mov	r2, r5
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <_vfiprintf_r+0x258>)
 8001f28:	a904      	add	r1, sp, #16
 8001f2a:	4630      	mov	r0, r6
 8001f2c:	f000 f880 	bl	8002030 <_printf_i>
 8001f30:	e7e4      	b.n	8001efc <_vfiprintf_r+0x208>
 8001f32:	bf00      	nop
 8001f34:	08002510 	.word	0x08002510
 8001f38:	08002530 	.word	0x08002530
 8001f3c:	080024f0 	.word	0x080024f0
 8001f40:	08002550 	.word	0x08002550
 8001f44:	0800255a 	.word	0x0800255a
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	08001ccf 	.word	0x08001ccf
 8001f50:	08002556 	.word	0x08002556

08001f54 <_printf_common>:
 8001f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f58:	4616      	mov	r6, r2
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	688a      	ldr	r2, [r1, #8]
 8001f5e:	690b      	ldr	r3, [r1, #16]
 8001f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bfb8      	it	lt
 8001f68:	4613      	movlt	r3, r2
 8001f6a:	6033      	str	r3, [r6, #0]
 8001f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f70:	4607      	mov	r7, r0
 8001f72:	460c      	mov	r4, r1
 8001f74:	b10a      	cbz	r2, 8001f7a <_printf_common+0x26>
 8001f76:	3301      	adds	r3, #1
 8001f78:	6033      	str	r3, [r6, #0]
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	0699      	lsls	r1, r3, #26
 8001f7e:	bf42      	ittt	mi
 8001f80:	6833      	ldrmi	r3, [r6, #0]
 8001f82:	3302      	addmi	r3, #2
 8001f84:	6033      	strmi	r3, [r6, #0]
 8001f86:	6825      	ldr	r5, [r4, #0]
 8001f88:	f015 0506 	ands.w	r5, r5, #6
 8001f8c:	d106      	bne.n	8001f9c <_printf_common+0x48>
 8001f8e:	f104 0a19 	add.w	sl, r4, #25
 8001f92:	68e3      	ldr	r3, [r4, #12]
 8001f94:	6832      	ldr	r2, [r6, #0]
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	42ab      	cmp	r3, r5
 8001f9a:	dc26      	bgt.n	8001fea <_printf_common+0x96>
 8001f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fa0:	1e13      	subs	r3, r2, #0
 8001fa2:	6822      	ldr	r2, [r4, #0]
 8001fa4:	bf18      	it	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	0692      	lsls	r2, r2, #26
 8001faa:	d42b      	bmi.n	8002004 <_printf_common+0xb0>
 8001fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	47c0      	blx	r8
 8001fb6:	3001      	adds	r0, #1
 8001fb8:	d01e      	beq.n	8001ff8 <_printf_common+0xa4>
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	68e5      	ldr	r5, [r4, #12]
 8001fbe:	6832      	ldr	r2, [r6, #0]
 8001fc0:	f003 0306 	and.w	r3, r3, #6
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	bf08      	it	eq
 8001fc8:	1aad      	subeq	r5, r5, r2
 8001fca:	68a3      	ldr	r3, [r4, #8]
 8001fcc:	6922      	ldr	r2, [r4, #16]
 8001fce:	bf0c      	ite	eq
 8001fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fd4:	2500      	movne	r5, #0
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	bfc4      	itt	gt
 8001fda:	1a9b      	subgt	r3, r3, r2
 8001fdc:	18ed      	addgt	r5, r5, r3
 8001fde:	2600      	movs	r6, #0
 8001fe0:	341a      	adds	r4, #26
 8001fe2:	42b5      	cmp	r5, r6
 8001fe4:	d11a      	bne.n	800201c <_printf_common+0xc8>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e008      	b.n	8001ffc <_printf_common+0xa8>
 8001fea:	2301      	movs	r3, #1
 8001fec:	4652      	mov	r2, sl
 8001fee:	4649      	mov	r1, r9
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	47c0      	blx	r8
 8001ff4:	3001      	adds	r0, #1
 8001ff6:	d103      	bne.n	8002000 <_printf_common+0xac>
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002000:	3501      	adds	r5, #1
 8002002:	e7c6      	b.n	8001f92 <_printf_common+0x3e>
 8002004:	18e1      	adds	r1, r4, r3
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	2030      	movs	r0, #48	; 0x30
 800200a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800200e:	4422      	add	r2, r4
 8002010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002018:	3302      	adds	r3, #2
 800201a:	e7c7      	b.n	8001fac <_printf_common+0x58>
 800201c:	2301      	movs	r3, #1
 800201e:	4622      	mov	r2, r4
 8002020:	4649      	mov	r1, r9
 8002022:	4638      	mov	r0, r7
 8002024:	47c0      	blx	r8
 8002026:	3001      	adds	r0, #1
 8002028:	d0e6      	beq.n	8001ff8 <_printf_common+0xa4>
 800202a:	3601      	adds	r6, #1
 800202c:	e7d9      	b.n	8001fe2 <_printf_common+0x8e>
	...

08002030 <_printf_i>:
 8002030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002034:	7e0f      	ldrb	r7, [r1, #24]
 8002036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002038:	2f78      	cmp	r7, #120	; 0x78
 800203a:	4691      	mov	r9, r2
 800203c:	4680      	mov	r8, r0
 800203e:	460c      	mov	r4, r1
 8002040:	469a      	mov	sl, r3
 8002042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002046:	d807      	bhi.n	8002058 <_printf_i+0x28>
 8002048:	2f62      	cmp	r7, #98	; 0x62
 800204a:	d80a      	bhi.n	8002062 <_printf_i+0x32>
 800204c:	2f00      	cmp	r7, #0
 800204e:	f000 80d8 	beq.w	8002202 <_printf_i+0x1d2>
 8002052:	2f58      	cmp	r7, #88	; 0x58
 8002054:	f000 80a3 	beq.w	800219e <_printf_i+0x16e>
 8002058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800205c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002060:	e03a      	b.n	80020d8 <_printf_i+0xa8>
 8002062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002066:	2b15      	cmp	r3, #21
 8002068:	d8f6      	bhi.n	8002058 <_printf_i+0x28>
 800206a:	a101      	add	r1, pc, #4	; (adr r1, 8002070 <_printf_i+0x40>)
 800206c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002070:	080020c9 	.word	0x080020c9
 8002074:	080020dd 	.word	0x080020dd
 8002078:	08002059 	.word	0x08002059
 800207c:	08002059 	.word	0x08002059
 8002080:	08002059 	.word	0x08002059
 8002084:	08002059 	.word	0x08002059
 8002088:	080020dd 	.word	0x080020dd
 800208c:	08002059 	.word	0x08002059
 8002090:	08002059 	.word	0x08002059
 8002094:	08002059 	.word	0x08002059
 8002098:	08002059 	.word	0x08002059
 800209c:	080021e9 	.word	0x080021e9
 80020a0:	0800210d 	.word	0x0800210d
 80020a4:	080021cb 	.word	0x080021cb
 80020a8:	08002059 	.word	0x08002059
 80020ac:	08002059 	.word	0x08002059
 80020b0:	0800220b 	.word	0x0800220b
 80020b4:	08002059 	.word	0x08002059
 80020b8:	0800210d 	.word	0x0800210d
 80020bc:	08002059 	.word	0x08002059
 80020c0:	08002059 	.word	0x08002059
 80020c4:	080021d3 	.word	0x080021d3
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	1d1a      	adds	r2, r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	602a      	str	r2, [r5, #0]
 80020d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020d8:	2301      	movs	r3, #1
 80020da:	e0a3      	b.n	8002224 <_printf_i+0x1f4>
 80020dc:	6820      	ldr	r0, [r4, #0]
 80020de:	6829      	ldr	r1, [r5, #0]
 80020e0:	0606      	lsls	r6, r0, #24
 80020e2:	f101 0304 	add.w	r3, r1, #4
 80020e6:	d50a      	bpl.n	80020fe <_printf_i+0xce>
 80020e8:	680e      	ldr	r6, [r1, #0]
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	2e00      	cmp	r6, #0
 80020ee:	da03      	bge.n	80020f8 <_printf_i+0xc8>
 80020f0:	232d      	movs	r3, #45	; 0x2d
 80020f2:	4276      	negs	r6, r6
 80020f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f8:	485e      	ldr	r0, [pc, #376]	; (8002274 <_printf_i+0x244>)
 80020fa:	230a      	movs	r3, #10
 80020fc:	e019      	b.n	8002132 <_printf_i+0x102>
 80020fe:	680e      	ldr	r6, [r1, #0]
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002106:	bf18      	it	ne
 8002108:	b236      	sxthne	r6, r6
 800210a:	e7ef      	b.n	80020ec <_printf_i+0xbc>
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	6820      	ldr	r0, [r4, #0]
 8002110:	1d19      	adds	r1, r3, #4
 8002112:	6029      	str	r1, [r5, #0]
 8002114:	0601      	lsls	r1, r0, #24
 8002116:	d501      	bpl.n	800211c <_printf_i+0xec>
 8002118:	681e      	ldr	r6, [r3, #0]
 800211a:	e002      	b.n	8002122 <_printf_i+0xf2>
 800211c:	0646      	lsls	r6, r0, #25
 800211e:	d5fb      	bpl.n	8002118 <_printf_i+0xe8>
 8002120:	881e      	ldrh	r6, [r3, #0]
 8002122:	4854      	ldr	r0, [pc, #336]	; (8002274 <_printf_i+0x244>)
 8002124:	2f6f      	cmp	r7, #111	; 0x6f
 8002126:	bf0c      	ite	eq
 8002128:	2308      	moveq	r3, #8
 800212a:	230a      	movne	r3, #10
 800212c:	2100      	movs	r1, #0
 800212e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002132:	6865      	ldr	r5, [r4, #4]
 8002134:	60a5      	str	r5, [r4, #8]
 8002136:	2d00      	cmp	r5, #0
 8002138:	bfa2      	ittt	ge
 800213a:	6821      	ldrge	r1, [r4, #0]
 800213c:	f021 0104 	bicge.w	r1, r1, #4
 8002140:	6021      	strge	r1, [r4, #0]
 8002142:	b90e      	cbnz	r6, 8002148 <_printf_i+0x118>
 8002144:	2d00      	cmp	r5, #0
 8002146:	d04d      	beq.n	80021e4 <_printf_i+0x1b4>
 8002148:	4615      	mov	r5, r2
 800214a:	fbb6 f1f3 	udiv	r1, r6, r3
 800214e:	fb03 6711 	mls	r7, r3, r1, r6
 8002152:	5dc7      	ldrb	r7, [r0, r7]
 8002154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002158:	4637      	mov	r7, r6
 800215a:	42bb      	cmp	r3, r7
 800215c:	460e      	mov	r6, r1
 800215e:	d9f4      	bls.n	800214a <_printf_i+0x11a>
 8002160:	2b08      	cmp	r3, #8
 8002162:	d10b      	bne.n	800217c <_printf_i+0x14c>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	07de      	lsls	r6, r3, #31
 8002168:	d508      	bpl.n	800217c <_printf_i+0x14c>
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	6861      	ldr	r1, [r4, #4]
 800216e:	4299      	cmp	r1, r3
 8002170:	bfde      	ittt	le
 8002172:	2330      	movle	r3, #48	; 0x30
 8002174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002178:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800217c:	1b52      	subs	r2, r2, r5
 800217e:	6122      	str	r2, [r4, #16]
 8002180:	f8cd a000 	str.w	sl, [sp]
 8002184:	464b      	mov	r3, r9
 8002186:	aa03      	add	r2, sp, #12
 8002188:	4621      	mov	r1, r4
 800218a:	4640      	mov	r0, r8
 800218c:	f7ff fee2 	bl	8001f54 <_printf_common>
 8002190:	3001      	adds	r0, #1
 8002192:	d14c      	bne.n	800222e <_printf_i+0x1fe>
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	b004      	add	sp, #16
 800219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219e:	4835      	ldr	r0, [pc, #212]	; (8002274 <_printf_i+0x244>)
 80021a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021a4:	6829      	ldr	r1, [r5, #0]
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80021ac:	6029      	str	r1, [r5, #0]
 80021ae:	061d      	lsls	r5, r3, #24
 80021b0:	d514      	bpl.n	80021dc <_printf_i+0x1ac>
 80021b2:	07df      	lsls	r7, r3, #31
 80021b4:	bf44      	itt	mi
 80021b6:	f043 0320 	orrmi.w	r3, r3, #32
 80021ba:	6023      	strmi	r3, [r4, #0]
 80021bc:	b91e      	cbnz	r6, 80021c6 <_printf_i+0x196>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f023 0320 	bic.w	r3, r3, #32
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	2310      	movs	r3, #16
 80021c8:	e7b0      	b.n	800212c <_printf_i+0xfc>
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	2378      	movs	r3, #120	; 0x78
 80021d4:	4828      	ldr	r0, [pc, #160]	; (8002278 <_printf_i+0x248>)
 80021d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021da:	e7e3      	b.n	80021a4 <_printf_i+0x174>
 80021dc:	0659      	lsls	r1, r3, #25
 80021de:	bf48      	it	mi
 80021e0:	b2b6      	uxthmi	r6, r6
 80021e2:	e7e6      	b.n	80021b2 <_printf_i+0x182>
 80021e4:	4615      	mov	r5, r2
 80021e6:	e7bb      	b.n	8002160 <_printf_i+0x130>
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	6961      	ldr	r1, [r4, #20]
 80021ee:	1d18      	adds	r0, r3, #4
 80021f0:	6028      	str	r0, [r5, #0]
 80021f2:	0635      	lsls	r5, r6, #24
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	d501      	bpl.n	80021fc <_printf_i+0x1cc>
 80021f8:	6019      	str	r1, [r3, #0]
 80021fa:	e002      	b.n	8002202 <_printf_i+0x1d2>
 80021fc:	0670      	lsls	r0, r6, #25
 80021fe:	d5fb      	bpl.n	80021f8 <_printf_i+0x1c8>
 8002200:	8019      	strh	r1, [r3, #0]
 8002202:	2300      	movs	r3, #0
 8002204:	6123      	str	r3, [r4, #16]
 8002206:	4615      	mov	r5, r2
 8002208:	e7ba      	b.n	8002180 <_printf_i+0x150>
 800220a:	682b      	ldr	r3, [r5, #0]
 800220c:	1d1a      	adds	r2, r3, #4
 800220e:	602a      	str	r2, [r5, #0]
 8002210:	681d      	ldr	r5, [r3, #0]
 8002212:	6862      	ldr	r2, [r4, #4]
 8002214:	2100      	movs	r1, #0
 8002216:	4628      	mov	r0, r5
 8002218:	f7fd fff2 	bl	8000200 <memchr>
 800221c:	b108      	cbz	r0, 8002222 <_printf_i+0x1f2>
 800221e:	1b40      	subs	r0, r0, r5
 8002220:	6060      	str	r0, [r4, #4]
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	6123      	str	r3, [r4, #16]
 8002226:	2300      	movs	r3, #0
 8002228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800222c:	e7a8      	b.n	8002180 <_printf_i+0x150>
 800222e:	6923      	ldr	r3, [r4, #16]
 8002230:	462a      	mov	r2, r5
 8002232:	4649      	mov	r1, r9
 8002234:	4640      	mov	r0, r8
 8002236:	47d0      	blx	sl
 8002238:	3001      	adds	r0, #1
 800223a:	d0ab      	beq.n	8002194 <_printf_i+0x164>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	079b      	lsls	r3, r3, #30
 8002240:	d413      	bmi.n	800226a <_printf_i+0x23a>
 8002242:	68e0      	ldr	r0, [r4, #12]
 8002244:	9b03      	ldr	r3, [sp, #12]
 8002246:	4298      	cmp	r0, r3
 8002248:	bfb8      	it	lt
 800224a:	4618      	movlt	r0, r3
 800224c:	e7a4      	b.n	8002198 <_printf_i+0x168>
 800224e:	2301      	movs	r3, #1
 8002250:	4632      	mov	r2, r6
 8002252:	4649      	mov	r1, r9
 8002254:	4640      	mov	r0, r8
 8002256:	47d0      	blx	sl
 8002258:	3001      	adds	r0, #1
 800225a:	d09b      	beq.n	8002194 <_printf_i+0x164>
 800225c:	3501      	adds	r5, #1
 800225e:	68e3      	ldr	r3, [r4, #12]
 8002260:	9903      	ldr	r1, [sp, #12]
 8002262:	1a5b      	subs	r3, r3, r1
 8002264:	42ab      	cmp	r3, r5
 8002266:	dcf2      	bgt.n	800224e <_printf_i+0x21e>
 8002268:	e7eb      	b.n	8002242 <_printf_i+0x212>
 800226a:	2500      	movs	r5, #0
 800226c:	f104 0619 	add.w	r6, r4, #25
 8002270:	e7f5      	b.n	800225e <_printf_i+0x22e>
 8002272:	bf00      	nop
 8002274:	08002561 	.word	0x08002561
 8002278:	08002572 	.word	0x08002572

0800227c <_sbrk_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	4d06      	ldr	r5, [pc, #24]	; (8002298 <_sbrk_r+0x1c>)
 8002280:	2300      	movs	r3, #0
 8002282:	4604      	mov	r4, r0
 8002284:	4608      	mov	r0, r1
 8002286:	602b      	str	r3, [r5, #0]
 8002288:	f7fe fb36 	bl	80008f8 <_sbrk>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	d102      	bne.n	8002296 <_sbrk_r+0x1a>
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	b103      	cbz	r3, 8002296 <_sbrk_r+0x1a>
 8002294:	6023      	str	r3, [r4, #0]
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	20000090 	.word	0x20000090

0800229c <__sread>:
 800229c:	b510      	push	{r4, lr}
 800229e:	460c      	mov	r4, r1
 80022a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a4:	f000 f8a0 	bl	80023e8 <_read_r>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	bfab      	itete	ge
 80022ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022ae:	89a3      	ldrhlt	r3, [r4, #12]
 80022b0:	181b      	addge	r3, r3, r0
 80022b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022b6:	bfac      	ite	ge
 80022b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80022ba:	81a3      	strhlt	r3, [r4, #12]
 80022bc:	bd10      	pop	{r4, pc}

080022be <__swrite>:
 80022be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c2:	461f      	mov	r7, r3
 80022c4:	898b      	ldrh	r3, [r1, #12]
 80022c6:	05db      	lsls	r3, r3, #23
 80022c8:	4605      	mov	r5, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	4616      	mov	r6, r2
 80022ce:	d505      	bpl.n	80022dc <__swrite+0x1e>
 80022d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d4:	2302      	movs	r3, #2
 80022d6:	2200      	movs	r2, #0
 80022d8:	f000 f868 	bl	80023ac <_lseek_r>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	4632      	mov	r2, r6
 80022ea:	463b      	mov	r3, r7
 80022ec:	4628      	mov	r0, r5
 80022ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022f2:	f000 b817 	b.w	8002324 <_write_r>

080022f6 <__sseek>:
 80022f6:	b510      	push	{r4, lr}
 80022f8:	460c      	mov	r4, r1
 80022fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fe:	f000 f855 	bl	80023ac <_lseek_r>
 8002302:	1c43      	adds	r3, r0, #1
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	bf15      	itete	ne
 8002308:	6560      	strne	r0, [r4, #84]	; 0x54
 800230a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800230e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002312:	81a3      	strheq	r3, [r4, #12]
 8002314:	bf18      	it	ne
 8002316:	81a3      	strhne	r3, [r4, #12]
 8002318:	bd10      	pop	{r4, pc}

0800231a <__sclose>:
 800231a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231e:	f000 b813 	b.w	8002348 <_close_r>
	...

08002324 <_write_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	; (8002344 <_write_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe fa8f 	bl	8000856 <_write>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_write_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_write_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	20000090 	.word	0x20000090

08002348 <_close_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4d06      	ldr	r5, [pc, #24]	; (8002364 <_close_r+0x1c>)
 800234c:	2300      	movs	r3, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	602b      	str	r3, [r5, #0]
 8002354:	f7fe fa9b 	bl	800088e <_close>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_close_r+0x1a>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_close_r+0x1a>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	20000090 	.word	0x20000090

08002368 <_fstat_r>:
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4d07      	ldr	r5, [pc, #28]	; (8002388 <_fstat_r+0x20>)
 800236c:	2300      	movs	r3, #0
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	602b      	str	r3, [r5, #0]
 8002376:	f7fe fa96 	bl	80008a6 <_fstat>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d102      	bne.n	8002384 <_fstat_r+0x1c>
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	b103      	cbz	r3, 8002384 <_fstat_r+0x1c>
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	bd38      	pop	{r3, r4, r5, pc}
 8002386:	bf00      	nop
 8002388:	20000090 	.word	0x20000090

0800238c <_isatty_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4d06      	ldr	r5, [pc, #24]	; (80023a8 <_isatty_r+0x1c>)
 8002390:	2300      	movs	r3, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	f7fe fa95 	bl	80008c6 <_isatty>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_isatty_r+0x1a>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_isatty_r+0x1a>
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	20000090 	.word	0x20000090

080023ac <_lseek_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d07      	ldr	r5, [pc, #28]	; (80023cc <_lseek_r+0x20>)
 80023b0:	4604      	mov	r4, r0
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	2200      	movs	r2, #0
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe fa8e 	bl	80008dc <_lseek>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_lseek_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_lseek_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	20000090 	.word	0x20000090

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <__malloc_lock+0x8>)
 80023d2:	f7ff bb1d 	b.w	8001a10 <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	20000084 	.word	0x20000084

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	; (80023e4 <__malloc_unlock+0x8>)
 80023de:	f7ff bb18 	b.w	8001a12 <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	20000084 	.word	0x20000084

080023e8 <_read_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d07      	ldr	r5, [pc, #28]	; (8002408 <_read_r+0x20>)
 80023ec:	4604      	mov	r4, r0
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	602a      	str	r2, [r5, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7fe fa10 	bl	800081c <_read>
 80023fc:	1c43      	adds	r3, r0, #1
 80023fe:	d102      	bne.n	8002406 <_read_r+0x1e>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	b103      	cbz	r3, 8002406 <_read_r+0x1e>
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	20000090 	.word	0x20000090

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
