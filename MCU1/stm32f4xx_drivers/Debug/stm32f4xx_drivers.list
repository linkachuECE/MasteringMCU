
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d14  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fbc  08000fbc  00010fc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000fbc  08000fbc  00010fc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fbc  08000fc4  00010fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010fc4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010fc4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001460  00000000  00000000  00010ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000044e  00000000  00000000  00012454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  000128a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000118  00000000  00000000  000129f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f67  00000000  00000000  00012b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019f6  00000000  00000000  00015a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b908  00000000  00000000  0001746d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00022d75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004bc  00000000  00000000  00022dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ea4 	.word	0x08000ea4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ea4 	.word	0x08000ea4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#include "stm32f407xx.h"
#include "stm32407xx_spi_driver.h"
#include <string.h>
#include <stdio.h>

void delay(void){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 20000; i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000210:	4293      	cmp	r3, r2
 8000212:	d9f7      	bls.n	8000204 <delay+0xc>
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a3b      	ldr	r2, [pc, #236]	; (800031c <SPI2_GPIO_Inits+0xf8>)
 8000230:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	220f      	movs	r2, #15
 8000236:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2202      	movs	r2, #2
 800023c:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2203      	movs	r2, #3
 8000242:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2205      	movs	r2, #5
 8000254:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a30      	ldr	r2, [pc, #192]	; (800031c <SPI2_GPIO_Inits+0xf8>)
 800025a:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	220e      	movs	r2, #14
 8000260:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2202      	movs	r2, #2
 8000266:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2203      	movs	r2, #3
 800026c:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2200      	movs	r2, #0
 8000272:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2200      	movs	r2, #0
 8000278:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2205      	movs	r2, #5
 800027e:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a26      	ldr	r2, [pc, #152]	; (800031c <SPI2_GPIO_Inits+0xf8>)
 8000284:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	220d      	movs	r2, #13
 800028a:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2202      	movs	r2, #2
 8000290:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2203      	movs	r2, #3
 8000296:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2205      	movs	r2, #5
 80002aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <SPI2_GPIO_Inits+0xf8>)
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	220c      	movs	r2, #12
 80002b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2202      	movs	r2, #2
 80002c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2203      	movs	r2, #3
 80002c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2200      	movs	r2, #0
 80002d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2205      	movs	r2, #5
 80002e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <SPI2_GPIO_Inits+0xf8>)
 80002e8:	f000 f8ec 	bl	80004c4 <GPIO_PeriClockControl>

	GPIO_Init(&(SPIPort->MOSI));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f9d4 	bl	800069c <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	330c      	adds	r3, #12
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f9cf 	bl	800069c <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3318      	adds	r3, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f9ca 	bl	800069c <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3324      	adds	r3, #36	; 0x24
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f9c5 	bl	800069c <GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40020400 	.word	0x40020400

08000320 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	 * - Low Clock polarity, first phase detection
	 * - Hardware controlled slave select
	 * - Single master
	 */

	SPIDevice->pSPIx = SPI2;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <SPI2_Init+0x58>)
 800032c:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2201      	movs	r2, #1
 8000332:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2201      	movs	r2, #1
 8000338:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV8;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2202      	movs	r2, #2
 800033e:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_HW;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_LSBFIRST;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2201      	movs	r2, #1
 800035c:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 fc68 	bl	8000c34 <SPI_Init>

	// Enable SSOE so that NSS goes low when SPE goes high
	SPI_SSOEControl(SPIDevice->pSPIx, ENABLE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fd0c 	bl	8000d88 <SPI_SSOEControl>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40003800 	.word	0x40003800

0800037c <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* USRPB){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	USRPB->pGPIOx = GPIOA;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <USRBTN_Init+0x40>)
 8000388:	601a      	str	r2, [r3, #0]
	USRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	711a      	strb	r2, [r3, #4]
	USRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2200      	movs	r2, #0
 8000394:	715a      	strb	r2, [r3, #5]
	USRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2202      	movs	r2, #2
 800039a:	719a      	strb	r2, [r3, #6]
	USRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2200      	movs	r2, #0
 80003a0:	71da      	strb	r2, [r3, #7]

	GPIO_Init(USRPB);
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 f97a 	bl	800069c <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2101      	movs	r1, #1
 80003ac:	2006      	movs	r0, #6
 80003ae:	f000 fb35 	bl	8000a1c <GPIO_IRQInterruptConfig>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40020000 	.word	0x40020000

080003c0 <main>:

int main(void){
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b095      	sub	sp, #84	; 0x54
 80003c4:	af00      	add	r7, sp, #0

	// Initialize the appropriate GPIO pins on port B
	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff2a 	bl	8000224 <SPI2_GPIO_Inits>

	// Initialize the SPI2 peripheral
	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ffa3 	bl	8000320 <SPI2_Init>

	// Initialize user button and interrupts
	GPIO_Handle_t USRPB;
	memset(&USRPB, 0, sizeof(USRPB));
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	220c      	movs	r2, #12
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fd57 	bl	8000e94 <memset>
	USRBTN_Init(&USRPB);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffc7 	bl	800037c <USRBTN_Init>

	char* myString = "In the name of Robert of the house Baratheon, the first of his name, king of the Andals and the first men, lord of the seven kingdoms and protector of the realm. I Eddard Of the house Stark, lord of Winterfell and warden of the north sentence you to die.";
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <main+0xa8>)
 80003f0:	64fb      	str	r3, [r7, #76]	; 0x4c

	SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fc8e 	bl	8000d18 <SPI_PeripheralControl>

	while(1){
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003fc:	bf00      	nop
 80003fe:	2100      	movs	r1, #0
 8000400:	481a      	ldr	r0, [pc, #104]	; (800046c <main+0xac>)
 8000402:	f000 faf5 	bl	80009f0 <GPIO_ReadFromInputPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <main+0x3e>
		delay();
 800040c:	f7ff fef4 	bl	80001f8 <delay>

		SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2101      	movs	r1, #1
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fc7f 	bl	8000d18 <SPI_PeripheralControl>

		uint8_t stringSize = strlen(myString);
 800041a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800041c:	f7ff fee4 	bl	80001e8 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b2db      	uxtb	r3, r3
 8000424:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(mySPIDevice.pSPIx, &stringSize, sizeof(uint8_t));
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	1cf9      	adds	r1, r7, #3
 800042a:	2201      	movs	r2, #1
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fcdb 	bl	8000de8 <SPI_SendData>

		SPI_SendData(mySPIDevice.pSPIx, (uint8_t*)myString, strlen(myString));
 8000432:	693c      	ldr	r4, [r7, #16]
 8000434:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000436:	f7ff fed7 	bl	80001e8 <strlen>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000440:	4620      	mov	r0, r4
 8000442:	f000 fcd1 	bl	8000de8 <SPI_SendData>
		delay();
 8000446:	f7ff fed7 	bl	80001f8 <delay>

		while(SPI_GetFlagStatus(mySPIDevice.pSPIx, SPI_BSY_FLAG));
 800044a:	bf00      	nop
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fcb5 	bl	8000dc0 <SPI_GetFlagStatus>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f7      	bne.n	800044c <main+0x8c>

		SPI_PeripheralControl(mySPIDevice.pSPIx, DISABLE);
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fc59 	bl	8000d18 <SPI_PeripheralControl>
	while(1){
 8000466:	e7c9      	b.n	80003fc <main+0x3c>
 8000468:	08000ebc 	.word	0x08000ebc
 800046c:	40020000 	.word	0x40020000

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 fcd5 	bl	8000e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff ff8d 	bl	80003c0 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b4:	08000fc4 	.word	0x08000fc4
  ldr r2, =_sbss
 80004b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004bc:	2000001c 	.word	0x2000001c

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d162      	bne.n	800059c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a66      	ldr	r2, [pc, #408]	; (8000674 <GPIO_PeriClockControl+0x1b0>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80004de:	4b66      	ldr	r3, [pc, #408]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a65      	ldr	r2, [pc, #404]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80004ea:	e0bc      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a63      	ldr	r2, [pc, #396]	; (800067c <GPIO_PeriClockControl+0x1b8>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004f4:	4b60      	ldr	r3, [pc, #384]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a5f      	ldr	r2, [pc, #380]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e0b1      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a5e      	ldr	r2, [pc, #376]	; (8000680 <GPIO_PeriClockControl+0x1bc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800050a:	4b5b      	ldr	r3, [pc, #364]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a5a      	ldr	r2, [pc, #360]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e0a6      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a5a      	ldr	r2, [pc, #360]	; (8000684 <GPIO_PeriClockControl+0x1c0>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000520:	4b55      	ldr	r3, [pc, #340]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a54      	ldr	r2, [pc, #336]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e09b      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a55      	ldr	r2, [pc, #340]	; (8000688 <GPIO_PeriClockControl+0x1c4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000536:	4b50      	ldr	r3, [pc, #320]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a4f      	ldr	r2, [pc, #316]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800053c:	f043 0310 	orr.w	r3, r3, #16
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e090      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a51      	ldr	r2, [pc, #324]	; (800068c <GPIO_PeriClockControl+0x1c8>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800054c:	4b4a      	ldr	r3, [pc, #296]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a49      	ldr	r2, [pc, #292]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e085      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a4c      	ldr	r2, [pc, #304]	; (8000690 <GPIO_PeriClockControl+0x1cc>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000562:	4b45      	ldr	r3, [pc, #276]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a44      	ldr	r2, [pc, #272]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e07a      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <GPIO_PeriClockControl+0x1d0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000578:	4b3f      	ldr	r3, [pc, #252]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a3e      	ldr	r2, [pc, #248]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e06f      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a43      	ldr	r2, [pc, #268]	; (8000698 <GPIO_PeriClockControl+0x1d4>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d16b      	bne.n	8000666 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 800058e:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a39      	ldr	r2, [pc, #228]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e064      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d161      	bne.n	8000666 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a33      	ldr	r2, [pc, #204]	; (8000674 <GPIO_PeriClockControl+0x1b0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a32      	ldr	r2, [pc, #200]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005b0:	f023 0301 	bic.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b6:	e056      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <GPIO_PeriClockControl+0x1b8>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a2c      	ldr	r2, [pc, #176]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005cc:	e04b      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <GPIO_PeriClockControl+0x1bc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a27      	ldr	r2, [pc, #156]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005dc:	f023 0304 	bic.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e2:	e040      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a27      	ldr	r2, [pc, #156]	; (8000684 <GPIO_PeriClockControl+0x1c0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 80005f2:	f023 0308 	bic.w	r3, r3, #8
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f8:	e035      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <GPIO_PeriClockControl+0x1c4>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000608:	f023 0310 	bic.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060e:	e02a      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <GPIO_PeriClockControl+0x1c8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d106      	bne.n	8000626 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800061e:	f023 0320 	bic.w	r3, r3, #32
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000624:	e01f      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a19      	ldr	r2, [pc, #100]	; (8000690 <GPIO_PeriClockControl+0x1cc>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063a:	e014      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <GPIO_PeriClockControl+0x1d0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d106      	bne.n	8000652 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800064a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000650:	e009      	b.n	8000666 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <GPIO_PeriClockControl+0x1d4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d105      	bne.n	8000666 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <GPIO_PeriClockControl+0x1b4>)
 8000660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40020000 	.word	0x40020000
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400
 8000680:	40020800 	.word	0x40020800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40021000 	.word	0x40021000
 800068c:	40021400 	.word	0x40021400
 8000690:	40021800 	.word	0x40021800
 8000694:	40021c00 	.word	0x40021c00
 8000698:	40022000 	.word	0x40022000

0800069c <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff0a 	bl	80004c4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d820      	bhi.n	80006fe <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6819      	ldr	r1, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e0d0      	b.n	80008a0 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d117      	bne.n	8000736 <GPIO_Init+0x9a>
				// 1. Configure the Falling trigger selection register (FTSR)
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000706:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <GPIO_Init+0x19c>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	4611      	mov	r1, r2
 8000710:	2201      	movs	r2, #1
 8000712:	408a      	lsls	r2, r1
 8000714:	4611      	mov	r1, r2
 8000716:	4a48      	ldr	r2, [pc, #288]	; (8000838 <GPIO_Init+0x19c>)
 8000718:	430b      	orrs	r3, r1
 800071a:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <GPIO_Init+0x19c>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a42      	ldr	r2, [pc, #264]	; (8000838 <GPIO_Init+0x19c>)
 8000730:	400b      	ands	r3, r1
 8000732:	6093      	str	r3, [r2, #8]
 8000734:	e031      	b.n	800079a <GPIO_Init+0xfe>
			} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d117      	bne.n	800076e <GPIO_Init+0xd2>
				// 1. Configure the rising trigger selection register (RTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073e:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <GPIO_Init+0x19c>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7912      	ldrb	r2, [r2, #4]
 8000746:	4611      	mov	r1, r2
 8000748:	2201      	movs	r2, #1
 800074a:	408a      	lsls	r2, r1
 800074c:	4611      	mov	r1, r2
 800074e:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <GPIO_Init+0x19c>)
 8000750:	430b      	orrs	r3, r1
 8000752:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000754:	4b38      	ldr	r3, [pc, #224]	; (8000838 <GPIO_Init+0x19c>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7912      	ldrb	r2, [r2, #4]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a34      	ldr	r2, [pc, #208]	; (8000838 <GPIO_Init+0x19c>)
 8000768:	400b      	ands	r3, r1
 800076a:	60d3      	str	r3, [r2, #12]
 800076c:	e015      	b.n	800079a <GPIO_Init+0xfe>
			} else {
				// 1. Configure both registers (RSTR and FTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <GPIO_Init+0x19c>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	7912      	ldrb	r2, [r2, #4]
 8000776:	4611      	mov	r1, r2
 8000778:	2201      	movs	r2, #1
 800077a:	408a      	lsls	r2, r1
 800077c:	4611      	mov	r1, r2
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <GPIO_Init+0x19c>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <GPIO_Init+0x19c>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	7912      	ldrb	r2, [r2, #4]
 800078c:	4611      	mov	r1, r2
 800078e:	2201      	movs	r2, #1
 8000790:	408a      	lsls	r2, r1
 8000792:	4611      	mov	r1, r2
 8000794:	4a28      	ldr	r2, [pc, #160]	; (8000838 <GPIO_Init+0x19c>)
 8000796:	430b      	orrs	r3, r1
 8000798:	60d3      	str	r3, [r2, #12]
			}

			// 2. Configure the GPIO port selection in SYSCFG_EXTICR

			SYSCFG_PCLK_EN();
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <GPIO_Init+0x1a0>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a27      	ldr	r2, [pc, #156]	; (800083c <GPIO_Init+0x1a0>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	74bb      	strb	r3, [r7, #18]

			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <GPIO_Init+0x1a4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d050      	beq.n	8000864 <GPIO_Init+0x1c8>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <GPIO_Init+0x1a8>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d032      	beq.n	8000832 <GPIO_Init+0x196>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <GPIO_Init+0x1ac>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d02b      	beq.n	800082e <GPIO_Init+0x192>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <GPIO_Init+0x1b0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d024      	beq.n	800082a <GPIO_Init+0x18e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <GPIO_Init+0x1b4>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d01d      	beq.n	8000826 <GPIO_Init+0x18a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <GPIO_Init+0x1b8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d016      	beq.n	8000822 <GPIO_Init+0x186>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <GPIO_Init+0x1bc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00f      	beq.n	800081e <GPIO_Init+0x182>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <GPIO_Init+0x1c0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d008      	beq.n	800081a <GPIO_Init+0x17e>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <GPIO_Init+0x1c4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <GPIO_Init+0x17a>
 8000812:	2308      	movs	r3, #8
 8000814:	e027      	b.n	8000866 <GPIO_Init+0x1ca>
 8000816:	2300      	movs	r3, #0
 8000818:	e025      	b.n	8000866 <GPIO_Init+0x1ca>
 800081a:	2307      	movs	r3, #7
 800081c:	e023      	b.n	8000866 <GPIO_Init+0x1ca>
 800081e:	2306      	movs	r3, #6
 8000820:	e021      	b.n	8000866 <GPIO_Init+0x1ca>
 8000822:	2305      	movs	r3, #5
 8000824:	e01f      	b.n	8000866 <GPIO_Init+0x1ca>
 8000826:	2304      	movs	r3, #4
 8000828:	e01d      	b.n	8000866 <GPIO_Init+0x1ca>
 800082a:	2303      	movs	r3, #3
 800082c:	e01b      	b.n	8000866 <GPIO_Init+0x1ca>
 800082e:	2302      	movs	r3, #2
 8000830:	e019      	b.n	8000866 <GPIO_Init+0x1ca>
 8000832:	2301      	movs	r3, #1
 8000834:	e017      	b.n	8000866 <GPIO_Init+0x1ca>
 8000836:	bf00      	nop
 8000838:	40013c00 	.word	0x40013c00
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020400 	.word	0x40020400
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021000 	.word	0x40021000
 8000854:	40021400 	.word	0x40021400
 8000858:	40021800 	.word	0x40021800
 800085c:	40021c00 	.word	0x40021c00
 8000860:	40022000 	.word	0x40022000
 8000864:	2300      	movs	r3, #0
 8000866:	747b      	strb	r3, [r7, #17]

			SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000868:	4a5f      	ldr	r2, [pc, #380]	; (80009e8 <GPIO_Init+0x34c>)
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	3302      	adds	r3, #2
 800086e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000872:	7c79      	ldrb	r1, [r7, #17]
 8000874:	7cbb      	ldrb	r3, [r7, #18]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	4618      	mov	r0, r3
 800087e:	495a      	ldr	r1, [pc, #360]	; (80009e8 <GPIO_Init+0x34c>)
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	4302      	orrs	r2, r0
 8000884:	3302      	adds	r3, #2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// 3. Enable the EXTI interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088a:	4b58      	ldr	r3, [pc, #352]	; (80009ec <GPIO_Init+0x350>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	7912      	ldrb	r2, [r2, #4]
 8000892:	4611      	mov	r1, r2
 8000894:	2201      	movs	r2, #1
 8000896:	408a      	lsls	r2, r1
 8000898:	4611      	mov	r1, r2
 800089a:	4a54      	ldr	r2, [pc, #336]	; (80009ec <GPIO_Init+0x350>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	461a      	mov	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2103      	movs	r1, #3
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	400a      	ands	r2, r1
 80008d2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6899      	ldr	r1, [r3, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	79db      	ldrb	r3, [r3, #7]
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2103      	movs	r1, #3
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	400a      	ands	r2, r1
 8000916:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68d9      	ldr	r1, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	430a      	orrs	r2, r1
 8000926:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d11f      	bne.n	8000974 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7a1b      	ldrb	r3, [r3, #8]
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	2301      	movs	r3, #1
 8000952:	408b      	lsls	r3, r1
 8000954:	43db      	mvns	r3, r3
 8000956:	4619      	mov	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	400a      	ands	r2, r1
 800095e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6859      	ldr	r1, [r3, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	430a      	orrs	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	795b      	ldrb	r3, [r3, #5]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d131      	bne.n	80009e0 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	7c3a      	ldrb	r2, [r7, #16]
 8000994:	3208      	adds	r2, #8
 8000996:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	7c3a      	ldrb	r2, [r7, #16]
 80009ae:	4001      	ands	r1, r0
 80009b0:	3208      	adds	r2, #8
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	7c3a      	ldrb	r2, [r7, #16]
 80009bc:	3208      	adds	r2, #8
 80009be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a5b      	ldrb	r3, [r3, #9]
 80009c6:	461a      	mov	r2, r3
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	7c3a      	ldrb	r2, [r7, #16]
 80009d8:	4301      	orrs	r1, r0
 80009da:	3208      	adds	r2, #8
 80009dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013800 	.word	0x40013800
 80009ec:	40013c00 	.word	0x40013c00

080009f0 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	691a      	ldr	r2, [r3, #16]
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	fa22 f303 	lsr.w	r3, r2, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d133      	bne.n	8000a9a <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b1f      	cmp	r3, #31
 8000a36:	d80a      	bhi.n	8000a4e <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <GPIO_IRQInterruptConfig+0xf8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <GPIO_IRQInterruptConfig+0xf8>)
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e058      	b.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b1f      	cmp	r3, #31
 8000a52:	d90f      	bls.n	8000a74 <GPIO_IRQInterruptConfig+0x58>
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b3f      	cmp	r3, #63	; 0x3f
 8000a58:	d80c      	bhi.n	8000a74 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <GPIO_IRQInterruptConfig+0xfc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	f002 021f 	and.w	r2, r2, #31
 8000a64:	2101      	movs	r1, #1
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <GPIO_IRQInterruptConfig+0xfc>)
 8000a6e:	430b      	orrs	r3, r1
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	e045      	b.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b3f      	cmp	r3, #63	; 0x3f
 8000a78:	d942      	bls.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b5f      	cmp	r3, #95	; 0x5f
 8000a7e:	d83f      	bhi.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <GPIO_IRQInterruptConfig+0x100>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	f002 021f 	and.w	r2, r2, #31
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <GPIO_IRQInterruptConfig+0x100>)
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e032      	b.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b1f      	cmp	r3, #31
 8000a9e:	d80a      	bhi.n	8000ab6 <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <GPIO_IRQInterruptConfig+0x104>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <GPIO_IRQInterruptConfig+0x104>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e024      	b.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b1f      	cmp	r3, #31
 8000aba:	d90f      	bls.n	8000adc <GPIO_IRQInterruptConfig+0xc0>
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac0:	d80c      	bhi.n	8000adc <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <GPIO_IRQInterruptConfig+0x108>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	f002 021f 	and.w	r2, r2, #31
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <GPIO_IRQInterruptConfig+0x108>)
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e011      	b.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae0:	d90e      	bls.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ae6:	d80b      	bhi.n	8000b00 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <GPIO_IRQInterruptConfig+0x10c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	79fa      	ldrb	r2, [r7, #7]
 8000aee:	f002 021f 	and.w	r2, r2, #31
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <GPIO_IRQInterruptConfig+0x10c>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	6839      	ldr	r1, [r7, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f811 	bl	8000b2c <GPIO_IRQPriorityConfig>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000e104 	.word	0xe000e104
 8000b1c:	e000e108 	.word	0xe000e108
 8000b20:	e000e180 	.word	0xe000e180
 8000b24:	e000e184 	.word	0xe000e184
 8000b28:	e000e188 	.word	0xe000e188

08000b2c <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b58:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b5c:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d120      	bne.n	8000bd0 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <SPI_PeriClockControl+0xa8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8000ba2:	e038      	b.n	8000c16 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SPI_PeriClockControl+0xb0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb8:	e02d      	b.n	8000c16 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <SPI_PeriClockControl+0xb4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d129      	bne.n	8000c16 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bce:	e022      	b.n	8000c16 <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11f      	bne.n	8000c16 <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <SPI_PeriClockControl+0xa8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bea:	e014      	b.n	8000c16 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <SPI_PeriClockControl+0xb0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d106      	bne.n	8000c02 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c00:	e009      	b.n	8000c16 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SPI_PeriClockControl+0xb4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d105      	bne.n	8000c16 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <SPI_PeriClockControl+0xac>)
 8000c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40013000 	.word	0x40013000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40003800 	.word	0x40003800
 8000c30:	40003c00 	.word	0x40003c00

08000c34 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff9a 	bl	8000b7c <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d104      	bne.n	8000c6c <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e014      	b.n	8000c96 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	795b      	ldrb	r3, [r3, #5]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d104      	bne.n	8000c7e <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e00b      	b.n	8000c96 <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d107      	bne.n	8000c96 <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c8c:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c94:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	79db      	ldrb	r3, [r3, #7]
 8000ca8:	02db      	lsls	r3, r3, #11
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7a1b      	ldrb	r3, [r3, #8]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7a5b      	ldrb	r3, [r3, #9]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7a9b      	ldrb	r3, [r3, #10]
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
	SPI_SSIControl(pSPIHandle->pSPIx, ENABLE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f835 	bl	8000d50 <SPI_SSIControl>

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7adb      	ldrb	r3, [r3, #11]
 8000cea:	01db      	lsls	r3, r3, #7
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f804 	bl	8000d18 <SPI_PeripheralControl>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d106      	bne.n	8000d38 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 8000d36:	e005      	b.n	8000d44 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SPI_SSIControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSIControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <SPI_SSIControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);			// Pull SSI high
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
}
 8000d6e:	e005      	b.n	8000d7c <SPI_SSIControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SPI_SSOEControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d106      	bne.n	8000da8 <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f043 0204 	orr.w	r2, r3, #4
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
}
 8000da6:	e005      	b.n	8000db4 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f023 0204 	bic.w	r2, r3, #4
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	605a      	str	r2, [r3, #4]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	// uint32_t dummy;

	while(len > 0){
 8000df4:	e021      	b.n	8000e3a <SPI_SendData+0x52>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 8000df6:	bf00      	nop
 8000df8:	2102      	movs	r1, #2
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff ffe0 	bl	8000dc0 <SPI_GetFlagStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f8      	beq.n	8000df8 <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <SPI_SendData+0x3c>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	e007      	b.n	8000e34 <SPI_SendData+0x4c>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1da      	bne.n	8000df6 <SPI_SendData+0xe>
	}
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <__libc_init_array>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4d0d      	ldr	r5, [pc, #52]	; (8000e84 <__libc_init_array+0x38>)
 8000e50:	4c0d      	ldr	r4, [pc, #52]	; (8000e88 <__libc_init_array+0x3c>)
 8000e52:	1b64      	subs	r4, r4, r5
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	2600      	movs	r6, #0
 8000e58:	42a6      	cmp	r6, r4
 8000e5a:	d109      	bne.n	8000e70 <__libc_init_array+0x24>
 8000e5c:	4d0b      	ldr	r5, [pc, #44]	; (8000e8c <__libc_init_array+0x40>)
 8000e5e:	4c0c      	ldr	r4, [pc, #48]	; (8000e90 <__libc_init_array+0x44>)
 8000e60:	f000 f820 	bl	8000ea4 <_init>
 8000e64:	1b64      	subs	r4, r4, r5
 8000e66:	10a4      	asrs	r4, r4, #2
 8000e68:	2600      	movs	r6, #0
 8000e6a:	42a6      	cmp	r6, r4
 8000e6c:	d105      	bne.n	8000e7a <__libc_init_array+0x2e>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e74:	4798      	blx	r3
 8000e76:	3601      	adds	r6, #1
 8000e78:	e7ee      	b.n	8000e58 <__libc_init_array+0xc>
 8000e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7e:	4798      	blx	r3
 8000e80:	3601      	adds	r6, #1
 8000e82:	e7f2      	b.n	8000e6a <__libc_init_array+0x1e>
 8000e84:	08000fbc 	.word	0x08000fbc
 8000e88:	08000fbc 	.word	0x08000fbc
 8000e8c:	08000fbc 	.word	0x08000fbc
 8000e90:	08000fc0 	.word	0x08000fc0

08000e94 <memset>:
 8000e94:	4402      	add	r2, r0
 8000e96:	4603      	mov	r3, r0
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d100      	bne.n	8000e9e <memset+0xa>
 8000e9c:	4770      	bx	lr
 8000e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000ea2:	e7f9      	b.n	8000e98 <memset+0x4>

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
