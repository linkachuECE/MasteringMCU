
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f24  08002f24  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f24  08002f24  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f24  08002f24  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000f8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002367  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008a5  00000000  00000000  00022413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00022cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000200  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003baa  00000000  00000000  00023120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000349c  00000000  00000000  00026cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d8b8  00000000  00000000  0002a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00037a1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001638  00000000  00000000  00037a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d48 	.word	0x08002d48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002d48 	.word	0x08002d48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
char* getMonth(RTC_date_t* rtc_date);

char* dateToString(RTC_date_t* rtc_date);
char* timeToString(RTC_time_t* rtc_time);

int main(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	RTC_time_t rtc_time = { .seconds = 0,
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
							.minutes = 0,
							.hours = 0,
							.time_format = TIME_FORMAT_24HRS };
	RTC_date_t rtc_date = { .dayOfWeek = SUNDAY,
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <main+0x84>)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a2:	6018      	str	r0, [r3, #0]
 80002a4:	3304      	adds	r3, #4
 80002a6:	8019      	strh	r1, [r3, #0]
							.date = 1,
							.month = JANUARY,
							.year = 2000 };

	printf("RTC Test:\n");
 80002a8:	481b      	ldr	r0, [pc, #108]	; (8000318 <main+0x88>)
 80002aa:	f001 fb89 	bl	80019c0 <puts>

	if(ds1307_init()){
 80002ae:	f000 f9ad 	bl	800060c <ds1307_init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <main+0x30>
		printf("RTC Init has failed...\n");
 80002b8:	4818      	ldr	r0, [pc, #96]	; (800031c <main+0x8c>)
 80002ba:	f001 fb81 	bl	80019c0 <puts>
		while(1);
 80002be:	e7fe      	b.n	80002be <main+0x2e>
	}

	ds1307_set_current_time(&rtc_time);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f9bf 	bl	8000648 <ds1307_set_current_time>
	ds1307_set_current_date(&rtc_date);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 facf 	bl	8000870 <ds1307_set_current_date>

	ds1307_get_current_time(&rtc_time);
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fa5c 	bl	8000794 <ds1307_get_current_time>
	ds1307_get_current_date(&rtc_date);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fb00 	bl	80008e4 <ds1307_get_current_date>

	printf("Current time: %s\n", timeToString(&rtc_time));
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f81d 	bl	8000328 <timeToString>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4619      	mov	r1, r3
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x90>)
 80002f4:	f001 fade 	bl	80018b4 <iprintf>

	printf("Current date: %s\n", dateToString(&rtc_date));
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f84c 	bl	8000398 <dateToString>
 8000300:	4603      	mov	r3, r0
 8000302:	4619      	mov	r1, r3
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <main+0x94>)
 8000306:	f001 fad5 	bl	80018b4 <iprintf>


	return 0;
 800030a:	2300      	movs	r3, #0
}
 800030c:	4618      	mov	r0, r3
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	08002dac 	.word	0x08002dac
 8000318:	08002d60 	.word	0x08002d60
 800031c:	08002d6c 	.word	0x08002d6c
 8000320:	08002d84 	.word	0x08002d84
 8000324:	08002d98 	.word	0x08002d98

08000328 <timeToString>:

char* timeToString(RTC_time_t* rtc_time){
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af02      	add	r7, sp, #8
 800032e:	6078      	str	r0, [r7, #4]
	char* ampm;
	if (rtc_time->time_format == TIME_FORMAT_12HRS)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	78db      	ldrb	r3, [r3, #3]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d108      	bne.n	800034a <timeToString+0x22>
		ampm = (rtc_time->hours < 12) ? " PM" : " AM";
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	789b      	ldrb	r3, [r3, #2]
 800033c:	2b0b      	cmp	r3, #11
 800033e:	d801      	bhi.n	8000344 <timeToString+0x1c>
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <timeToString+0x60>)
 8000342:	e000      	b.n	8000346 <timeToString+0x1e>
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <timeToString+0x64>)
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	e001      	b.n	800034e <timeToString+0x26>
	else
		ampm = "";
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <timeToString+0x68>)
 800034c:	60fb      	str	r3, [r7, #12]

	char* output = (char*)malloc(sizeof(char) * 40);
 800034e:	2028      	movs	r0, #40	; 0x28
 8000350:	f001 f9c0 	bl	80016d4 <malloc>
 8000354:	4603      	mov	r3, r0
 8000356:	60bb      	str	r3, [r7, #8]
	sprintf(output, "%d:%d:%d%s",	rtc_time->hours,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	789b      	ldrb	r3, [r3, #2]
 800035c:	4619      	mov	r1, r3
									rtc_time->minutes,
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	785b      	ldrb	r3, [r3, #1]
	sprintf(output, "%d:%d:%d%s",	rtc_time->hours,
 8000362:	4618      	mov	r0, r3
									rtc_time->seconds,
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
	sprintf(output, "%d:%d:%d%s",	rtc_time->hours,
 8000368:	461a      	mov	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	4603      	mov	r3, r0
 8000372:	460a      	mov	r2, r1
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <timeToString+0x6c>)
 8000376:	68b8      	ldr	r0, [r7, #8]
 8000378:	f001 fb3a 	bl	80019f0 <siprintf>
									ampm);

	return output;
 800037c:	68bb      	ldr	r3, [r7, #8]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	08002db4 	.word	0x08002db4
 800038c:	08002db8 	.word	0x08002db8
 8000390:	08002dbc 	.word	0x08002dbc
 8000394:	08002dc0 	.word	0x08002dc0

08000398 <dateToString>:

char* dateToString(RTC_date_t* rtc_date){
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b087      	sub	sp, #28
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]
	char* output = (char*)malloc(sizeof(char) * 20);
 80003a0:	2014      	movs	r0, #20
 80003a2:	f001 f997 	bl	80016d4 <malloc>
 80003a6:	4603      	mov	r3, r0
 80003a8:	60fb      	str	r3, [r7, #12]

	sprintf(output, "%s, %s %d, %d",	getDayOfWeek(rtc_date),
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 f81a 	bl	80003e4 <getDayOfWeek>
 80003b0:	4604      	mov	r4, r0
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f000 f85e 	bl	8000474 <getMonth>
 80003b8:	4602      	mov	r2, r0
										getMonth(rtc_date),
										rtc_date->date,
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	785b      	ldrb	r3, [r3, #1]
	sprintf(output, "%s, %s %d, %d",	getDayOfWeek(rtc_date),
 80003be:	4619      	mov	r1, r3
										rtc_date->year);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	889b      	ldrh	r3, [r3, #4]
	sprintf(output, "%s, %s %d, %d",	getDayOfWeek(rtc_date),
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	4613      	mov	r3, r2
 80003ca:	4622      	mov	r2, r4
 80003cc:	4904      	ldr	r1, [pc, #16]	; (80003e0 <dateToString+0x48>)
 80003ce:	68f8      	ldr	r0, [r7, #12]
 80003d0:	f001 fb0e 	bl	80019f0 <siprintf>

	return output;
 80003d4:	68fb      	ldr	r3, [r7, #12]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd90      	pop	{r4, r7, pc}
 80003de:	bf00      	nop
 80003e0:	08002dcc 	.word	0x08002dcc

080003e4 <getDayOfWeek>:

char* getDayOfWeek(RTC_date_t* rtc_date){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]

	char* dayOfWeek = (char*)malloc(sizeof(char) * 15);
 80003ec:	200f      	movs	r0, #15
 80003ee:	f001 f971 	bl	80016d4 <malloc>
 80003f2:	4603      	mov	r3, r0
 80003f4:	60fb      	str	r3, [r7, #12]

	switch (rtc_date->dayOfWeek) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	2b06      	cmp	r3, #6
 80003fe:	d826      	bhi.n	800044e <getDayOfWeek+0x6a>
 8000400:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <getDayOfWeek+0x24>)
 8000402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000406:	bf00      	nop
 8000408:	08000425 	.word	0x08000425
 800040c:	0800042b 	.word	0x0800042b
 8000410:	08000431 	.word	0x08000431
 8000414:	08000437 	.word	0x08000437
 8000418:	0800043d 	.word	0x0800043d
 800041c:	08000443 	.word	0x08000443
 8000420:	08000449 	.word	0x08000449
		case SUNDAY:
			dayOfWeek = "Sunday";
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <getDayOfWeek+0x74>)
 8000426:	60fb      	str	r3, [r7, #12]
			break;
 8000428:	e011      	b.n	800044e <getDayOfWeek+0x6a>
		case MONDAY:
			dayOfWeek = "Monday";
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <getDayOfWeek+0x78>)
 800042c:	60fb      	str	r3, [r7, #12]
			break;
 800042e:	e00e      	b.n	800044e <getDayOfWeek+0x6a>
		case TUESDAY:
			dayOfWeek = "Tuesday";
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <getDayOfWeek+0x7c>)
 8000432:	60fb      	str	r3, [r7, #12]
			break;
 8000434:	e00b      	b.n	800044e <getDayOfWeek+0x6a>
		case WEDNESDAY:
			dayOfWeek = "Wednesday";
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <getDayOfWeek+0x80>)
 8000438:	60fb      	str	r3, [r7, #12]
			break;
 800043a:	e008      	b.n	800044e <getDayOfWeek+0x6a>
		case THURSDAY:
			dayOfWeek = "Thursday";
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <getDayOfWeek+0x84>)
 800043e:	60fb      	str	r3, [r7, #12]
			break;
 8000440:	e005      	b.n	800044e <getDayOfWeek+0x6a>
		case FRIDAY:
			dayOfWeek = "Friday";
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <getDayOfWeek+0x88>)
 8000444:	60fb      	str	r3, [r7, #12]
			break;
 8000446:	e002      	b.n	800044e <getDayOfWeek+0x6a>
		case SATURDAY:
			dayOfWeek = "Saturday";
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <getDayOfWeek+0x8c>)
 800044a:	60fb      	str	r3, [r7, #12]
			break;
 800044c:	bf00      	nop
	}

	return dayOfWeek;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	08002ddc 	.word	0x08002ddc
 800045c:	08002de4 	.word	0x08002de4
 8000460:	08002dec 	.word	0x08002dec
 8000464:	08002df4 	.word	0x08002df4
 8000468:	08002e00 	.word	0x08002e00
 800046c:	08002e0c 	.word	0x08002e0c
 8000470:	08002e14 	.word	0x08002e14

08000474 <getMonth>:

char* getMonth(RTC_date_t* rtc_date){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	char* month = (char*)malloc(sizeof(char) * 15);
 800047c:	200f      	movs	r0, #15
 800047e:	f001 f929 	bl	80016d4 <malloc>
 8000482:	4603      	mov	r3, r0
 8000484:	60fb      	str	r3, [r7, #12]

	switch (rtc_date->month) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	3b01      	subs	r3, #1
 800048c:	2b0b      	cmp	r3, #11
 800048e:	d83f      	bhi.n	8000510 <getMonth+0x9c>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <getMonth+0x24>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004c9 	.word	0x080004c9
 800049c:	080004cf 	.word	0x080004cf
 80004a0:	080004d5 	.word	0x080004d5
 80004a4:	080004db 	.word	0x080004db
 80004a8:	080004e1 	.word	0x080004e1
 80004ac:	080004e7 	.word	0x080004e7
 80004b0:	080004ed 	.word	0x080004ed
 80004b4:	080004f3 	.word	0x080004f3
 80004b8:	080004f9 	.word	0x080004f9
 80004bc:	080004ff 	.word	0x080004ff
 80004c0:	08000505 	.word	0x08000505
 80004c4:	0800050b 	.word	0x0800050b
		case JANUARY:
			month = "January";
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <getMonth+0xa8>)
 80004ca:	60fb      	str	r3, [r7, #12]
			break;
 80004cc:	e020      	b.n	8000510 <getMonth+0x9c>
		case FEBRUARY:
			month = "February";
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <getMonth+0xac>)
 80004d0:	60fb      	str	r3, [r7, #12]
			break;
 80004d2:	e01d      	b.n	8000510 <getMonth+0x9c>
		case MARCH:
			month = "March";
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <getMonth+0xb0>)
 80004d6:	60fb      	str	r3, [r7, #12]
			break;
 80004d8:	e01a      	b.n	8000510 <getMonth+0x9c>
		case APRIL:
			month = "April";
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <getMonth+0xb4>)
 80004dc:	60fb      	str	r3, [r7, #12]
			break;
 80004de:	e017      	b.n	8000510 <getMonth+0x9c>
		case MAY:
			month = "May";
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <getMonth+0xb8>)
 80004e2:	60fb      	str	r3, [r7, #12]
			break;
 80004e4:	e014      	b.n	8000510 <getMonth+0x9c>
		case JUNE:
			month = "June";
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <getMonth+0xbc>)
 80004e8:	60fb      	str	r3, [r7, #12]
			break;
 80004ea:	e011      	b.n	8000510 <getMonth+0x9c>
		case JULY:
			month = "July";
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <getMonth+0xc0>)
 80004ee:	60fb      	str	r3, [r7, #12]
			break;
 80004f0:	e00e      	b.n	8000510 <getMonth+0x9c>
		case AUGUST:
			month = "August";
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <getMonth+0xc4>)
 80004f4:	60fb      	str	r3, [r7, #12]
			break;
 80004f6:	e00b      	b.n	8000510 <getMonth+0x9c>
		case SEPTEMBER:
			month = "September";
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <getMonth+0xc8>)
 80004fa:	60fb      	str	r3, [r7, #12]
			break;
 80004fc:	e008      	b.n	8000510 <getMonth+0x9c>
		case OCTOBER:
			month = "October";
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <getMonth+0xcc>)
 8000500:	60fb      	str	r3, [r7, #12]
			break;
 8000502:	e005      	b.n	8000510 <getMonth+0x9c>
		case NOVEMBER:
			month = "November";
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <getMonth+0xd0>)
 8000506:	60fb      	str	r3, [r7, #12]
			break;
 8000508:	e002      	b.n	8000510 <getMonth+0x9c>
		case DECEMBER:
			month = "December";
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <getMonth+0xd4>)
 800050c:	60fb      	str	r3, [r7, #12]
			break;
 800050e:	bf00      	nop
	}

	return month;
 8000510:	68fb      	ldr	r3, [r7, #12]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08002e20 	.word	0x08002e20
 8000520:	08002e28 	.word	0x08002e28
 8000524:	08002e34 	.word	0x08002e34
 8000528:	08002e3c 	.word	0x08002e3c
 800052c:	08002e44 	.word	0x08002e44
 8000530:	08002e48 	.word	0x08002e48
 8000534:	08002e50 	.word	0x08002e50
 8000538:	08002e58 	.word	0x08002e58
 800053c:	08002e60 	.word	0x08002e60
 8000540:	08002e6c 	.word	0x08002e6c
 8000544:	08002e74 	.word	0x08002e74
 8000548:	08002e80 	.word	0x08002e80

0800054c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <_sbrk+0x5c>)
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <_sbrk+0x60>)
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <_sbrk+0x64>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <_sbrk+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	429a      	cmp	r2, r3
 800057a:	d207      	bcs.n	800058c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800057c:	f001 f880 	bl	8001680 <__errno>
 8000580:	4603      	mov	r3, r0
 8000582:	220c      	movs	r2, #12
 8000584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	e009      	b.n	80005a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <_sbrk+0x64>)
 800059c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20020000 	.word	0x20020000
 80005ac:	00000400 	.word	0x00000400
 80005b0:	20000098 	.word	0x20000098
 80005b4:	20000178 	.word	0x20000178

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f001 f851 	bl	800168c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe51 	bl	8000290 <main>

080005ee <LoopForever>:

LoopForever:
    b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80005fc:	08002f2c 	.word	0x08002f2c
  ldr r2, =_sbss
 8000600:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000604:	20000174 	.word	0x20000174

08000608 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <ds1307_init>:
 *
 * @return            - None
 *
 * @Note              - None
 */
uint8_t ds1307_init(){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	// 1. Inititialize the I2C pins
	ds1307_i2c_pin_config();
 8000612:	f000 f9a3 	bl	800095c <ds1307_i2c_pin_config>

	// 2. Initialize the I2C peripheral
	ds1307_i2c_config();
 8000616:	f000 f9cf 	bl	80009b8 <ds1307_i2c_config>

	// 3. Enable the I2C peripheral
	I2C_PeripheralControl(&g_ds1307I2cHandle, ENABLE);
 800061a:	2101      	movs	r1, #1
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <ds1307_init+0x38>)
 800061e:	f000 ffb7 	bl	8001590 <I2C_PeripheralControl>

	// 4. Make clock halt = 0
	ds1307_write(0X00, DS1307_ADDR_SEC);
 8000622:	2100      	movs	r1, #0
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f9dd 	bl	80009e4 <ds1307_write>

	// 5. Read back clock halt bit
	uint8_t clockState = ds1307_read(DS1307_ADDR_SEC);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f9f6 	bl	8000a1c <ds1307_read>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]

	return (clockState >> 7) & 0x01;
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	09db      	lsrs	r3, r3, #7
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c

08000648 <ds1307_set_current_time>:
 *
 * @return            - None
 *
 * @Note              - None
 */
void ds1307_set_current_time(RTC_time_t* rtc_time){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint8_t tens, ones;
	uint8_t AMorPM, timeFormat;

	uint8_t tempReg = 0x00;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]

	// Set seconds
	tempReg = binaryToBCD(rtc_time->seconds);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f9fd 	bl	8000a58 <binaryToBCD>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_SEC);
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f9bc 	bl	80009e4 <ds1307_write>

	// Set minutes
	tempReg = binaryToBCD(rtc_time->minutes);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f9f1 	bl	8000a58 <binaryToBCD>
 8000676:	4603      	mov	r3, r0
 8000678:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_MIN);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f9b0 	bl	80009e4 <ds1307_write>
	tempReg = 0x00;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]

	// Set hours
	timeFormat = rtc_time->time_format;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	78db      	ldrb	r3, [r3, #3]
 800068c:	73bb      	strb	r3, [r7, #14]

	// 12-hour format
	if(timeFormat == TIME_FORMAT_12HRS){
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d14a      	bne.n	800072a <ds1307_set_current_time+0xe2>
		AMorPM = rtc_time->hours / 12;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	4a3c      	ldr	r2, [pc, #240]	; (800078c <ds1307_set_current_time+0x144>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	08db      	lsrs	r3, r3, #3
 80006a0:	72fb      	strb	r3, [r7, #11]
		tens = (rtc_time->hours % 12) / 10;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	789a      	ldrb	r2, [r3, #2]
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <ds1307_set_current_time+0x144>)
 80006a8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ac:	08d9      	lsrs	r1, r3, #3
 80006ae:	460b      	mov	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	440b      	add	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4a35      	ldr	r2, [pc, #212]	; (8000790 <ds1307_set_current_time+0x148>)
 80006bc:	fba2 2303 	umull	r2, r3, r2, r3
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	737b      	strb	r3, [r7, #13]
		ones = (rtc_time->hours % 12) % 10;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	789a      	ldrb	r2, [r3, #2]
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <ds1307_set_current_time+0x144>)
 80006ca:	fba3 1302 	umull	r1, r3, r3, r2
 80006ce:	08d9      	lsrs	r1, r3, #3
 80006d0:	460b      	mov	r3, r1
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	440b      	add	r3, r1
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <ds1307_set_current_time+0x148>)
 80006de:	fba3 1302 	umull	r1, r3, r3, r2
 80006e2:	08d9      	lsrs	r1, r3, #3
 80006e4:	460b      	mov	r3, r1
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	440b      	add	r3, r1
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	733b      	strb	r3, [r7, #12]

		tempReg |= ones;
 80006f0:	7bfa      	ldrb	r2, [r7, #15]
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	73fb      	strb	r3, [r7, #15]
		tempReg |= (tens << 4);
 80006f8:	7b7b      	ldrb	r3, [r7, #13]
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4313      	orrs	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
		tempReg |= (AMorPM << 5);
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	015b      	lsls	r3, r3, #5
 800070c:	b25a      	sxtb	r2, r3
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
		tempReg |= (timeFormat << 6);
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	019b      	lsls	r3, r3, #6
 800071c:	b25a      	sxtb	r2, r3
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4313      	orrs	r3, r2
 8000724:	b25b      	sxtb	r3, r3
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e026      	b.n	8000778 <ds1307_set_current_time+0x130>
	}
	// 24-hour format
	else {
		tens = rtc_time->hours / 10;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <ds1307_set_current_time+0x148>)
 8000730:	fba2 2303 	umull	r2, r3, r2, r3
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	737b      	strb	r3, [r7, #13]
		ones = rtc_time->hours % 10;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	789a      	ldrb	r2, [r3, #2]
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <ds1307_set_current_time+0x148>)
 800073e:	fba3 1302 	umull	r1, r3, r3, r2
 8000742:	08d9      	lsrs	r1, r3, #3
 8000744:	460b      	mov	r3, r1
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	733b      	strb	r3, [r7, #12]

		tempReg |= ones;
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	7b3b      	ldrb	r3, [r7, #12]
 8000754:	4313      	orrs	r3, r2
 8000756:	73fb      	strb	r3, [r7, #15]
		tempReg |= (tens << 4);
 8000758:	7b7b      	ldrb	r3, [r7, #13]
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	b25a      	sxtb	r2, r3
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4313      	orrs	r3, r2
 8000764:	b25b      	sxtb	r3, r3
 8000766:	73fb      	strb	r3, [r7, #15]
		tempReg |= (timeFormat << 6);
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	b25a      	sxtb	r2, r3
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4313      	orrs	r3, r2
 8000774:	b25b      	sxtb	r3, r3
 8000776:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(tempReg, DS1307_ADDR_HRS);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2102      	movs	r1, #2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f931 	bl	80009e4 <ds1307_write>
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	aaaaaaab 	.word	0xaaaaaaab
 8000790:	cccccccd 	.word	0xcccccccd

08000794 <ds1307_get_current_time>:
 *
 * @return            - None
 *
 * @Note              - None
 */
void ds1307_get_current_time(RTC_time_t* rtc_time){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uint8_t tens, ones;
	uint8_t AMorPM, timeFormat;

	uint8_t tempReg = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]

	// Retrieve seconds
	tempReg = ds1307_read(DS1307_ADDR_SEC);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f93b 	bl	8000a1c <ds1307_read>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
	rtc_time->seconds = BCDToBinary(tempReg);
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f981 	bl	8000ab4 <BCDToBinary>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	701a      	strb	r2, [r3, #0]

	// Retrieve minutes
	tempReg = ds1307_read(DS1307_ADDR_MIN);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f92e 	bl	8000a1c <ds1307_read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
	rtc_time->minutes = BCDToBinary(tempReg);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f974 	bl	8000ab4 <BCDToBinary>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	705a      	strb	r2, [r3, #1]

	// Retrieve time format
	tempReg = ds1307_read(DS1307_ADDR_HRS);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 f921 	bl	8000a1c <ds1307_read>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
	timeFormat = (tempReg >> 6) & 0x01;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	099b      	lsrs	r3, r3, #6
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	73bb      	strb	r3, [r7, #14]
	rtc_time->time_format = timeFormat;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	70da      	strb	r2, [r3, #3]

	// Retrieve hours
	// 12-hour format
	if(timeFormat == TIME_FORMAT_12HRS){
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d123      	bne.n	800083e <ds1307_get_current_time+0xaa>
		ones = tempReg & 0x0F;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f003 030f 	and.w	r3, r3, #15
 80007fc:	737b      	strb	r3, [r7, #13]
		tens = (tempReg >> 4) & 0x01;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	733b      	strb	r3, [r7, #12]
		AMorPM = (tempReg >> 5) & 0x01;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	72fb      	strb	r3, [r7, #11]

		// Convert to 24-hour format for storage
		rtc_time->hours = ((tens * 10) + ones) + (12 * AMorPM);
 8000816:	7b3b      	ldrb	r3, [r7, #12]
 8000818:	461a      	mov	r2, r3
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	4413      	add	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4619      	mov	r1, r3
 8000826:	0049      	lsls	r1, r1, #1
 8000828:	440b      	add	r3, r1
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7b7b      	ldrb	r3, [r7, #13]
 8000834:	4413      	add	r3, r2
 8000836:	b2da      	uxtb	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	709a      	strb	r2, [r3, #2]
		ones = tempReg & 0x0F;
		tens = (tempReg >> 4) & 0x03;

		rtc_time->hours = (tens * 10) + ones;
	}
}
 800083c:	e014      	b.n	8000868 <ds1307_get_current_time+0xd4>
		ones = tempReg & 0x0F;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	737b      	strb	r3, [r7, #13]
		tens = (tempReg >> 4) & 0x03;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	733b      	strb	r3, [r7, #12]
		rtc_time->hours = (tens * 10) + ones;
 8000852:	7b3b      	ldrb	r3, [r7, #12]
 8000854:	461a      	mov	r2, r3
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	4413      	add	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	7b7b      	ldrb	r3, [r7, #13]
 8000860:	4413      	add	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	709a      	strb	r2, [r3, #2]
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ds1307_set_current_date>:
 *
 * @return            - None
 *
 * @Note              - None
 */
void ds1307_set_current_date(RTC_date_t* rtc_date){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	uint8_t tempReg = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]

	// Set day of the week
	tempReg |= rtc_date->dayOfWeek;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	4313      	orrs	r3, r2
 8000884:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_DAY);
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2103      	movs	r1, #3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f8aa 	bl	80009e4 <ds1307_write>

	// Set date of the month
	tempReg = binaryToBCD(rtc_date->date);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f8df 	bl	8000a58 <binaryToBCD>
 800089a:	4603      	mov	r3, r0
 800089c:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_DATE);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f89e 	bl	80009e4 <ds1307_write>

	// Set month
	tempReg = binaryToBCD(rtc_date->month);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f8d3 	bl	8000a58 <binaryToBCD>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_MONTH);
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2105      	movs	r1, #5
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f892 	bl	80009e4 <ds1307_write>

	// Set year (subtract 2000 to store just the tens and ones)
	tempReg = binaryToBCD(rtc_date->date - 2000);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	3330      	adds	r3, #48	; 0x30
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f8c5 	bl	8000a58 <binaryToBCD>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]
	ds1307_write(tempReg, DS1307_ADDR_YEAR);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	2106      	movs	r1, #6
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f884 	bl	80009e4 <ds1307_write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ds1307_get_current_date>:
 *
 * @return            - None
 *
 * @Note              - None
 */
void ds1307_get_current_date(RTC_date_t* rtc_date){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint8_t tempReg = 0x00;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

	// Get day of the week
	tempReg = ds1307_read(DS1307_ADDR_DAY);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f893 	bl	8000a1c <ds1307_read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]
	rtc_date->dayOfWeek = tempReg;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	701a      	strb	r2, [r3, #0]

	// Get date of the month
	tempReg = ds1307_read(DS1307_ADDR_DATE);
 8000900:	2004      	movs	r0, #4
 8000902:	f000 f88b 	bl	8000a1c <ds1307_read>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
	rtc_date->date = BCDToBinary(tempReg);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f8d1 	bl	8000ab4 <BCDToBinary>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]

	// Get month
	tempReg = ds1307_read(DS1307_ADDR_MONTH);
 800091a:	2005      	movs	r0, #5
 800091c:	f000 f87e 	bl	8000a1c <ds1307_read>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]
	rtc_date->month = BCDToBinary(tempReg);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f8c4 	bl	8000ab4 <BCDToBinary>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	709a      	strb	r2, [r3, #2]

	// Get year
	tempReg = ds1307_read(DS1307_ADDR_YEAR);
 8000934:	2006      	movs	r0, #6
 8000936:	f000 f871 	bl	8000a1c <ds1307_read>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
	rtc_date->year = BCDToBinary(tempReg) + 2000;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8b7 	bl	8000ab4 <BCDToBinary>
 8000946:	4603      	mov	r3, r0
 8000948:	b29b      	uxth	r3, r3
 800094a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800094e:	b29a      	uxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	809a      	strh	r2, [r3, #4]
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <ds1307_i2c_pin_config>:
 *
 * @return            - None
 *
 * @Note              - None
 */
static void ds1307_i2c_pin_config(void){
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	220c      	movs	r2, #12
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 feba 	bl	80016e4 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000970:	463b      	mov	r3, r7
 8000972:	220c      	movs	r2, #12
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f000 feb4 	bl	80016e4 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <ds1307_i2c_pin_config+0x58>)
 800097e:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000984:	2302      	movs	r3, #2
 8000986:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000988:	2307      	movs	r3, #7
 800098a:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800098c:	2301      	movs	r3, #1
 800098e:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000990:	2301      	movs	r3, #1
 8000992:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000994:	2302      	movs	r3, #2
 8000996:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f993 	bl	8000cc8 <GPIO_Init>
	GPIO_Init(&i2c_scl);
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f98f 	bl	8000cc8 <GPIO_Init>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020400 	.word	0x40020400

080009b8 <ds1307_i2c_config>:
 *
 * @return            - None
 *
 * @Note              - None
 */
static void ds1307_i2c_config(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <ds1307_i2c_config+0x20>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <ds1307_i2c_config+0x24>)
 80009c0:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.AckControl = I2C_ACK_ENABLE;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <ds1307_i2c_config+0x20>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.SCLSpeed = DS1307_I2C_SPEED;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <ds1307_i2c_config+0x20>)
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <ds1307_i2c_config+0x28>)
 80009cc:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <ds1307_i2c_config+0x20>)
 80009d0:	f000 fbdc 	bl	800118c <I2C_Init>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	40005400 	.word	0x40005400
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <ds1307_write>:
 *
 * @return            - None
 *
 * @Note              - None
 */
static void ds1307_write(uint8_t value, uint8_t reg_address){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_address;
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80009fc:	f107 010c 	add.w	r1, r7, #12
 8000a00:	2300      	movs	r3, #0
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2368      	movs	r3, #104	; 0x68
 8000a06:	2202      	movs	r2, #2
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <ds1307_write+0x34>)
 8000a0a:	f000 fcd1 	bl	80013b0 <I2C_MasterSendData>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000009c 	.word	0x2000009c

08000a1c <ds1307_read>:
 *
 * @return            - Retrieved value
 *
 * @Note              - None
 */
static uint8_t ds1307_read(uint8_t regAddress){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	// 1. Send word address to read from
	I2C_MasterSendData(&g_ds1307I2cHandle, &regAddress, 1, DS1307_I2C_ADDRESS, 1);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	2301      	movs	r3, #1
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2368      	movs	r3, #104	; 0x68
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <ds1307_read+0x38>)
 8000a32:	f000 fcbd 	bl	80013b0 <I2C_MasterSendData>

	// 2. Read data from that address
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a36:	f107 010f 	add.w	r1, r7, #15
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2368      	movs	r3, #104	; 0x68
 8000a40:	2201      	movs	r2, #1
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <ds1307_read+0x38>)
 8000a44:	f000 fd19 	bl	800147a <I2C_MasterReceiveData>

	return data;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000009c 	.word	0x2000009c

08000a58 <binaryToBCD>:
 *
 * @return            - Corresponding BCD value
 *
 * @Note              - None
 */
static uint8_t binaryToBCD(uint8_t bin){
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	uint8_t tens, ones;
	uint8_t result = 0x00;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
	tens = bin / 10;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <binaryToBCD+0x58>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	73bb      	strb	r3, [r7, #14]
	ones = bin % 10;
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <binaryToBCD+0x58>)
 8000a76:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7a:	08d9      	lsrs	r1, r3, #3
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	737b      	strb	r3, [r7, #13]

	result |= ones;
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	7b7b      	ldrb	r3, [r7, #13]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	73fb      	strb	r3, [r7, #15]
	result |= (tens << 4);
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	b25a      	sxtb	r2, r3
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	73fb      	strb	r3, [r7, #15]

	return result;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	cccccccd 	.word	0xcccccccd

08000ab4 <BCDToBinary>:
 *
 * @return            - Corresponding binary value
 *
 * @Note              - None
 */
static uint8_t BCDToBinary(uint8_t bcd){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	uint8_t tens, ones;
	uint8_t result = 0x00;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	ones = bcd & 0x0F;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	73bb      	strb	r3, [r7, #14]
	tens = (bcd >> 4) & 0x0F;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	737b      	strb	r3, [r7, #13]

	result = (tens * 10) + ones;
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	4413      	add	r3, r2
 8000ae0:	73fb      	strb	r3, [r7, #15]
	return result;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d162      	bne.n	8000bc8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a66      	ldr	r2, [pc, #408]	; (8000ca0 <GPIO_PeriClockControl+0x1b0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000b0a:	4b66      	ldr	r3, [pc, #408]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a65      	ldr	r2, [pc, #404]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 8000b16:	e0bc      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a63      	ldr	r2, [pc, #396]	; (8000ca8 <GPIO_PeriClockControl+0x1b8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d106      	bne.n	8000b2e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a5f      	ldr	r2, [pc, #380]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b2c:	e0b1      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a5e      	ldr	r2, [pc, #376]	; (8000cac <GPIO_PeriClockControl+0x1bc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d106      	bne.n	8000b44 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b42:	e0a6      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a5a      	ldr	r2, [pc, #360]	; (8000cb0 <GPIO_PeriClockControl+0x1c0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d106      	bne.n	8000b5a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000b4c:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a54      	ldr	r2, [pc, #336]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b58:	e09b      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <GPIO_PeriClockControl+0x1c4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d106      	bne.n	8000b70 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b6e:	e090      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a51      	ldr	r2, [pc, #324]	; (8000cb8 <GPIO_PeriClockControl+0x1c8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d106      	bne.n	8000b86 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a49      	ldr	r2, [pc, #292]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b84:	e085      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4c      	ldr	r2, [pc, #304]	; (8000cbc <GPIO_PeriClockControl+0x1cc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d106      	bne.n	8000b9c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b9a:	e07a      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <GPIO_PeriClockControl+0x1d0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d106      	bne.n	8000bb2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bb0:	e06f      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <GPIO_PeriClockControl+0x1d4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d16b      	bne.n	8000c92 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000bba:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bc6:	e064      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d161      	bne.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <GPIO_PeriClockControl+0x1b0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d106      	bne.n	8000be4 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000be2:	e056      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <GPIO_PeriClockControl+0x1b8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d106      	bne.n	8000bfa <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000bf2:	f023 0302 	bic.w	r3, r3, #2
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bf8:	e04b      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	; (8000cac <GPIO_PeriClockControl+0x1bc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d106      	bne.n	8000c10 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c08:	f023 0304 	bic.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c0e:	e040      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <GPIO_PeriClockControl+0x1c0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d106      	bne.n	8000c26 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c1e:	f023 0308 	bic.w	r3, r3, #8
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c24:	e035      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <GPIO_PeriClockControl+0x1c4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d106      	bne.n	8000c3c <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c34:	f023 0310 	bic.w	r3, r3, #16
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c3a:	e02a      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <GPIO_PeriClockControl+0x1c8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d106      	bne.n	8000c52 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c4a:	f023 0320 	bic.w	r3, r3, #32
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c50:	e01f      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <GPIO_PeriClockControl+0x1cc>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d106      	bne.n	8000c68 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c66:	e014      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <GPIO_PeriClockControl+0x1d0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d106      	bne.n	8000c7e <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c7c:	e009      	b.n	8000c92 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <GPIO_PeriClockControl+0x1d4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d105      	bne.n	8000c92 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <GPIO_PeriClockControl+0x1b4>)
 8000c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020c00 	.word	0x40020c00
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40021400 	.word	0x40021400
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40021c00 	.word	0x40021c00
 8000cc4:	40022000 	.word	0x40022000

08000cc8 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff0a 	bl	8000af0 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	795b      	ldrb	r3, [r3, #5]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d820      	bhi.n	8000d2a <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	795b      	ldrb	r3, [r3, #5]
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	791b      	ldrb	r3, [r3, #4]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2103      	movs	r1, #3
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4619      	mov	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	400a      	ands	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e0d0      	b.n	8000ecc <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	795b      	ldrb	r3, [r3, #5]
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d117      	bne.n	8000d62 <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <GPIO_Init+0x19c>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	7912      	ldrb	r2, [r2, #4]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	408a      	lsls	r2, r1
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <GPIO_Init+0x19c>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <GPIO_Init+0x19c>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	7912      	ldrb	r2, [r2, #4]
 8000d50:	4611      	mov	r1, r2
 8000d52:	2201      	movs	r2, #1
 8000d54:	408a      	lsls	r2, r1
 8000d56:	43d2      	mvns	r2, r2
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a42      	ldr	r2, [pc, #264]	; (8000e64 <GPIO_Init+0x19c>)
 8000d5c:	400b      	ands	r3, r1
 8000d5e:	6093      	str	r3, [r2, #8]
 8000d60:	e031      	b.n	8000dc6 <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	795b      	ldrb	r3, [r3, #5]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d117      	bne.n	8000d9a <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <GPIO_Init+0x19c>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	7912      	ldrb	r2, [r2, #4]
 8000d72:	4611      	mov	r1, r2
 8000d74:	2201      	movs	r2, #1
 8000d76:	408a      	lsls	r2, r1
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <GPIO_Init+0x19c>)
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <GPIO_Init+0x19c>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7912      	ldrb	r2, [r2, #4]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	408a      	lsls	r2, r1
 8000d8e:	43d2      	mvns	r2, r2
 8000d90:	4611      	mov	r1, r2
 8000d92:	4a34      	ldr	r2, [pc, #208]	; (8000e64 <GPIO_Init+0x19c>)
 8000d94:	400b      	ands	r3, r1
 8000d96:	60d3      	str	r3, [r2, #12]
 8000d98:	e015      	b.n	8000dc6 <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d9a:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <GPIO_Init+0x19c>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	7912      	ldrb	r2, [r2, #4]
 8000da2:	4611      	mov	r1, r2
 8000da4:	2201      	movs	r2, #1
 8000da6:	408a      	lsls	r2, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <GPIO_Init+0x19c>)
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <GPIO_Init+0x19c>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	7912      	ldrb	r2, [r2, #4]
 8000db8:	4611      	mov	r1, r2
 8000dba:	2201      	movs	r2, #1
 8000dbc:	408a      	lsls	r2, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <GPIO_Init+0x19c>)
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <GPIO_Init+0x1a0>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <GPIO_Init+0x1a0>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	791b      	ldrb	r3, [r3, #4]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <GPIO_Init+0x1a4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d050      	beq.n	8000e90 <GPIO_Init+0x1c8>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <GPIO_Init+0x1a8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d032      	beq.n	8000e5e <GPIO_Init+0x196>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <GPIO_Init+0x1ac>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d02b      	beq.n	8000e5a <GPIO_Init+0x192>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <GPIO_Init+0x1b0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d024      	beq.n	8000e56 <GPIO_Init+0x18e>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <GPIO_Init+0x1b4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01d      	beq.n	8000e52 <GPIO_Init+0x18a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <GPIO_Init+0x1b8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d016      	beq.n	8000e4e <GPIO_Init+0x186>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <GPIO_Init+0x1bc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00f      	beq.n	8000e4a <GPIO_Init+0x182>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <GPIO_Init+0x1c0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d008      	beq.n	8000e46 <GPIO_Init+0x17e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <GPIO_Init+0x1c4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <GPIO_Init+0x17a>
 8000e3e:	2308      	movs	r3, #8
 8000e40:	e027      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e42:	2300      	movs	r3, #0
 8000e44:	e025      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e023      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e021      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e01f      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e01d      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e01b      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e019      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e017      	b.n	8000e92 <GPIO_Init+0x1ca>
 8000e62:	bf00      	nop
 8000e64:	40013c00 	.word	0x40013c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021800 	.word	0x40021800
 8000e88:	40021c00 	.word	0x40021c00
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	2300      	movs	r3, #0
 8000e92:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000e94:	4a61      	ldr	r2, [pc, #388]	; (800101c <GPIO_Init+0x354>)
 8000e96:	7cfb      	ldrb	r3, [r7, #19]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e9e:	7c79      	ldrb	r1, [r7, #17]
 8000ea0:	7cbb      	ldrb	r3, [r7, #18]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	495c      	ldr	r1, [pc, #368]	; (800101c <GPIO_Init+0x354>)
 8000eac:	7cfb      	ldrb	r3, [r7, #19]
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <GPIO_Init+0x358>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	7912      	ldrb	r2, [r2, #4]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	408a      	lsls	r2, r1
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a56      	ldr	r2, [pc, #344]	; (8001020 <GPIO_Init+0x358>)
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	799b      	ldrb	r3, [r3, #6]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2103      	movs	r1, #3
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	400a      	ands	r2, r1
 8000efe:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6899      	ldr	r1, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	79db      	ldrb	r3, [r3, #7]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	791b      	ldrb	r3, [r3, #4]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2103      	movs	r1, #3
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68d9      	ldr	r1, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	795b      	ldrb	r3, [r3, #5]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d003      	beq.n	8000f68 <GPIO_Init+0x2a0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d11f      	bne.n	8000fa8 <GPIO_Init+0x2e0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7a1b      	ldrb	r3, [r3, #8]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	791b      	ldrb	r3, [r3, #4]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	4619      	mov	r1, r3
 8000f84:	2301      	movs	r3, #1
 8000f86:	408b      	lsls	r3, r1
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	400a      	ands	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6859      	ldr	r1, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d131      	bne.n	8001014 <GPIO_Init+0x34c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	791b      	ldrb	r3, [r3, #4]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	7c3a      	ldrb	r2, [r7, #16]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7c3a      	ldrb	r2, [r7, #16]
 8000fe2:	4001      	ands	r1, r0
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7c3a      	ldrb	r2, [r7, #16]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7a5b      	ldrb	r3, [r3, #9]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	7c3a      	ldrb	r2, [r7, #16]
 800100c:	4301      	orrs	r1, r0
 800100e:	3208      	adds	r2, #8
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013800 	.word	0x40013800
 8001020:	40013c00 	.word	0x40013c00

08001024 <I2C_ExecuteAddressPhase>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t RorW){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
 8001030:	4613      	mov	r3, r2
 8001032:	70bb      	strb	r3, [r7, #2]
	if (RorW == READ)
 8001034:	78bb      	ldrb	r3, [r7, #2]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d107      	bne.n	800104a <I2C_ExecuteAddressPhase+0x26>
		pI2Cx->DR = ((slaveAddr << 1) | (0b00000001));
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	611a      	str	r2, [r3, #16]
	else if (RorW == WRITE)
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
}
 8001048:	e007      	b.n	800105a <I2C_ExecuteAddressPhase+0x36>
	else if (RorW == WRITE)
 800104a:	78bb      	ldrb	r3, [r7, #2]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <I2C_ExecuteAddressPhase+0x36>
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <I2C_ClearADDRFlag>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01f      	beq.n	80010bc <I2C_ClearADDRFlag+0x56>
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <I2C_ClearADDRFlag+0x66>
			if(pI2CHandle->RxSize == 1){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10e      	bne.n	80010aa <I2C_ClearADDRFlag+0x44>
				// First disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f950 	bl	8001338 <I2C_ManageAcking>

				// Clear the ADDR flag (Read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	60fb      	str	r3, [r7, #12]
		// Clear the ADDR flag (Read SR1, read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80010a8:	e010      	b.n	80010cc <I2C_ClearADDRFlag+0x66>
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	60fb      	str	r3, [r7, #12]
}
 80010ba:	e007      	b.n	80010cc <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	60fb      	str	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <I2C_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d120      	bne.n	8001128 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <I2C_PeriClockControl+0xa8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <I2C_PeriClockControl+0xac>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <I2C_PeriClockControl+0xac>)
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DI();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DI();
	}
}
 80010fa:	e038      	b.n	800116e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <I2C_PeriClockControl+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d106      	bne.n	8001112 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <I2C_PeriClockControl+0xac>)
 800110a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001110:	e02d      	b.n	800116e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <I2C_PeriClockControl+0xb4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d129      	bne.n	800116e <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <I2C_PeriClockControl+0xac>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001126:	e022      	b.n	800116e <I2C_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d11f      	bne.n	800116e <I2C_PeriClockControl+0x9a>
		if(pI2Cx == I2C1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <I2C_PeriClockControl+0xa8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d106      	bne.n	8001144 <I2C_PeriClockControl+0x70>
			I2C1_PCLK_DI();
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <I2C_PeriClockControl+0xac>)
 800113c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001142:	e014      	b.n	800116e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <I2C_PeriClockControl+0xb0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d106      	bne.n	800115a <I2C_PeriClockControl+0x86>
			I2C2_PCLK_DI();
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <I2C_PeriClockControl+0xac>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001152:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001158:	e009      	b.n	800116e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <I2C_PeriClockControl+0xb4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d105      	bne.n	800116e <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_DI();
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <I2C_PeriClockControl+0xac>)
 8001168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40005800 	.word	0x40005800
 8001188:	40005c00 	.word	0x40005c00

0800118c <I2C_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff98 	bl	80010d4 <I2C_PeriClockControl>

	tempreg |= (pI2CHandle->I2C_Config.AckControl << 10);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7a5b      	ldrb	r3, [r3, #9]
 80011a8:	029b      	lsls	r3, r3, #10
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 80011be:	f000 fa0d 	bl	80015dc <RCC_GetPCLK1Value>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a50      	ldr	r2, [pc, #320]	; (8001308 <I2C_Init+0x17c>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011d8:	605a      	str	r2, [r3, #4]

	// Address configuration
	tempreg = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
	tempreg = (pI2CHandle->I2C_Config.DeviceAddress << I2C_OAR1_ADD7);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]

	// Set to 7-bit slave address mode
	pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_ADD_MODE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001204:	609a      	str	r2, [r3, #8]

	// Bit 14 of OAR1 has to be kept at 1 by software, for some reason
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001214:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	817b      	strh	r3, [r7, #10]
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a3b      	ldr	r2, [pc, #236]	; (800130c <I2C_Init+0x180>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d817      	bhi.n	8001254 <I2C_Init+0xc8>
		// Mode is standard mode
		pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_FS);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001232:	61da      	str	r2, [r3, #28]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.SCLSpeed);
 8001234:	f000 f9d2 	bl	80015dc <RCC_GetPCLK1Value>
 8001238:	4602      	mov	r2, r0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & (0xFFF);
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e02a      	b.n	80012aa <I2C_Init+0x11e>
	} else {
		// Mode is fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	69da      	ldr	r2, [r3, #28]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001262:	61da      	str	r2, [r3, #28]

		if(pI2CHandle->I2C_Config.FMDutyCycle == I2C_FM_DUTY_2){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7a9b      	ldrb	r3, [r3, #10]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10b      	bne.n	8001284 <I2C_Init+0xf8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.SCLSpeed);
 800126c:	f000 f9b6 	bl	80015dc <RCC_GetPCLK1Value>
 8001270:	4601      	mov	r1, r0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001280:	817b      	strh	r3, [r7, #10]
 8001282:	e00c      	b.n	800129e <I2C_Init+0x112>
		} else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.SCLSpeed);
 8001284:	f000 f9aa 	bl	80015dc <RCC_GetPCLK1Value>
 8001288:	4601      	mov	r1, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	fbb1 f3f3 	udiv	r3, r1, r3
 800129c:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & (0xFFF);
 800129e:	897b      	ldrh	r3, [r7, #10]
 80012a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= (tempreg);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69d9      	ldr	r1, [r3, #28]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <I2C_Init+0x180>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d809      	bhi.n	80012d8 <I2C_Init+0x14c>
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80012c4:	f000 f98a 	bl	80015dc <RCC_GetPCLK1Value>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <I2C_Init+0x17c>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00c      	b.n	80012f2 <I2C_Init+0x166>
	} else {
		tempreg = ((RCC_GetPCLK1Value() * 300) /1000000U) + 1;
 80012d8:	f000 f980 	bl	80015dc <RCC_GetPCLK1Value>
 80012dc:	4603      	mov	r3, r0
 80012de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <I2C_Init+0x17c>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE =  (tempreg & 0x3F);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012fc:	621a      	str	r2, [r3, #32]
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	431bde83 	.word	0x431bde83
 800130c:	000186a0 	.word	0x000186a0

08001310 <I2C_GetSR1FlagStatus>:
 *
 * @return		- SET or RESET
 *
 * @Note		- none
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint32_t flagName){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & flagName)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_GetSR1FlagStatus+0x1a>
		return FLAG_SET;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <I2C_GetSR1FlagStatus+0x1c>
	else
		return FLAG_RESET;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <I2C_ManageAcking>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t ackOrNack){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	if(ackOrNack == I2C_ACK_ENABLE)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d106      	bne.n	8001358 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
}
 8001356:	e005      	b.n	8001364 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <I2C_GenerateStartCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <I2C_GenerateStopCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <I2C_MasterSendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffd4 	bl	8001370 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) == FLAG_RESET);
 80013c8:	bf00      	nop
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff9d 	bl	8001310 <I2C_GetSR1FlagStatus>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f6      	beq.n	80013ca <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, WRITE);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	78f9      	ldrb	r1, [r7, #3]
 80013e2:	2200      	movs	r2, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe1d 	bl	8001024 <I2C_ExecuteAddressPhase>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 80013ea:	bf00      	nop
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff8c 	bl	8001310 <I2C_GetSR1FlagStatus>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f6      	beq.n	80013ec <I2C_MasterSendData+0x3c>

	// 5. Clear the ADDR flag according to its software sequence
	//    Note: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff fe31 	bl	8001066 <I2C_ClearADDRFlag>

	// 6. Send the data until len becomes 0
	for(int i = 0; i < len; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e013      	b.n	8001432 <I2C_MasterSendData+0x82>
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET);
 800140a:	bf00      	nop
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff7c 	bl	8001310 <I2C_GetSR1FlagStatus>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f6      	beq.n	800140c <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = pTxbuffer[i];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < len; i++){
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	d8e7      	bhi.n	800140a <I2C_MasterSendData+0x5a>
	}

	// 7. When Len becomes zero wait for TXE=1 and BTF=1 before generating ther STOP condition
	//	  Note: TXE=1, BTF-1, means that both SR and DR are empty and next transmission should begin
	//	  when BTF=1 SCL will be stretched (pulled to LOW)
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 800143a:	bf00      	nop
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2104      	movs	r1, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff64 	bl	8001310 <I2C_GetSR1FlagStatus>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f6      	beq.n	800143c <I2C_MasterSendData+0x8c>
			(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5b 	bl	8001310 <I2C_GetSR1FlagStatus>
 800145a:	4603      	mov	r3, r0
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ed      	beq.n	800143c <I2C_MasterSendData+0x8c>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	//    Note: generating STOP automatically clears the BTF
	if (sr == I2C_DISABLE_RS)
 8001460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <I2C_MasterSendData+0xc2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff8f 	bl	8001390 <I2C_GenerateStopCondition>

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <I2C_MasterReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr){
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	70fb      	strb	r3, [r7, #3]
	// 1. Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff6f 	bl	8001370 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) == FLAG_RESET);
 8001492:	bf00      	nop
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff38 	bl	8001310 <I2C_GetSR1FlagStatus>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f6      	beq.n	8001494 <I2C_MasterReceiveData+0x1a>

	// 3. Send slave address
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, READ);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	78f9      	ldrb	r1, [r7, #3]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fdb8 	bl	8001024 <I2C_ExecuteAddressPhase>

	// 4. Confirm that Ack bit is received by checking addr bit
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 80014b4:	bf00      	nop
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2102      	movs	r1, #2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff27 	bl	8001310 <I2C_GetSR1FlagStatus>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f6      	beq.n	80014b6 <I2C_MasterReceiveData+0x3c>

	// Procedure to read only 1 byte from slave
	if (len == 1){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d122      	bne.n	8001514 <I2C_MasterReceiveData+0x9a>
		// Disable ACKing
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff2f 	bl	8001338 <I2C_ManageAcking>

		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fdc3 	bl	8001066 <I2C_ClearADDRFlag>

		// Wair until RxNE becomes 1
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG) == FLAG_RESET)
 80014e0:	e008      	b.n	80014f4 <I2C_MasterReceiveData+0x7a>

		// Generate STOP condition
		if (sr == I2C_DISABLE_RS)
 80014e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d104      	bne.n	80014f4 <I2C_MasterReceiveData+0x7a>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff4e 	bl	8001390 <I2C_GenerateStopCondition>
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG) == FLAG_RESET)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff08 	bl	8001310 <I2C_GetSR1FlagStatus>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ed      	beq.n	80014e2 <I2C_MasterReceiveData+0x68>

		// Read data into buffer
		*pRxBuffer = (uint8_t)(pI2CHandle->pI2Cx->DR);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e02f      	b.n	8001574 <I2C_MasterReceiveData+0xfa>
	}
	// Procedure to read multiple bytes from slave
	else {
		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fda6 	bl	8001066 <I2C_ClearADDRFlag>

		// Read the data until len becomes zero
		for (uint32_t i = len; i > 0; i--){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e026      	b.n	800156e <I2C_MasterReceiveData+0xf4>
			// Wait until RXnE becomes 1
			while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG) == FLAG_RESET);
 8001520:	bf00      	nop
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fef1 	bl	8001310 <I2C_GetSR1FlagStatus>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f6      	beq.n	8001522 <I2C_MasterReceiveData+0xa8>

			if(i == 2){ // if the last 2 bytes are remaining
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d10e      	bne.n	8001558 <I2C_MasterReceiveData+0xde>
				// Clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fef9 	bl	8001338 <I2C_ManageAcking>

				// Generate STOP condition
				if (sr == I2C_DISABLE_RS)
 8001546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <I2C_MasterReceiveData+0xde>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff1c 	bl	8001390 <I2C_GenerateStopCondition>
			}

			// Read the data from data register into buffer and increment buffer
			*(pRxBuffer++) = (uint8_t)(pI2CHandle->pI2Cx->DR);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6919      	ldr	r1, [r3, #16]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	b2ca      	uxtb	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = len; i > 0; i--){
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b01      	subs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1d5      	bne.n	8001520 <I2C_MasterReceiveData+0xa6>
		}
	}

	// Re-enable ACKing
	if(pI2CHandle->I2C_Config.AckControl == I2C_ACK_ENABLE)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	7a5b      	ldrb	r3, [r3, #9]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <I2C_MasterReceiveData+0x10e>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fed8 	bl	8001338 <I2C_ManageAcking>
}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <I2C_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeripheralControl(I2C_Handle_t* pI2CHandle, uint8_t EnorDi){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d110      	bne.n	80015c4 <I2C_PeripheralControl+0x34>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
		I2C_ManageAcking(pI2CHandle->pI2Cx, pI2CHandle->I2C_Config.AckControl);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7a5b      	ldrb	r3, [r3, #9]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff febb 	bl	8001338 <I2C_ManageAcking>
	}
	else
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}
 80015c2:	e007      	b.n	80015d4 <I2C_PeripheralControl+0x44>
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <RCC_GetPCLK1Value>:
 *
 * @return		- APB1 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1Value(void){
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
	uint32_t pclk1, apb1p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <RCC_GetPCLK1Value+0x90>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <RCC_GetPCLK1Value+0x94>)
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e004      	b.n	8001606 <RCC_GetPCLK1Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <RCC_GetPCLK1Value+0x2a>
		systemClk = 8000000;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <RCC_GetPCLK1Value+0x98>)
 8001604:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	//AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <RCC_GetPCLK1Value+0x90>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d802      	bhi.n	800161e <RCC_GetPCLK1Value+0x42>
		ahbp = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	e005      	b.n	800162a <RCC_GetPCLK1Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3b08      	subs	r3, #8
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <RCC_GetPCLK1Value+0x9c>)
 8001624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001628:	613b      	str	r3, [r7, #16]

	//APB1 prescaler starts at 10th bit
	temp = (RCC->CFGR >> 10) & 0b111;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <RCC_GetPCLK1Value+0x90>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	0a9b      	lsrs	r3, r3, #10
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d802      	bhi.n	8001642 <RCC_GetPCLK1Value+0x66>
		apb1p = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e005      	b.n	800164e <RCC_GetPCLK1Value+0x72>
	else
		apb1p = APB1Prescaler[temp - 0b100];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3b04      	subs	r3, #4
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <RCC_GetPCLK1Value+0xa0>)
 8001648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164c:	617b      	str	r3, [r7, #20]

	pclk1 = systemClk/(ahbp * apb1p);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	603b      	str	r3, [r7, #0]

	return pclk1;
 800165e:	683b      	ldr	r3, [r7, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40023800 	.word	0x40023800
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200
 8001678:	20000000 	.word	0x20000000
 800167c:	20000010 	.word	0x20000010

08001680 <__errno>:
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <__errno+0x8>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000018 	.word	0x20000018

0800168c <__libc_init_array>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4d0d      	ldr	r5, [pc, #52]	; (80016c4 <__libc_init_array+0x38>)
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <__libc_init_array+0x3c>)
 8001692:	1b64      	subs	r4, r4, r5
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	2600      	movs	r6, #0
 8001698:	42a6      	cmp	r6, r4
 800169a:	d109      	bne.n	80016b0 <__libc_init_array+0x24>
 800169c:	4d0b      	ldr	r5, [pc, #44]	; (80016cc <__libc_init_array+0x40>)
 800169e:	4c0c      	ldr	r4, [pc, #48]	; (80016d0 <__libc_init_array+0x44>)
 80016a0:	f001 fb52 	bl	8002d48 <_init>
 80016a4:	1b64      	subs	r4, r4, r5
 80016a6:	10a4      	asrs	r4, r4, #2
 80016a8:	2600      	movs	r6, #0
 80016aa:	42a6      	cmp	r6, r4
 80016ac:	d105      	bne.n	80016ba <__libc_init_array+0x2e>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b4:	4798      	blx	r3
 80016b6:	3601      	adds	r6, #1
 80016b8:	e7ee      	b.n	8001698 <__libc_init_array+0xc>
 80016ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80016be:	4798      	blx	r3
 80016c0:	3601      	adds	r6, #1
 80016c2:	e7f2      	b.n	80016aa <__libc_init_array+0x1e>
 80016c4:	08002f24 	.word	0x08002f24
 80016c8:	08002f24 	.word	0x08002f24
 80016cc:	08002f24 	.word	0x08002f24
 80016d0:	08002f28 	.word	0x08002f28

080016d4 <malloc>:
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <malloc+0xc>)
 80016d6:	4601      	mov	r1, r0
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	f000 b877 	b.w	80017cc <_malloc_r>
 80016de:	bf00      	nop
 80016e0:	20000018 	.word	0x20000018

080016e4 <memset>:
 80016e4:	4402      	add	r2, r0
 80016e6:	4603      	mov	r3, r0
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d100      	bne.n	80016ee <memset+0xa>
 80016ec:	4770      	bx	lr
 80016ee:	f803 1b01 	strb.w	r1, [r3], #1
 80016f2:	e7f9      	b.n	80016e8 <memset+0x4>

080016f4 <_free_r>:
 80016f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016f6:	2900      	cmp	r1, #0
 80016f8:	d044      	beq.n	8001784 <_free_r+0x90>
 80016fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016fe:	9001      	str	r0, [sp, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f1a1 0404 	sub.w	r4, r1, #4
 8001706:	bfb8      	it	lt
 8001708:	18e4      	addlt	r4, r4, r3
 800170a:	f000 fc71 	bl	8001ff0 <__malloc_lock>
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <_free_r+0x94>)
 8001710:	9801      	ldr	r0, [sp, #4]
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	b933      	cbnz	r3, 8001724 <_free_r+0x30>
 8001716:	6063      	str	r3, [r4, #4]
 8001718:	6014      	str	r4, [r2, #0]
 800171a:	b003      	add	sp, #12
 800171c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001720:	f000 bc6c 	b.w	8001ffc <__malloc_unlock>
 8001724:	42a3      	cmp	r3, r4
 8001726:	d908      	bls.n	800173a <_free_r+0x46>
 8001728:	6825      	ldr	r5, [r4, #0]
 800172a:	1961      	adds	r1, r4, r5
 800172c:	428b      	cmp	r3, r1
 800172e:	bf01      	itttt	eq
 8001730:	6819      	ldreq	r1, [r3, #0]
 8001732:	685b      	ldreq	r3, [r3, #4]
 8001734:	1949      	addeq	r1, r1, r5
 8001736:	6021      	streq	r1, [r4, #0]
 8001738:	e7ed      	b.n	8001716 <_free_r+0x22>
 800173a:	461a      	mov	r2, r3
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	b10b      	cbz	r3, 8001744 <_free_r+0x50>
 8001740:	42a3      	cmp	r3, r4
 8001742:	d9fa      	bls.n	800173a <_free_r+0x46>
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	1855      	adds	r5, r2, r1
 8001748:	42a5      	cmp	r5, r4
 800174a:	d10b      	bne.n	8001764 <_free_r+0x70>
 800174c:	6824      	ldr	r4, [r4, #0]
 800174e:	4421      	add	r1, r4
 8001750:	1854      	adds	r4, r2, r1
 8001752:	42a3      	cmp	r3, r4
 8001754:	6011      	str	r1, [r2, #0]
 8001756:	d1e0      	bne.n	800171a <_free_r+0x26>
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	6053      	str	r3, [r2, #4]
 800175e:	4421      	add	r1, r4
 8001760:	6011      	str	r1, [r2, #0]
 8001762:	e7da      	b.n	800171a <_free_r+0x26>
 8001764:	d902      	bls.n	800176c <_free_r+0x78>
 8001766:	230c      	movs	r3, #12
 8001768:	6003      	str	r3, [r0, #0]
 800176a:	e7d6      	b.n	800171a <_free_r+0x26>
 800176c:	6825      	ldr	r5, [r4, #0]
 800176e:	1961      	adds	r1, r4, r5
 8001770:	428b      	cmp	r3, r1
 8001772:	bf04      	itt	eq
 8001774:	6819      	ldreq	r1, [r3, #0]
 8001776:	685b      	ldreq	r3, [r3, #4]
 8001778:	6063      	str	r3, [r4, #4]
 800177a:	bf04      	itt	eq
 800177c:	1949      	addeq	r1, r1, r5
 800177e:	6021      	streq	r1, [r4, #0]
 8001780:	6054      	str	r4, [r2, #4]
 8001782:	e7ca      	b.n	800171a <_free_r+0x26>
 8001784:	b003      	add	sp, #12
 8001786:	bd30      	pop	{r4, r5, pc}
 8001788:	200000c4 	.word	0x200000c4

0800178c <sbrk_aligned>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	4e0e      	ldr	r6, [pc, #56]	; (80017c8 <sbrk_aligned+0x3c>)
 8001790:	460c      	mov	r4, r1
 8001792:	6831      	ldr	r1, [r6, #0]
 8001794:	4605      	mov	r5, r0
 8001796:	b911      	cbnz	r1, 800179e <sbrk_aligned+0x12>
 8001798:	f000 f91a 	bl	80019d0 <_sbrk_r>
 800179c:	6030      	str	r0, [r6, #0]
 800179e:	4621      	mov	r1, r4
 80017a0:	4628      	mov	r0, r5
 80017a2:	f000 f915 	bl	80019d0 <_sbrk_r>
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	d00a      	beq.n	80017c0 <sbrk_aligned+0x34>
 80017aa:	1cc4      	adds	r4, r0, #3
 80017ac:	f024 0403 	bic.w	r4, r4, #3
 80017b0:	42a0      	cmp	r0, r4
 80017b2:	d007      	beq.n	80017c4 <sbrk_aligned+0x38>
 80017b4:	1a21      	subs	r1, r4, r0
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 f90a 	bl	80019d0 <_sbrk_r>
 80017bc:	3001      	adds	r0, #1
 80017be:	d101      	bne.n	80017c4 <sbrk_aligned+0x38>
 80017c0:	f04f 34ff 	mov.w	r4, #4294967295
 80017c4:	4620      	mov	r0, r4
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	200000c8 	.word	0x200000c8

080017cc <_malloc_r>:
 80017cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d0:	1ccd      	adds	r5, r1, #3
 80017d2:	f025 0503 	bic.w	r5, r5, #3
 80017d6:	3508      	adds	r5, #8
 80017d8:	2d0c      	cmp	r5, #12
 80017da:	bf38      	it	cc
 80017dc:	250c      	movcc	r5, #12
 80017de:	2d00      	cmp	r5, #0
 80017e0:	4607      	mov	r7, r0
 80017e2:	db01      	blt.n	80017e8 <_malloc_r+0x1c>
 80017e4:	42a9      	cmp	r1, r5
 80017e6:	d905      	bls.n	80017f4 <_malloc_r+0x28>
 80017e8:	230c      	movs	r3, #12
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	2600      	movs	r6, #0
 80017ee:	4630      	mov	r0, r6
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f4:	4e2e      	ldr	r6, [pc, #184]	; (80018b0 <_malloc_r+0xe4>)
 80017f6:	f000 fbfb 	bl	8001ff0 <__malloc_lock>
 80017fa:	6833      	ldr	r3, [r6, #0]
 80017fc:	461c      	mov	r4, r3
 80017fe:	bb34      	cbnz	r4, 800184e <_malloc_r+0x82>
 8001800:	4629      	mov	r1, r5
 8001802:	4638      	mov	r0, r7
 8001804:	f7ff ffc2 	bl	800178c <sbrk_aligned>
 8001808:	1c43      	adds	r3, r0, #1
 800180a:	4604      	mov	r4, r0
 800180c:	d14d      	bne.n	80018aa <_malloc_r+0xde>
 800180e:	6834      	ldr	r4, [r6, #0]
 8001810:	4626      	mov	r6, r4
 8001812:	2e00      	cmp	r6, #0
 8001814:	d140      	bne.n	8001898 <_malloc_r+0xcc>
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	4631      	mov	r1, r6
 800181a:	4638      	mov	r0, r7
 800181c:	eb04 0803 	add.w	r8, r4, r3
 8001820:	f000 f8d6 	bl	80019d0 <_sbrk_r>
 8001824:	4580      	cmp	r8, r0
 8001826:	d13a      	bne.n	800189e <_malloc_r+0xd2>
 8001828:	6821      	ldr	r1, [r4, #0]
 800182a:	3503      	adds	r5, #3
 800182c:	1a6d      	subs	r5, r5, r1
 800182e:	f025 0503 	bic.w	r5, r5, #3
 8001832:	3508      	adds	r5, #8
 8001834:	2d0c      	cmp	r5, #12
 8001836:	bf38      	it	cc
 8001838:	250c      	movcc	r5, #12
 800183a:	4629      	mov	r1, r5
 800183c:	4638      	mov	r0, r7
 800183e:	f7ff ffa5 	bl	800178c <sbrk_aligned>
 8001842:	3001      	adds	r0, #1
 8001844:	d02b      	beq.n	800189e <_malloc_r+0xd2>
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	442b      	add	r3, r5
 800184a:	6023      	str	r3, [r4, #0]
 800184c:	e00e      	b.n	800186c <_malloc_r+0xa0>
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	1b52      	subs	r2, r2, r5
 8001852:	d41e      	bmi.n	8001892 <_malloc_r+0xc6>
 8001854:	2a0b      	cmp	r2, #11
 8001856:	d916      	bls.n	8001886 <_malloc_r+0xba>
 8001858:	1961      	adds	r1, r4, r5
 800185a:	42a3      	cmp	r3, r4
 800185c:	6025      	str	r5, [r4, #0]
 800185e:	bf18      	it	ne
 8001860:	6059      	strne	r1, [r3, #4]
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	bf08      	it	eq
 8001866:	6031      	streq	r1, [r6, #0]
 8001868:	5162      	str	r2, [r4, r5]
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	4638      	mov	r0, r7
 800186e:	f104 060b 	add.w	r6, r4, #11
 8001872:	f000 fbc3 	bl	8001ffc <__malloc_unlock>
 8001876:	f026 0607 	bic.w	r6, r6, #7
 800187a:	1d23      	adds	r3, r4, #4
 800187c:	1af2      	subs	r2, r6, r3
 800187e:	d0b6      	beq.n	80017ee <_malloc_r+0x22>
 8001880:	1b9b      	subs	r3, r3, r6
 8001882:	50a3      	str	r3, [r4, r2]
 8001884:	e7b3      	b.n	80017ee <_malloc_r+0x22>
 8001886:	6862      	ldr	r2, [r4, #4]
 8001888:	42a3      	cmp	r3, r4
 800188a:	bf0c      	ite	eq
 800188c:	6032      	streq	r2, [r6, #0]
 800188e:	605a      	strne	r2, [r3, #4]
 8001890:	e7ec      	b.n	800186c <_malloc_r+0xa0>
 8001892:	4623      	mov	r3, r4
 8001894:	6864      	ldr	r4, [r4, #4]
 8001896:	e7b2      	b.n	80017fe <_malloc_r+0x32>
 8001898:	4634      	mov	r4, r6
 800189a:	6876      	ldr	r6, [r6, #4]
 800189c:	e7b9      	b.n	8001812 <_malloc_r+0x46>
 800189e:	230c      	movs	r3, #12
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4638      	mov	r0, r7
 80018a4:	f000 fbaa 	bl	8001ffc <__malloc_unlock>
 80018a8:	e7a1      	b.n	80017ee <_malloc_r+0x22>
 80018aa:	6025      	str	r5, [r4, #0]
 80018ac:	e7de      	b.n	800186c <_malloc_r+0xa0>
 80018ae:	bf00      	nop
 80018b0:	200000c4 	.word	0x200000c4

080018b4 <iprintf>:
 80018b4:	b40f      	push	{r0, r1, r2, r3}
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <iprintf+0x2c>)
 80018b8:	b513      	push	{r0, r1, r4, lr}
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	b124      	cbz	r4, 80018c8 <iprintf+0x14>
 80018be:	69a3      	ldr	r3, [r4, #24]
 80018c0:	b913      	cbnz	r3, 80018c8 <iprintf+0x14>
 80018c2:	4620      	mov	r0, r4
 80018c4:	f000 fa8e 	bl	8001de4 <__sinit>
 80018c8:	ab05      	add	r3, sp, #20
 80018ca:	9a04      	ldr	r2, [sp, #16]
 80018cc:	68a1      	ldr	r1, [r4, #8]
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	4620      	mov	r0, r4
 80018d2:	f000 fd1f 	bl	8002314 <_vfiprintf_r>
 80018d6:	b002      	add	sp, #8
 80018d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018dc:	b004      	add	sp, #16
 80018de:	4770      	bx	lr
 80018e0:	20000018 	.word	0x20000018

080018e4 <_puts_r>:
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	460e      	mov	r6, r1
 80018e8:	4605      	mov	r5, r0
 80018ea:	b118      	cbz	r0, 80018f4 <_puts_r+0x10>
 80018ec:	6983      	ldr	r3, [r0, #24]
 80018ee:	b90b      	cbnz	r3, 80018f4 <_puts_r+0x10>
 80018f0:	f000 fa78 	bl	8001de4 <__sinit>
 80018f4:	69ab      	ldr	r3, [r5, #24]
 80018f6:	68ac      	ldr	r4, [r5, #8]
 80018f8:	b913      	cbnz	r3, 8001900 <_puts_r+0x1c>
 80018fa:	4628      	mov	r0, r5
 80018fc:	f000 fa72 	bl	8001de4 <__sinit>
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <_puts_r+0xd0>)
 8001902:	429c      	cmp	r4, r3
 8001904:	d120      	bne.n	8001948 <_puts_r+0x64>
 8001906:	686c      	ldr	r4, [r5, #4]
 8001908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d405      	bmi.n	800191a <_puts_r+0x36>
 800190e:	89a3      	ldrh	r3, [r4, #12]
 8001910:	0598      	lsls	r0, r3, #22
 8001912:	d402      	bmi.n	800191a <_puts_r+0x36>
 8001914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001916:	f000 fb03 	bl	8001f20 <__retarget_lock_acquire_recursive>
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	0719      	lsls	r1, r3, #28
 800191e:	d51d      	bpl.n	800195c <_puts_r+0x78>
 8001920:	6923      	ldr	r3, [r4, #16]
 8001922:	b1db      	cbz	r3, 800195c <_puts_r+0x78>
 8001924:	3e01      	subs	r6, #1
 8001926:	68a3      	ldr	r3, [r4, #8]
 8001928:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800192c:	3b01      	subs	r3, #1
 800192e:	60a3      	str	r3, [r4, #8]
 8001930:	bb39      	cbnz	r1, 8001982 <_puts_r+0x9e>
 8001932:	2b00      	cmp	r3, #0
 8001934:	da38      	bge.n	80019a8 <_puts_r+0xc4>
 8001936:	4622      	mov	r2, r4
 8001938:	210a      	movs	r1, #10
 800193a:	4628      	mov	r0, r5
 800193c:	f000 f878 	bl	8001a30 <__swbuf_r>
 8001940:	3001      	adds	r0, #1
 8001942:	d011      	beq.n	8001968 <_puts_r+0x84>
 8001944:	250a      	movs	r5, #10
 8001946:	e011      	b.n	800196c <_puts_r+0x88>
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <_puts_r+0xd4>)
 800194a:	429c      	cmp	r4, r3
 800194c:	d101      	bne.n	8001952 <_puts_r+0x6e>
 800194e:	68ac      	ldr	r4, [r5, #8]
 8001950:	e7da      	b.n	8001908 <_puts_r+0x24>
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <_puts_r+0xd8>)
 8001954:	429c      	cmp	r4, r3
 8001956:	bf08      	it	eq
 8001958:	68ec      	ldreq	r4, [r5, #12]
 800195a:	e7d5      	b.n	8001908 <_puts_r+0x24>
 800195c:	4621      	mov	r1, r4
 800195e:	4628      	mov	r0, r5
 8001960:	f000 f8b8 	bl	8001ad4 <__swsetup_r>
 8001964:	2800      	cmp	r0, #0
 8001966:	d0dd      	beq.n	8001924 <_puts_r+0x40>
 8001968:	f04f 35ff 	mov.w	r5, #4294967295
 800196c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800196e:	07da      	lsls	r2, r3, #31
 8001970:	d405      	bmi.n	800197e <_puts_r+0x9a>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	059b      	lsls	r3, r3, #22
 8001976:	d402      	bmi.n	800197e <_puts_r+0x9a>
 8001978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800197a:	f000 fad2 	bl	8001f22 <__retarget_lock_release_recursive>
 800197e:	4628      	mov	r0, r5
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	2b00      	cmp	r3, #0
 8001984:	da04      	bge.n	8001990 <_puts_r+0xac>
 8001986:	69a2      	ldr	r2, [r4, #24]
 8001988:	429a      	cmp	r2, r3
 800198a:	dc06      	bgt.n	800199a <_puts_r+0xb6>
 800198c:	290a      	cmp	r1, #10
 800198e:	d004      	beq.n	800199a <_puts_r+0xb6>
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	6022      	str	r2, [r4, #0]
 8001996:	7019      	strb	r1, [r3, #0]
 8001998:	e7c5      	b.n	8001926 <_puts_r+0x42>
 800199a:	4622      	mov	r2, r4
 800199c:	4628      	mov	r0, r5
 800199e:	f000 f847 	bl	8001a30 <__swbuf_r>
 80019a2:	3001      	adds	r0, #1
 80019a4:	d1bf      	bne.n	8001926 <_puts_r+0x42>
 80019a6:	e7df      	b.n	8001968 <_puts_r+0x84>
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	250a      	movs	r5, #10
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	6022      	str	r2, [r4, #0]
 80019b0:	701d      	strb	r5, [r3, #0]
 80019b2:	e7db      	b.n	800196c <_puts_r+0x88>
 80019b4:	08002eb0 	.word	0x08002eb0
 80019b8:	08002ed0 	.word	0x08002ed0
 80019bc:	08002e90 	.word	0x08002e90

080019c0 <puts>:
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <puts+0xc>)
 80019c2:	4601      	mov	r1, r0
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f7ff bf8d 	b.w	80018e4 <_puts_r>
 80019ca:	bf00      	nop
 80019cc:	20000018 	.word	0x20000018

080019d0 <_sbrk_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d06      	ldr	r5, [pc, #24]	; (80019ec <_sbrk_r+0x1c>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	f7fe fdb6 	bl	800054c <_sbrk>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d102      	bne.n	80019ea <_sbrk_r+0x1a>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	b103      	cbz	r3, 80019ea <_sbrk_r+0x1a>
 80019e8:	6023      	str	r3, [r4, #0]
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	200000d0 	.word	0x200000d0

080019f0 <siprintf>:
 80019f0:	b40e      	push	{r1, r2, r3}
 80019f2:	b500      	push	{lr}
 80019f4:	b09c      	sub	sp, #112	; 0x70
 80019f6:	ab1d      	add	r3, sp, #116	; 0x74
 80019f8:	9002      	str	r0, [sp, #8]
 80019fa:	9006      	str	r0, [sp, #24]
 80019fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <siprintf+0x38>)
 8001a02:	9107      	str	r1, [sp, #28]
 8001a04:	9104      	str	r1, [sp, #16]
 8001a06:	4909      	ldr	r1, [pc, #36]	; (8001a2c <siprintf+0x3c>)
 8001a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a0c:	9105      	str	r1, [sp, #20]
 8001a0e:	6800      	ldr	r0, [r0, #0]
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	a902      	add	r1, sp, #8
 8001a14:	f000 fb54 	bl	80020c0 <_svfiprintf_r>
 8001a18:	9b02      	ldr	r3, [sp, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	b01c      	add	sp, #112	; 0x70
 8001a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a24:	b003      	add	sp, #12
 8001a26:	4770      	bx	lr
 8001a28:	20000018 	.word	0x20000018
 8001a2c:	ffff0208 	.word	0xffff0208

08001a30 <__swbuf_r>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	460e      	mov	r6, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	4605      	mov	r5, r0
 8001a38:	b118      	cbz	r0, 8001a42 <__swbuf_r+0x12>
 8001a3a:	6983      	ldr	r3, [r0, #24]
 8001a3c:	b90b      	cbnz	r3, 8001a42 <__swbuf_r+0x12>
 8001a3e:	f000 f9d1 	bl	8001de4 <__sinit>
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <__swbuf_r+0x98>)
 8001a44:	429c      	cmp	r4, r3
 8001a46:	d12b      	bne.n	8001aa0 <__swbuf_r+0x70>
 8001a48:	686c      	ldr	r4, [r5, #4]
 8001a4a:	69a3      	ldr	r3, [r4, #24]
 8001a4c:	60a3      	str	r3, [r4, #8]
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	071a      	lsls	r2, r3, #28
 8001a52:	d52f      	bpl.n	8001ab4 <__swbuf_r+0x84>
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b36b      	cbz	r3, 8001ab4 <__swbuf_r+0x84>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	6963      	ldr	r3, [r4, #20]
 8001a60:	b2f6      	uxtb	r6, r6
 8001a62:	4283      	cmp	r3, r0
 8001a64:	4637      	mov	r7, r6
 8001a66:	dc04      	bgt.n	8001a72 <__swbuf_r+0x42>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 f926 	bl	8001cbc <_fflush_r>
 8001a70:	bb30      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a72:	68a3      	ldr	r3, [r4, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60a3      	str	r3, [r4, #8]
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	6022      	str	r2, [r4, #0]
 8001a7e:	701e      	strb	r6, [r3, #0]
 8001a80:	6963      	ldr	r3, [r4, #20]
 8001a82:	3001      	adds	r0, #1
 8001a84:	4283      	cmp	r3, r0
 8001a86:	d004      	beq.n	8001a92 <__swbuf_r+0x62>
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	07db      	lsls	r3, r3, #31
 8001a8c:	d506      	bpl.n	8001a9c <__swbuf_r+0x6c>
 8001a8e:	2e0a      	cmp	r6, #10
 8001a90:	d104      	bne.n	8001a9c <__swbuf_r+0x6c>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f911 	bl	8001cbc <_fflush_r>
 8001a9a:	b988      	cbnz	r0, 8001ac0 <__swbuf_r+0x90>
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <__swbuf_r+0x9c>)
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d101      	bne.n	8001aaa <__swbuf_r+0x7a>
 8001aa6:	68ac      	ldr	r4, [r5, #8]
 8001aa8:	e7cf      	b.n	8001a4a <__swbuf_r+0x1a>
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <__swbuf_r+0xa0>)
 8001aac:	429c      	cmp	r4, r3
 8001aae:	bf08      	it	eq
 8001ab0:	68ec      	ldreq	r4, [r5, #12]
 8001ab2:	e7ca      	b.n	8001a4a <__swbuf_r+0x1a>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f80c 	bl	8001ad4 <__swsetup_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d0cb      	beq.n	8001a58 <__swbuf_r+0x28>
 8001ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8001ac4:	e7ea      	b.n	8001a9c <__swbuf_r+0x6c>
 8001ac6:	bf00      	nop
 8001ac8:	08002eb0 	.word	0x08002eb0
 8001acc:	08002ed0 	.word	0x08002ed0
 8001ad0:	08002e90 	.word	0x08002e90

08001ad4 <__swsetup_r>:
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <__swsetup_r+0xcc>)
 8001ad6:	b570      	push	{r4, r5, r6, lr}
 8001ad8:	681d      	ldr	r5, [r3, #0]
 8001ada:	4606      	mov	r6, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	b125      	cbz	r5, 8001aea <__swsetup_r+0x16>
 8001ae0:	69ab      	ldr	r3, [r5, #24]
 8001ae2:	b913      	cbnz	r3, 8001aea <__swsetup_r+0x16>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 f97d 	bl	8001de4 <__sinit>
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <__swsetup_r+0xd0>)
 8001aec:	429c      	cmp	r4, r3
 8001aee:	d10f      	bne.n	8001b10 <__swsetup_r+0x3c>
 8001af0:	686c      	ldr	r4, [r5, #4]
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001af8:	0719      	lsls	r1, r3, #28
 8001afa:	d42c      	bmi.n	8001b56 <__swsetup_r+0x82>
 8001afc:	06dd      	lsls	r5, r3, #27
 8001afe:	d411      	bmi.n	8001b24 <__swsetup_r+0x50>
 8001b00:	2309      	movs	r3, #9
 8001b02:	6033      	str	r3, [r6, #0]
 8001b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	e03e      	b.n	8001b8e <__swsetup_r+0xba>
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <__swsetup_r+0xd4>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <__swsetup_r+0x46>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7eb      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <__swsetup_r+0xd8>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7e6      	b.n	8001af2 <__swsetup_r+0x1e>
 8001b24:	0758      	lsls	r0, r3, #29
 8001b26:	d512      	bpl.n	8001b4e <__swsetup_r+0x7a>
 8001b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b2a:	b141      	cbz	r1, 8001b3e <__swsetup_r+0x6a>
 8001b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d002      	beq.n	8001b3a <__swsetup_r+0x66>
 8001b34:	4630      	mov	r0, r6
 8001b36:	f7ff fddd 	bl	80016f4 <_free_r>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b44:	81a3      	strh	r3, [r4, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	6063      	str	r3, [r4, #4]
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	6923      	ldr	r3, [r4, #16]
 8001b58:	b94b      	cbnz	r3, 8001b6e <__swsetup_r+0x9a>
 8001b5a:	89a3      	ldrh	r3, [r4, #12]
 8001b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b64:	d003      	beq.n	8001b6e <__swsetup_r+0x9a>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 fa01 	bl	8001f70 <__smakebuf_r>
 8001b6e:	89a0      	ldrh	r0, [r4, #12]
 8001b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b74:	f010 0301 	ands.w	r3, r0, #1
 8001b78:	d00a      	beq.n	8001b90 <__swsetup_r+0xbc>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60a3      	str	r3, [r4, #8]
 8001b7e:	6963      	ldr	r3, [r4, #20]
 8001b80:	425b      	negs	r3, r3
 8001b82:	61a3      	str	r3, [r4, #24]
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	b943      	cbnz	r3, 8001b9a <__swsetup_r+0xc6>
 8001b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b8c:	d1ba      	bne.n	8001b04 <__swsetup_r+0x30>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	0781      	lsls	r1, r0, #30
 8001b92:	bf58      	it	pl
 8001b94:	6963      	ldrpl	r3, [r4, #20]
 8001b96:	60a3      	str	r3, [r4, #8]
 8001b98:	e7f4      	b.n	8001b84 <__swsetup_r+0xb0>
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	e7f7      	b.n	8001b8e <__swsetup_r+0xba>
 8001b9e:	bf00      	nop
 8001ba0:	20000018 	.word	0x20000018
 8001ba4:	08002eb0 	.word	0x08002eb0
 8001ba8:	08002ed0 	.word	0x08002ed0
 8001bac:	08002e90 	.word	0x08002e90

08001bb0 <__sflush_r>:
 8001bb0:	898a      	ldrh	r2, [r1, #12]
 8001bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	0710      	lsls	r0, r2, #28
 8001bba:	460c      	mov	r4, r1
 8001bbc:	d458      	bmi.n	8001c70 <__sflush_r+0xc0>
 8001bbe:	684b      	ldr	r3, [r1, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dc05      	bgt.n	8001bd0 <__sflush_r+0x20>
 8001bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	dc02      	bgt.n	8001bd0 <__sflush_r+0x20>
 8001bca:	2000      	movs	r0, #0
 8001bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	d0f9      	beq.n	8001bca <__sflush_r+0x1a>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bdc:	682f      	ldr	r7, [r5, #0]
 8001bde:	602b      	str	r3, [r5, #0]
 8001be0:	d032      	beq.n	8001c48 <__sflush_r+0x98>
 8001be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001be4:	89a3      	ldrh	r3, [r4, #12]
 8001be6:	075a      	lsls	r2, r3, #29
 8001be8:	d505      	bpl.n	8001bf6 <__sflush_r+0x46>
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	1ac0      	subs	r0, r0, r3
 8001bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bf0:	b10b      	cbz	r3, 8001bf6 <__sflush_r+0x46>
 8001bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bf4:	1ac0      	subs	r0, r0, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bfc:	6a21      	ldr	r1, [r4, #32]
 8001bfe:	4628      	mov	r0, r5
 8001c00:	47b0      	blx	r6
 8001c02:	1c43      	adds	r3, r0, #1
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	d106      	bne.n	8001c16 <__sflush_r+0x66>
 8001c08:	6829      	ldr	r1, [r5, #0]
 8001c0a:	291d      	cmp	r1, #29
 8001c0c:	d82c      	bhi.n	8001c68 <__sflush_r+0xb8>
 8001c0e:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <__sflush_r+0x108>)
 8001c10:	40ca      	lsrs	r2, r1
 8001c12:	07d6      	lsls	r6, r2, #31
 8001c14:	d528      	bpl.n	8001c68 <__sflush_r+0xb8>
 8001c16:	2200      	movs	r2, #0
 8001c18:	6062      	str	r2, [r4, #4]
 8001c1a:	04d9      	lsls	r1, r3, #19
 8001c1c:	6922      	ldr	r2, [r4, #16]
 8001c1e:	6022      	str	r2, [r4, #0]
 8001c20:	d504      	bpl.n	8001c2c <__sflush_r+0x7c>
 8001c22:	1c42      	adds	r2, r0, #1
 8001c24:	d101      	bne.n	8001c2a <__sflush_r+0x7a>
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	b903      	cbnz	r3, 8001c2c <__sflush_r+0x7c>
 8001c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c2e:	602f      	str	r7, [r5, #0]
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d0ca      	beq.n	8001bca <__sflush_r+0x1a>
 8001c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c38:	4299      	cmp	r1, r3
 8001c3a:	d002      	beq.n	8001c42 <__sflush_r+0x92>
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f7ff fd59 	bl	80016f4 <_free_r>
 8001c42:	2000      	movs	r0, #0
 8001c44:	6360      	str	r0, [r4, #52]	; 0x34
 8001c46:	e7c1      	b.n	8001bcc <__sflush_r+0x1c>
 8001c48:	6a21      	ldr	r1, [r4, #32]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	47b0      	blx	r6
 8001c50:	1c41      	adds	r1, r0, #1
 8001c52:	d1c7      	bne.n	8001be4 <__sflush_r+0x34>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0c4      	beq.n	8001be4 <__sflush_r+0x34>
 8001c5a:	2b1d      	cmp	r3, #29
 8001c5c:	d001      	beq.n	8001c62 <__sflush_r+0xb2>
 8001c5e:	2b16      	cmp	r3, #22
 8001c60:	d101      	bne.n	8001c66 <__sflush_r+0xb6>
 8001c62:	602f      	str	r7, [r5, #0]
 8001c64:	e7b1      	b.n	8001bca <__sflush_r+0x1a>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	e7ad      	b.n	8001bcc <__sflush_r+0x1c>
 8001c70:	690f      	ldr	r7, [r1, #16]
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d0a9      	beq.n	8001bca <__sflush_r+0x1a>
 8001c76:	0793      	lsls	r3, r2, #30
 8001c78:	680e      	ldr	r6, [r1, #0]
 8001c7a:	bf08      	it	eq
 8001c7c:	694b      	ldreq	r3, [r1, #20]
 8001c7e:	600f      	str	r7, [r1, #0]
 8001c80:	bf18      	it	ne
 8001c82:	2300      	movne	r3, #0
 8001c84:	eba6 0807 	sub.w	r8, r6, r7
 8001c88:	608b      	str	r3, [r1, #8]
 8001c8a:	f1b8 0f00 	cmp.w	r8, #0
 8001c8e:	dd9c      	ble.n	8001bca <__sflush_r+0x1a>
 8001c90:	6a21      	ldr	r1, [r4, #32]
 8001c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c94:	4643      	mov	r3, r8
 8001c96:	463a      	mov	r2, r7
 8001c98:	4628      	mov	r0, r5
 8001c9a:	47b0      	blx	r6
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	dc06      	bgt.n	8001cae <__sflush_r+0xfe>
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	e78e      	b.n	8001bcc <__sflush_r+0x1c>
 8001cae:	4407      	add	r7, r0
 8001cb0:	eba8 0800 	sub.w	r8, r8, r0
 8001cb4:	e7e9      	b.n	8001c8a <__sflush_r+0xda>
 8001cb6:	bf00      	nop
 8001cb8:	20400001 	.word	0x20400001

08001cbc <_fflush_r>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	4605      	mov	r5, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	b913      	cbnz	r3, 8001ccc <_fflush_r+0x10>
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4628      	mov	r0, r5
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	b118      	cbz	r0, 8001cd6 <_fflush_r+0x1a>
 8001cce:	6983      	ldr	r3, [r0, #24]
 8001cd0:	b90b      	cbnz	r3, 8001cd6 <_fflush_r+0x1a>
 8001cd2:	f000 f887 	bl	8001de4 <__sinit>
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <_fflush_r+0x6c>)
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	d11b      	bne.n	8001d14 <_fflush_r+0x58>
 8001cdc:	686c      	ldr	r4, [r5, #4]
 8001cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ef      	beq.n	8001cc6 <_fflush_r+0xa>
 8001ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ce8:	07d0      	lsls	r0, r2, #31
 8001cea:	d404      	bmi.n	8001cf6 <_fflush_r+0x3a>
 8001cec:	0599      	lsls	r1, r3, #22
 8001cee:	d402      	bmi.n	8001cf6 <_fflush_r+0x3a>
 8001cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cf2:	f000 f915 	bl	8001f20 <__retarget_lock_acquire_recursive>
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f7ff ff59 	bl	8001bb0 <__sflush_r>
 8001cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d00:	07da      	lsls	r2, r3, #31
 8001d02:	4605      	mov	r5, r0
 8001d04:	d4e0      	bmi.n	8001cc8 <_fflush_r+0xc>
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	059b      	lsls	r3, r3, #22
 8001d0a:	d4dd      	bmi.n	8001cc8 <_fflush_r+0xc>
 8001d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d0e:	f000 f908 	bl	8001f22 <__retarget_lock_release_recursive>
 8001d12:	e7d9      	b.n	8001cc8 <_fflush_r+0xc>
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <_fflush_r+0x70>)
 8001d16:	429c      	cmp	r4, r3
 8001d18:	d101      	bne.n	8001d1e <_fflush_r+0x62>
 8001d1a:	68ac      	ldr	r4, [r5, #8]
 8001d1c:	e7df      	b.n	8001cde <_fflush_r+0x22>
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <_fflush_r+0x74>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	bf08      	it	eq
 8001d24:	68ec      	ldreq	r4, [r5, #12]
 8001d26:	e7da      	b.n	8001cde <_fflush_r+0x22>
 8001d28:	08002eb0 	.word	0x08002eb0
 8001d2c:	08002ed0 	.word	0x08002ed0
 8001d30:	08002e90 	.word	0x08002e90

08001d34 <std>:
 8001d34:	2300      	movs	r3, #0
 8001d36:	b510      	push	{r4, lr}
 8001d38:	4604      	mov	r4, r0
 8001d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d42:	6083      	str	r3, [r0, #8]
 8001d44:	8181      	strh	r1, [r0, #12]
 8001d46:	6643      	str	r3, [r0, #100]	; 0x64
 8001d48:	81c2      	strh	r2, [r0, #14]
 8001d4a:	6183      	str	r3, [r0, #24]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2208      	movs	r2, #8
 8001d50:	305c      	adds	r0, #92	; 0x5c
 8001d52:	f7ff fcc7 	bl	80016e4 <memset>
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <std+0x38>)
 8001d58:	6263      	str	r3, [r4, #36]	; 0x24
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <std+0x3c>)
 8001d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <std+0x40>)
 8001d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <std+0x44>)
 8001d64:	6224      	str	r4, [r4, #32]
 8001d66:	6323      	str	r3, [r4, #48]	; 0x30
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	0800289d 	.word	0x0800289d
 8001d70:	080028bf 	.word	0x080028bf
 8001d74:	080028f7 	.word	0x080028f7
 8001d78:	0800291b 	.word	0x0800291b

08001d7c <_cleanup_r>:
 8001d7c:	4901      	ldr	r1, [pc, #4]	; (8001d84 <_cleanup_r+0x8>)
 8001d7e:	f000 b8af 	b.w	8001ee0 <_fwalk_reent>
 8001d82:	bf00      	nop
 8001d84:	08001cbd 	.word	0x08001cbd

08001d88 <__sfmoreglue>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	2268      	movs	r2, #104	; 0x68
 8001d8c:	1e4d      	subs	r5, r1, #1
 8001d8e:	4355      	muls	r5, r2
 8001d90:	460e      	mov	r6, r1
 8001d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d96:	f7ff fd19 	bl	80017cc <_malloc_r>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b140      	cbz	r0, 8001db0 <__sfmoreglue+0x28>
 8001d9e:	2100      	movs	r1, #0
 8001da0:	e9c0 1600 	strd	r1, r6, [r0]
 8001da4:	300c      	adds	r0, #12
 8001da6:	60a0      	str	r0, [r4, #8]
 8001da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001dac:	f7ff fc9a 	bl	80016e4 <memset>
 8001db0:	4620      	mov	r0, r4
 8001db2:	bd70      	pop	{r4, r5, r6, pc}

08001db4 <__sfp_lock_acquire>:
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <__sfp_lock_acquire+0x8>)
 8001db6:	f000 b8b3 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 8001dba:	bf00      	nop
 8001dbc:	200000cd 	.word	0x200000cd

08001dc0 <__sfp_lock_release>:
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <__sfp_lock_release+0x8>)
 8001dc2:	f000 b8ae 	b.w	8001f22 <__retarget_lock_release_recursive>
 8001dc6:	bf00      	nop
 8001dc8:	200000cd 	.word	0x200000cd

08001dcc <__sinit_lock_acquire>:
 8001dcc:	4801      	ldr	r0, [pc, #4]	; (8001dd4 <__sinit_lock_acquire+0x8>)
 8001dce:	f000 b8a7 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 8001dd2:	bf00      	nop
 8001dd4:	200000ce 	.word	0x200000ce

08001dd8 <__sinit_lock_release>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <__sinit_lock_release+0x8>)
 8001dda:	f000 b8a2 	b.w	8001f22 <__retarget_lock_release_recursive>
 8001dde:	bf00      	nop
 8001de0:	200000ce 	.word	0x200000ce

08001de4 <__sinit>:
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
 8001de8:	f7ff fff0 	bl	8001dcc <__sinit_lock_acquire>
 8001dec:	69a3      	ldr	r3, [r4, #24]
 8001dee:	b11b      	cbz	r3, 8001df8 <__sinit+0x14>
 8001df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df4:	f7ff bff0 	b.w	8001dd8 <__sinit_lock_release>
 8001df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <__sinit+0x68>)
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <__sinit+0x6c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	bf04      	itt	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	61a3      	streq	r3, [r4, #24]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 f820 	bl	8001e54 <__sfp>
 8001e14:	6060      	str	r0, [r4, #4]
 8001e16:	4620      	mov	r0, r4
 8001e18:	f000 f81c 	bl	8001e54 <__sfp>
 8001e1c:	60a0      	str	r0, [r4, #8]
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f000 f818 	bl	8001e54 <__sfp>
 8001e24:	2200      	movs	r2, #0
 8001e26:	60e0      	str	r0, [r4, #12]
 8001e28:	2104      	movs	r1, #4
 8001e2a:	6860      	ldr	r0, [r4, #4]
 8001e2c:	f7ff ff82 	bl	8001d34 <std>
 8001e30:	68a0      	ldr	r0, [r4, #8]
 8001e32:	2201      	movs	r2, #1
 8001e34:	2109      	movs	r1, #9
 8001e36:	f7ff ff7d 	bl	8001d34 <std>
 8001e3a:	68e0      	ldr	r0, [r4, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	2112      	movs	r1, #18
 8001e40:	f7ff ff78 	bl	8001d34 <std>
 8001e44:	2301      	movs	r3, #1
 8001e46:	61a3      	str	r3, [r4, #24]
 8001e48:	e7d2      	b.n	8001df0 <__sinit+0xc>
 8001e4a:	bf00      	nop
 8001e4c:	08002e8c 	.word	0x08002e8c
 8001e50:	08001d7d 	.word	0x08001d7d

08001e54 <__sfp>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	4607      	mov	r7, r0
 8001e58:	f7ff ffac 	bl	8001db4 <__sfp_lock_acquire>
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <__sfp+0x84>)
 8001e5e:	681e      	ldr	r6, [r3, #0]
 8001e60:	69b3      	ldr	r3, [r6, #24]
 8001e62:	b913      	cbnz	r3, 8001e6a <__sfp+0x16>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f7ff ffbd 	bl	8001de4 <__sinit>
 8001e6a:	3648      	adds	r6, #72	; 0x48
 8001e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	d503      	bpl.n	8001e7c <__sfp+0x28>
 8001e74:	6833      	ldr	r3, [r6, #0]
 8001e76:	b30b      	cbz	r3, 8001ebc <__sfp+0x68>
 8001e78:	6836      	ldr	r6, [r6, #0]
 8001e7a:	e7f7      	b.n	8001e6c <__sfp+0x18>
 8001e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e80:	b9d5      	cbnz	r5, 8001eb8 <__sfp+0x64>
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <__sfp+0x88>)
 8001e84:	60e3      	str	r3, [r4, #12]
 8001e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8001e8c:	f000 f847 	bl	8001f1e <__retarget_lock_init_recursive>
 8001e90:	f7ff ff96 	bl	8001dc0 <__sfp_lock_release>
 8001e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e9c:	6025      	str	r5, [r4, #0]
 8001e9e:	61a5      	str	r5, [r4, #24]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ea8:	f7ff fc1c 	bl	80016e4 <memset>
 8001eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eb8:	3468      	adds	r4, #104	; 0x68
 8001eba:	e7d9      	b.n	8001e70 <__sfp+0x1c>
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	f7ff ff62 	bl	8001d88 <__sfmoreglue>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	6030      	str	r0, [r6, #0]
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d1d5      	bne.n	8001e78 <__sfp+0x24>
 8001ecc:	f7ff ff78 	bl	8001dc0 <__sfp_lock_release>
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	e7ee      	b.n	8001eb4 <__sfp+0x60>
 8001ed6:	bf00      	nop
 8001ed8:	08002e8c 	.word	0x08002e8c
 8001edc:	ffff0001 	.word	0xffff0001

08001ee0 <_fwalk_reent>:
 8001ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	4688      	mov	r8, r1
 8001ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001eec:	2700      	movs	r7, #0
 8001eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8001ef6:	d505      	bpl.n	8001f04 <_fwalk_reent+0x24>
 8001ef8:	6824      	ldr	r4, [r4, #0]
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	d1f7      	bne.n	8001eee <_fwalk_reent+0xe>
 8001efe:	4638      	mov	r0, r7
 8001f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f04:	89ab      	ldrh	r3, [r5, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d907      	bls.n	8001f1a <_fwalk_reent+0x3a>
 8001f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	d003      	beq.n	8001f1a <_fwalk_reent+0x3a>
 8001f12:	4629      	mov	r1, r5
 8001f14:	4630      	mov	r0, r6
 8001f16:	47c0      	blx	r8
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	3568      	adds	r5, #104	; 0x68
 8001f1c:	e7e9      	b.n	8001ef2 <_fwalk_reent+0x12>

08001f1e <__retarget_lock_init_recursive>:
 8001f1e:	4770      	bx	lr

08001f20 <__retarget_lock_acquire_recursive>:
 8001f20:	4770      	bx	lr

08001f22 <__retarget_lock_release_recursive>:
 8001f22:	4770      	bx	lr

08001f24 <__swhatbuf_r>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	460e      	mov	r6, r1
 8001f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	b096      	sub	sp, #88	; 0x58
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	da08      	bge.n	8001f48 <__swhatbuf_r+0x24>
 8001f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	602a      	str	r2, [r5, #0]
 8001f3e:	061a      	lsls	r2, r3, #24
 8001f40:	d410      	bmi.n	8001f64 <__swhatbuf_r+0x40>
 8001f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f46:	e00e      	b.n	8001f66 <__swhatbuf_r+0x42>
 8001f48:	466a      	mov	r2, sp
 8001f4a:	f000 fd0d 	bl	8002968 <_fstat_r>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	dbf1      	blt.n	8001f36 <__swhatbuf_r+0x12>
 8001f52:	9a01      	ldr	r2, [sp, #4]
 8001f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f5c:	425a      	negs	r2, r3
 8001f5e:	415a      	adcs	r2, r3
 8001f60:	602a      	str	r2, [r5, #0]
 8001f62:	e7ee      	b.n	8001f42 <__swhatbuf_r+0x1e>
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	2000      	movs	r0, #0
 8001f68:	6023      	str	r3, [r4, #0]
 8001f6a:	b016      	add	sp, #88	; 0x58
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f70 <__smakebuf_r>:
 8001f70:	898b      	ldrh	r3, [r1, #12]
 8001f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f74:	079d      	lsls	r5, r3, #30
 8001f76:	4606      	mov	r6, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	d507      	bpl.n	8001f8c <__smakebuf_r+0x1c>
 8001f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	6123      	str	r3, [r4, #16]
 8001f84:	2301      	movs	r3, #1
 8001f86:	6163      	str	r3, [r4, #20]
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	ab01      	add	r3, sp, #4
 8001f8e:	466a      	mov	r2, sp
 8001f90:	f7ff ffc8 	bl	8001f24 <__swhatbuf_r>
 8001f94:	9900      	ldr	r1, [sp, #0]
 8001f96:	4605      	mov	r5, r0
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7ff fc17 	bl	80017cc <_malloc_r>
 8001f9e:	b948      	cbnz	r0, 8001fb4 <__smakebuf_r+0x44>
 8001fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa4:	059a      	lsls	r2, r3, #22
 8001fa6:	d4ef      	bmi.n	8001f88 <__smakebuf_r+0x18>
 8001fa8:	f023 0303 	bic.w	r3, r3, #3
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	81a3      	strh	r3, [r4, #12]
 8001fb2:	e7e3      	b.n	8001f7c <__smakebuf_r+0xc>
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <__smakebuf_r+0x7c>)
 8001fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	6020      	str	r0, [r4, #0]
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	81a3      	strh	r3, [r4, #12]
 8001fc2:	9b00      	ldr	r3, [sp, #0]
 8001fc4:	6163      	str	r3, [r4, #20]
 8001fc6:	9b01      	ldr	r3, [sp, #4]
 8001fc8:	6120      	str	r0, [r4, #16]
 8001fca:	b15b      	cbz	r3, 8001fe4 <__smakebuf_r+0x74>
 8001fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f000 fcdb 	bl	800298c <_isatty_r>
 8001fd6:	b128      	cbz	r0, 8001fe4 <__smakebuf_r+0x74>
 8001fd8:	89a3      	ldrh	r3, [r4, #12]
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	81a3      	strh	r3, [r4, #12]
 8001fe4:	89a0      	ldrh	r0, [r4, #12]
 8001fe6:	4305      	orrs	r5, r0
 8001fe8:	81a5      	strh	r5, [r4, #12]
 8001fea:	e7cd      	b.n	8001f88 <__smakebuf_r+0x18>
 8001fec:	08001d7d 	.word	0x08001d7d

08001ff0 <__malloc_lock>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__malloc_lock+0x8>)
 8001ff2:	f7ff bf95 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	200000cc 	.word	0x200000cc

08001ffc <__malloc_unlock>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__malloc_unlock+0x8>)
 8001ffe:	f7ff bf90 	b.w	8001f22 <__retarget_lock_release_recursive>
 8002002:	bf00      	nop
 8002004:	200000cc 	.word	0x200000cc

08002008 <__ssputs_r>:
 8002008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800200c:	688e      	ldr	r6, [r1, #8]
 800200e:	429e      	cmp	r6, r3
 8002010:	4682      	mov	sl, r0
 8002012:	460c      	mov	r4, r1
 8002014:	4690      	mov	r8, r2
 8002016:	461f      	mov	r7, r3
 8002018:	d838      	bhi.n	800208c <__ssputs_r+0x84>
 800201a:	898a      	ldrh	r2, [r1, #12]
 800201c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002020:	d032      	beq.n	8002088 <__ssputs_r+0x80>
 8002022:	6825      	ldr	r5, [r4, #0]
 8002024:	6909      	ldr	r1, [r1, #16]
 8002026:	eba5 0901 	sub.w	r9, r5, r1
 800202a:	6965      	ldr	r5, [r4, #20]
 800202c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002034:	3301      	adds	r3, #1
 8002036:	444b      	add	r3, r9
 8002038:	106d      	asrs	r5, r5, #1
 800203a:	429d      	cmp	r5, r3
 800203c:	bf38      	it	cc
 800203e:	461d      	movcc	r5, r3
 8002040:	0553      	lsls	r3, r2, #21
 8002042:	d531      	bpl.n	80020a8 <__ssputs_r+0xa0>
 8002044:	4629      	mov	r1, r5
 8002046:	f7ff fbc1 	bl	80017cc <_malloc_r>
 800204a:	4606      	mov	r6, r0
 800204c:	b950      	cbnz	r0, 8002064 <__ssputs_r+0x5c>
 800204e:	230c      	movs	r3, #12
 8002050:	f8ca 3000 	str.w	r3, [sl]
 8002054:	89a3      	ldrh	r3, [r4, #12]
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	81a3      	strh	r3, [r4, #12]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002064:	6921      	ldr	r1, [r4, #16]
 8002066:	464a      	mov	r2, r9
 8002068:	f000 fcb2 	bl	80029d0 <memcpy>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	6126      	str	r6, [r4, #16]
 800207a:	6165      	str	r5, [r4, #20]
 800207c:	444e      	add	r6, r9
 800207e:	eba5 0509 	sub.w	r5, r5, r9
 8002082:	6026      	str	r6, [r4, #0]
 8002084:	60a5      	str	r5, [r4, #8]
 8002086:	463e      	mov	r6, r7
 8002088:	42be      	cmp	r6, r7
 800208a:	d900      	bls.n	800208e <__ssputs_r+0x86>
 800208c:	463e      	mov	r6, r7
 800208e:	6820      	ldr	r0, [r4, #0]
 8002090:	4632      	mov	r2, r6
 8002092:	4641      	mov	r1, r8
 8002094:	f000 fcaa 	bl	80029ec <memmove>
 8002098:	68a3      	ldr	r3, [r4, #8]
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	60a3      	str	r3, [r4, #8]
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	4433      	add	r3, r6
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	2000      	movs	r0, #0
 80020a6:	e7db      	b.n	8002060 <__ssputs_r+0x58>
 80020a8:	462a      	mov	r2, r5
 80020aa:	f000 fcb9 	bl	8002a20 <_realloc_r>
 80020ae:	4606      	mov	r6, r0
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d1e1      	bne.n	8002078 <__ssputs_r+0x70>
 80020b4:	6921      	ldr	r1, [r4, #16]
 80020b6:	4650      	mov	r0, sl
 80020b8:	f7ff fb1c 	bl	80016f4 <_free_r>
 80020bc:	e7c7      	b.n	800204e <__ssputs_r+0x46>
	...

080020c0 <_svfiprintf_r>:
 80020c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c4:	4698      	mov	r8, r3
 80020c6:	898b      	ldrh	r3, [r1, #12]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	b09d      	sub	sp, #116	; 0x74
 80020cc:	4607      	mov	r7, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	d50e      	bpl.n	80020f2 <_svfiprintf_r+0x32>
 80020d4:	690b      	ldr	r3, [r1, #16]
 80020d6:	b963      	cbnz	r3, 80020f2 <_svfiprintf_r+0x32>
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	f7ff fb77 	bl	80017cc <_malloc_r>
 80020de:	6028      	str	r0, [r5, #0]
 80020e0:	6128      	str	r0, [r5, #16]
 80020e2:	b920      	cbnz	r0, 80020ee <_svfiprintf_r+0x2e>
 80020e4:	230c      	movs	r3, #12
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	e0d1      	b.n	8002292 <_svfiprintf_r+0x1d2>
 80020ee:	2340      	movs	r3, #64	; 0x40
 80020f0:	616b      	str	r3, [r5, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9309      	str	r3, [sp, #36]	; 0x24
 80020f6:	2320      	movs	r3, #32
 80020f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002100:	2330      	movs	r3, #48	; 0x30
 8002102:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80022ac <_svfiprintf_r+0x1ec>
 8002106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800210a:	f04f 0901 	mov.w	r9, #1
 800210e:	4623      	mov	r3, r4
 8002110:	469a      	mov	sl, r3
 8002112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002116:	b10a      	cbz	r2, 800211c <_svfiprintf_r+0x5c>
 8002118:	2a25      	cmp	r2, #37	; 0x25
 800211a:	d1f9      	bne.n	8002110 <_svfiprintf_r+0x50>
 800211c:	ebba 0b04 	subs.w	fp, sl, r4
 8002120:	d00b      	beq.n	800213a <_svfiprintf_r+0x7a>
 8002122:	465b      	mov	r3, fp
 8002124:	4622      	mov	r2, r4
 8002126:	4629      	mov	r1, r5
 8002128:	4638      	mov	r0, r7
 800212a:	f7ff ff6d 	bl	8002008 <__ssputs_r>
 800212e:	3001      	adds	r0, #1
 8002130:	f000 80aa 	beq.w	8002288 <_svfiprintf_r+0x1c8>
 8002134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002136:	445a      	add	r2, fp
 8002138:	9209      	str	r2, [sp, #36]	; 0x24
 800213a:	f89a 3000 	ldrb.w	r3, [sl]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a2 	beq.w	8002288 <_svfiprintf_r+0x1c8>
 8002144:	2300      	movs	r3, #0
 8002146:	f04f 32ff 	mov.w	r2, #4294967295
 800214a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800214e:	f10a 0a01 	add.w	sl, sl, #1
 8002152:	9304      	str	r3, [sp, #16]
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800215a:	931a      	str	r3, [sp, #104]	; 0x68
 800215c:	4654      	mov	r4, sl
 800215e:	2205      	movs	r2, #5
 8002160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002164:	4851      	ldr	r0, [pc, #324]	; (80022ac <_svfiprintf_r+0x1ec>)
 8002166:	f7fe f843 	bl	80001f0 <memchr>
 800216a:	9a04      	ldr	r2, [sp, #16]
 800216c:	b9d8      	cbnz	r0, 80021a6 <_svfiprintf_r+0xe6>
 800216e:	06d0      	lsls	r0, r2, #27
 8002170:	bf44      	itt	mi
 8002172:	2320      	movmi	r3, #32
 8002174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002178:	0711      	lsls	r1, r2, #28
 800217a:	bf44      	itt	mi
 800217c:	232b      	movmi	r3, #43	; 0x2b
 800217e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002182:	f89a 3000 	ldrb.w	r3, [sl]
 8002186:	2b2a      	cmp	r3, #42	; 0x2a
 8002188:	d015      	beq.n	80021b6 <_svfiprintf_r+0xf6>
 800218a:	9a07      	ldr	r2, [sp, #28]
 800218c:	4654      	mov	r4, sl
 800218e:	2000      	movs	r0, #0
 8002190:	f04f 0c0a 	mov.w	ip, #10
 8002194:	4621      	mov	r1, r4
 8002196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800219a:	3b30      	subs	r3, #48	; 0x30
 800219c:	2b09      	cmp	r3, #9
 800219e:	d94e      	bls.n	800223e <_svfiprintf_r+0x17e>
 80021a0:	b1b0      	cbz	r0, 80021d0 <_svfiprintf_r+0x110>
 80021a2:	9207      	str	r2, [sp, #28]
 80021a4:	e014      	b.n	80021d0 <_svfiprintf_r+0x110>
 80021a6:	eba0 0308 	sub.w	r3, r0, r8
 80021aa:	fa09 f303 	lsl.w	r3, r9, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	46a2      	mov	sl, r4
 80021b4:	e7d2      	b.n	800215c <_svfiprintf_r+0x9c>
 80021b6:	9b03      	ldr	r3, [sp, #12]
 80021b8:	1d19      	adds	r1, r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	9103      	str	r1, [sp, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bfbb      	ittet	lt
 80021c2:	425b      	neglt	r3, r3
 80021c4:	f042 0202 	orrlt.w	r2, r2, #2
 80021c8:	9307      	strge	r3, [sp, #28]
 80021ca:	9307      	strlt	r3, [sp, #28]
 80021cc:	bfb8      	it	lt
 80021ce:	9204      	strlt	r2, [sp, #16]
 80021d0:	7823      	ldrb	r3, [r4, #0]
 80021d2:	2b2e      	cmp	r3, #46	; 0x2e
 80021d4:	d10c      	bne.n	80021f0 <_svfiprintf_r+0x130>
 80021d6:	7863      	ldrb	r3, [r4, #1]
 80021d8:	2b2a      	cmp	r3, #42	; 0x2a
 80021da:	d135      	bne.n	8002248 <_svfiprintf_r+0x188>
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	1d1a      	adds	r2, r3, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	9203      	str	r2, [sp, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bfb8      	it	lt
 80021e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80021ec:	3402      	adds	r4, #2
 80021ee:	9305      	str	r3, [sp, #20]
 80021f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80022bc <_svfiprintf_r+0x1fc>
 80021f4:	7821      	ldrb	r1, [r4, #0]
 80021f6:	2203      	movs	r2, #3
 80021f8:	4650      	mov	r0, sl
 80021fa:	f7fd fff9 	bl	80001f0 <memchr>
 80021fe:	b140      	cbz	r0, 8002212 <_svfiprintf_r+0x152>
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	eba0 000a 	sub.w	r0, r0, sl
 8002206:	fa03 f000 	lsl.w	r0, r3, r0
 800220a:	9b04      	ldr	r3, [sp, #16]
 800220c:	4303      	orrs	r3, r0
 800220e:	3401      	adds	r4, #1
 8002210:	9304      	str	r3, [sp, #16]
 8002212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <_svfiprintf_r+0x1f0>)
 8002218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800221c:	2206      	movs	r2, #6
 800221e:	f7fd ffe7 	bl	80001f0 <memchr>
 8002222:	2800      	cmp	r0, #0
 8002224:	d038      	beq.n	8002298 <_svfiprintf_r+0x1d8>
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <_svfiprintf_r+0x1f4>)
 8002228:	bb1b      	cbnz	r3, 8002272 <_svfiprintf_r+0x1b2>
 800222a:	9b03      	ldr	r3, [sp, #12]
 800222c:	3307      	adds	r3, #7
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	3308      	adds	r3, #8
 8002234:	9303      	str	r3, [sp, #12]
 8002236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002238:	4433      	add	r3, r6
 800223a:	9309      	str	r3, [sp, #36]	; 0x24
 800223c:	e767      	b.n	800210e <_svfiprintf_r+0x4e>
 800223e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002242:	460c      	mov	r4, r1
 8002244:	2001      	movs	r0, #1
 8002246:	e7a5      	b.n	8002194 <_svfiprintf_r+0xd4>
 8002248:	2300      	movs	r3, #0
 800224a:	3401      	adds	r4, #1
 800224c:	9305      	str	r3, [sp, #20]
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 0c0a 	mov.w	ip, #10
 8002254:	4620      	mov	r0, r4
 8002256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800225a:	3a30      	subs	r2, #48	; 0x30
 800225c:	2a09      	cmp	r2, #9
 800225e:	d903      	bls.n	8002268 <_svfiprintf_r+0x1a8>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0c5      	beq.n	80021f0 <_svfiprintf_r+0x130>
 8002264:	9105      	str	r1, [sp, #20]
 8002266:	e7c3      	b.n	80021f0 <_svfiprintf_r+0x130>
 8002268:	fb0c 2101 	mla	r1, ip, r1, r2
 800226c:	4604      	mov	r4, r0
 800226e:	2301      	movs	r3, #1
 8002270:	e7f0      	b.n	8002254 <_svfiprintf_r+0x194>
 8002272:	ab03      	add	r3, sp, #12
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	462a      	mov	r2, r5
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <_svfiprintf_r+0x1f8>)
 800227a:	a904      	add	r1, sp, #16
 800227c:	4638      	mov	r0, r7
 800227e:	f3af 8000 	nop.w
 8002282:	1c42      	adds	r2, r0, #1
 8002284:	4606      	mov	r6, r0
 8002286:	d1d6      	bne.n	8002236 <_svfiprintf_r+0x176>
 8002288:	89ab      	ldrh	r3, [r5, #12]
 800228a:	065b      	lsls	r3, r3, #25
 800228c:	f53f af2c 	bmi.w	80020e8 <_svfiprintf_r+0x28>
 8002290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002292:	b01d      	add	sp, #116	; 0x74
 8002294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002298:	ab03      	add	r3, sp, #12
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	462a      	mov	r2, r5
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <_svfiprintf_r+0x1f8>)
 80022a0:	a904      	add	r1, sp, #16
 80022a2:	4638      	mov	r0, r7
 80022a4:	f000 f9d4 	bl	8002650 <_printf_i>
 80022a8:	e7eb      	b.n	8002282 <_svfiprintf_r+0x1c2>
 80022aa:	bf00      	nop
 80022ac:	08002ef0 	.word	0x08002ef0
 80022b0:	08002efa 	.word	0x08002efa
 80022b4:	00000000 	.word	0x00000000
 80022b8:	08002009 	.word	0x08002009
 80022bc:	08002ef6 	.word	0x08002ef6

080022c0 <__sfputc_r>:
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	b410      	push	{r4}
 80022c8:	6093      	str	r3, [r2, #8]
 80022ca:	da08      	bge.n	80022de <__sfputc_r+0x1e>
 80022cc:	6994      	ldr	r4, [r2, #24]
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	db01      	blt.n	80022d6 <__sfputc_r+0x16>
 80022d2:	290a      	cmp	r1, #10
 80022d4:	d103      	bne.n	80022de <__sfputc_r+0x1e>
 80022d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022da:	f7ff bba9 	b.w	8001a30 <__swbuf_r>
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	1c58      	adds	r0, r3, #1
 80022e2:	6010      	str	r0, [r2, #0]
 80022e4:	7019      	strb	r1, [r3, #0]
 80022e6:	4608      	mov	r0, r1
 80022e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <__sfputs_r>:
 80022ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f0:	4606      	mov	r6, r0
 80022f2:	460f      	mov	r7, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	18d5      	adds	r5, r2, r3
 80022f8:	42ac      	cmp	r4, r5
 80022fa:	d101      	bne.n	8002300 <__sfputs_r+0x12>
 80022fc:	2000      	movs	r0, #0
 80022fe:	e007      	b.n	8002310 <__sfputs_r+0x22>
 8002300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002304:	463a      	mov	r2, r7
 8002306:	4630      	mov	r0, r6
 8002308:	f7ff ffda 	bl	80022c0 <__sfputc_r>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d1f3      	bne.n	80022f8 <__sfputs_r+0xa>
 8002310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002314 <_vfiprintf_r>:
 8002314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002318:	460d      	mov	r5, r1
 800231a:	b09d      	sub	sp, #116	; 0x74
 800231c:	4614      	mov	r4, r2
 800231e:	4698      	mov	r8, r3
 8002320:	4606      	mov	r6, r0
 8002322:	b118      	cbz	r0, 800232c <_vfiprintf_r+0x18>
 8002324:	6983      	ldr	r3, [r0, #24]
 8002326:	b90b      	cbnz	r3, 800232c <_vfiprintf_r+0x18>
 8002328:	f7ff fd5c 	bl	8001de4 <__sinit>
 800232c:	4b89      	ldr	r3, [pc, #548]	; (8002554 <_vfiprintf_r+0x240>)
 800232e:	429d      	cmp	r5, r3
 8002330:	d11b      	bne.n	800236a <_vfiprintf_r+0x56>
 8002332:	6875      	ldr	r5, [r6, #4]
 8002334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002336:	07d9      	lsls	r1, r3, #31
 8002338:	d405      	bmi.n	8002346 <_vfiprintf_r+0x32>
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	059a      	lsls	r2, r3, #22
 800233e:	d402      	bmi.n	8002346 <_vfiprintf_r+0x32>
 8002340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002342:	f7ff fded 	bl	8001f20 <__retarget_lock_acquire_recursive>
 8002346:	89ab      	ldrh	r3, [r5, #12]
 8002348:	071b      	lsls	r3, r3, #28
 800234a:	d501      	bpl.n	8002350 <_vfiprintf_r+0x3c>
 800234c:	692b      	ldr	r3, [r5, #16]
 800234e:	b9eb      	cbnz	r3, 800238c <_vfiprintf_r+0x78>
 8002350:	4629      	mov	r1, r5
 8002352:	4630      	mov	r0, r6
 8002354:	f7ff fbbe 	bl	8001ad4 <__swsetup_r>
 8002358:	b1c0      	cbz	r0, 800238c <_vfiprintf_r+0x78>
 800235a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800235c:	07dc      	lsls	r4, r3, #31
 800235e:	d50e      	bpl.n	800237e <_vfiprintf_r+0x6a>
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	b01d      	add	sp, #116	; 0x74
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236a:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <_vfiprintf_r+0x244>)
 800236c:	429d      	cmp	r5, r3
 800236e:	d101      	bne.n	8002374 <_vfiprintf_r+0x60>
 8002370:	68b5      	ldr	r5, [r6, #8]
 8002372:	e7df      	b.n	8002334 <_vfiprintf_r+0x20>
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <_vfiprintf_r+0x248>)
 8002376:	429d      	cmp	r5, r3
 8002378:	bf08      	it	eq
 800237a:	68f5      	ldreq	r5, [r6, #12]
 800237c:	e7da      	b.n	8002334 <_vfiprintf_r+0x20>
 800237e:	89ab      	ldrh	r3, [r5, #12]
 8002380:	0598      	lsls	r0, r3, #22
 8002382:	d4ed      	bmi.n	8002360 <_vfiprintf_r+0x4c>
 8002384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002386:	f7ff fdcc 	bl	8001f22 <__retarget_lock_release_recursive>
 800238a:	e7e9      	b.n	8002360 <_vfiprintf_r+0x4c>
 800238c:	2300      	movs	r3, #0
 800238e:	9309      	str	r3, [sp, #36]	; 0x24
 8002390:	2320      	movs	r3, #32
 8002392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002396:	f8cd 800c 	str.w	r8, [sp, #12]
 800239a:	2330      	movs	r3, #48	; 0x30
 800239c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002560 <_vfiprintf_r+0x24c>
 80023a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023a4:	f04f 0901 	mov.w	r9, #1
 80023a8:	4623      	mov	r3, r4
 80023aa:	469a      	mov	sl, r3
 80023ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023b0:	b10a      	cbz	r2, 80023b6 <_vfiprintf_r+0xa2>
 80023b2:	2a25      	cmp	r2, #37	; 0x25
 80023b4:	d1f9      	bne.n	80023aa <_vfiprintf_r+0x96>
 80023b6:	ebba 0b04 	subs.w	fp, sl, r4
 80023ba:	d00b      	beq.n	80023d4 <_vfiprintf_r+0xc0>
 80023bc:	465b      	mov	r3, fp
 80023be:	4622      	mov	r2, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	4630      	mov	r0, r6
 80023c4:	f7ff ff93 	bl	80022ee <__sfputs_r>
 80023c8:	3001      	adds	r0, #1
 80023ca:	f000 80aa 	beq.w	8002522 <_vfiprintf_r+0x20e>
 80023ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023d0:	445a      	add	r2, fp
 80023d2:	9209      	str	r2, [sp, #36]	; 0x24
 80023d4:	f89a 3000 	ldrb.w	r3, [sl]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <_vfiprintf_r+0x20e>
 80023de:	2300      	movs	r3, #0
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023e8:	f10a 0a01 	add.w	sl, sl, #1
 80023ec:	9304      	str	r3, [sp, #16]
 80023ee:	9307      	str	r3, [sp, #28]
 80023f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023f4:	931a      	str	r3, [sp, #104]	; 0x68
 80023f6:	4654      	mov	r4, sl
 80023f8:	2205      	movs	r2, #5
 80023fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fe:	4858      	ldr	r0, [pc, #352]	; (8002560 <_vfiprintf_r+0x24c>)
 8002400:	f7fd fef6 	bl	80001f0 <memchr>
 8002404:	9a04      	ldr	r2, [sp, #16]
 8002406:	b9d8      	cbnz	r0, 8002440 <_vfiprintf_r+0x12c>
 8002408:	06d1      	lsls	r1, r2, #27
 800240a:	bf44      	itt	mi
 800240c:	2320      	movmi	r3, #32
 800240e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002412:	0713      	lsls	r3, r2, #28
 8002414:	bf44      	itt	mi
 8002416:	232b      	movmi	r3, #43	; 0x2b
 8002418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800241c:	f89a 3000 	ldrb.w	r3, [sl]
 8002420:	2b2a      	cmp	r3, #42	; 0x2a
 8002422:	d015      	beq.n	8002450 <_vfiprintf_r+0x13c>
 8002424:	9a07      	ldr	r2, [sp, #28]
 8002426:	4654      	mov	r4, sl
 8002428:	2000      	movs	r0, #0
 800242a:	f04f 0c0a 	mov.w	ip, #10
 800242e:	4621      	mov	r1, r4
 8002430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002434:	3b30      	subs	r3, #48	; 0x30
 8002436:	2b09      	cmp	r3, #9
 8002438:	d94e      	bls.n	80024d8 <_vfiprintf_r+0x1c4>
 800243a:	b1b0      	cbz	r0, 800246a <_vfiprintf_r+0x156>
 800243c:	9207      	str	r2, [sp, #28]
 800243e:	e014      	b.n	800246a <_vfiprintf_r+0x156>
 8002440:	eba0 0308 	sub.w	r3, r0, r8
 8002444:	fa09 f303 	lsl.w	r3, r9, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	9304      	str	r3, [sp, #16]
 800244c:	46a2      	mov	sl, r4
 800244e:	e7d2      	b.n	80023f6 <_vfiprintf_r+0xe2>
 8002450:	9b03      	ldr	r3, [sp, #12]
 8002452:	1d19      	adds	r1, r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	9103      	str	r1, [sp, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	bfbb      	ittet	lt
 800245c:	425b      	neglt	r3, r3
 800245e:	f042 0202 	orrlt.w	r2, r2, #2
 8002462:	9307      	strge	r3, [sp, #28]
 8002464:	9307      	strlt	r3, [sp, #28]
 8002466:	bfb8      	it	lt
 8002468:	9204      	strlt	r2, [sp, #16]
 800246a:	7823      	ldrb	r3, [r4, #0]
 800246c:	2b2e      	cmp	r3, #46	; 0x2e
 800246e:	d10c      	bne.n	800248a <_vfiprintf_r+0x176>
 8002470:	7863      	ldrb	r3, [r4, #1]
 8002472:	2b2a      	cmp	r3, #42	; 0x2a
 8002474:	d135      	bne.n	80024e2 <_vfiprintf_r+0x1ce>
 8002476:	9b03      	ldr	r3, [sp, #12]
 8002478:	1d1a      	adds	r2, r3, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	9203      	str	r2, [sp, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	bfb8      	it	lt
 8002482:	f04f 33ff 	movlt.w	r3, #4294967295
 8002486:	3402      	adds	r4, #2
 8002488:	9305      	str	r3, [sp, #20]
 800248a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002570 <_vfiprintf_r+0x25c>
 800248e:	7821      	ldrb	r1, [r4, #0]
 8002490:	2203      	movs	r2, #3
 8002492:	4650      	mov	r0, sl
 8002494:	f7fd feac 	bl	80001f0 <memchr>
 8002498:	b140      	cbz	r0, 80024ac <_vfiprintf_r+0x198>
 800249a:	2340      	movs	r3, #64	; 0x40
 800249c:	eba0 000a 	sub.w	r0, r0, sl
 80024a0:	fa03 f000 	lsl.w	r0, r3, r0
 80024a4:	9b04      	ldr	r3, [sp, #16]
 80024a6:	4303      	orrs	r3, r0
 80024a8:	3401      	adds	r4, #1
 80024aa:	9304      	str	r3, [sp, #16]
 80024ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024b0:	482c      	ldr	r0, [pc, #176]	; (8002564 <_vfiprintf_r+0x250>)
 80024b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024b6:	2206      	movs	r2, #6
 80024b8:	f7fd fe9a 	bl	80001f0 <memchr>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d03f      	beq.n	8002540 <_vfiprintf_r+0x22c>
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <_vfiprintf_r+0x254>)
 80024c2:	bb1b      	cbnz	r3, 800250c <_vfiprintf_r+0x1f8>
 80024c4:	9b03      	ldr	r3, [sp, #12]
 80024c6:	3307      	adds	r3, #7
 80024c8:	f023 0307 	bic.w	r3, r3, #7
 80024cc:	3308      	adds	r3, #8
 80024ce:	9303      	str	r3, [sp, #12]
 80024d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024d2:	443b      	add	r3, r7
 80024d4:	9309      	str	r3, [sp, #36]	; 0x24
 80024d6:	e767      	b.n	80023a8 <_vfiprintf_r+0x94>
 80024d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80024dc:	460c      	mov	r4, r1
 80024de:	2001      	movs	r0, #1
 80024e0:	e7a5      	b.n	800242e <_vfiprintf_r+0x11a>
 80024e2:	2300      	movs	r3, #0
 80024e4:	3401      	adds	r4, #1
 80024e6:	9305      	str	r3, [sp, #20]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0c0a 	mov.w	ip, #10
 80024ee:	4620      	mov	r0, r4
 80024f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024f4:	3a30      	subs	r2, #48	; 0x30
 80024f6:	2a09      	cmp	r2, #9
 80024f8:	d903      	bls.n	8002502 <_vfiprintf_r+0x1ee>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0c5      	beq.n	800248a <_vfiprintf_r+0x176>
 80024fe:	9105      	str	r1, [sp, #20]
 8002500:	e7c3      	b.n	800248a <_vfiprintf_r+0x176>
 8002502:	fb0c 2101 	mla	r1, ip, r1, r2
 8002506:	4604      	mov	r4, r0
 8002508:	2301      	movs	r3, #1
 800250a:	e7f0      	b.n	80024ee <_vfiprintf_r+0x1da>
 800250c:	ab03      	add	r3, sp, #12
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	462a      	mov	r2, r5
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <_vfiprintf_r+0x258>)
 8002514:	a904      	add	r1, sp, #16
 8002516:	4630      	mov	r0, r6
 8002518:	f3af 8000 	nop.w
 800251c:	4607      	mov	r7, r0
 800251e:	1c78      	adds	r0, r7, #1
 8002520:	d1d6      	bne.n	80024d0 <_vfiprintf_r+0x1bc>
 8002522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002524:	07d9      	lsls	r1, r3, #31
 8002526:	d405      	bmi.n	8002534 <_vfiprintf_r+0x220>
 8002528:	89ab      	ldrh	r3, [r5, #12]
 800252a:	059a      	lsls	r2, r3, #22
 800252c:	d402      	bmi.n	8002534 <_vfiprintf_r+0x220>
 800252e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002530:	f7ff fcf7 	bl	8001f22 <__retarget_lock_release_recursive>
 8002534:	89ab      	ldrh	r3, [r5, #12]
 8002536:	065b      	lsls	r3, r3, #25
 8002538:	f53f af12 	bmi.w	8002360 <_vfiprintf_r+0x4c>
 800253c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800253e:	e711      	b.n	8002364 <_vfiprintf_r+0x50>
 8002540:	ab03      	add	r3, sp, #12
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	462a      	mov	r2, r5
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <_vfiprintf_r+0x258>)
 8002548:	a904      	add	r1, sp, #16
 800254a:	4630      	mov	r0, r6
 800254c:	f000 f880 	bl	8002650 <_printf_i>
 8002550:	e7e4      	b.n	800251c <_vfiprintf_r+0x208>
 8002552:	bf00      	nop
 8002554:	08002eb0 	.word	0x08002eb0
 8002558:	08002ed0 	.word	0x08002ed0
 800255c:	08002e90 	.word	0x08002e90
 8002560:	08002ef0 	.word	0x08002ef0
 8002564:	08002efa 	.word	0x08002efa
 8002568:	00000000 	.word	0x00000000
 800256c:	080022ef 	.word	0x080022ef
 8002570:	08002ef6 	.word	0x08002ef6

08002574 <_printf_common>:
 8002574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	4616      	mov	r6, r2
 800257a:	4699      	mov	r9, r3
 800257c:	688a      	ldr	r2, [r1, #8]
 800257e:	690b      	ldr	r3, [r1, #16]
 8002580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002584:	4293      	cmp	r3, r2
 8002586:	bfb8      	it	lt
 8002588:	4613      	movlt	r3, r2
 800258a:	6033      	str	r3, [r6, #0]
 800258c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002590:	4607      	mov	r7, r0
 8002592:	460c      	mov	r4, r1
 8002594:	b10a      	cbz	r2, 800259a <_printf_common+0x26>
 8002596:	3301      	adds	r3, #1
 8002598:	6033      	str	r3, [r6, #0]
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	0699      	lsls	r1, r3, #26
 800259e:	bf42      	ittt	mi
 80025a0:	6833      	ldrmi	r3, [r6, #0]
 80025a2:	3302      	addmi	r3, #2
 80025a4:	6033      	strmi	r3, [r6, #0]
 80025a6:	6825      	ldr	r5, [r4, #0]
 80025a8:	f015 0506 	ands.w	r5, r5, #6
 80025ac:	d106      	bne.n	80025bc <_printf_common+0x48>
 80025ae:	f104 0a19 	add.w	sl, r4, #25
 80025b2:	68e3      	ldr	r3, [r4, #12]
 80025b4:	6832      	ldr	r2, [r6, #0]
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	42ab      	cmp	r3, r5
 80025ba:	dc26      	bgt.n	800260a <_printf_common+0x96>
 80025bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025c0:	1e13      	subs	r3, r2, #0
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	bf18      	it	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	0692      	lsls	r2, r2, #26
 80025ca:	d42b      	bmi.n	8002624 <_printf_common+0xb0>
 80025cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025d0:	4649      	mov	r1, r9
 80025d2:	4638      	mov	r0, r7
 80025d4:	47c0      	blx	r8
 80025d6:	3001      	adds	r0, #1
 80025d8:	d01e      	beq.n	8002618 <_printf_common+0xa4>
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	68e5      	ldr	r5, [r4, #12]
 80025de:	6832      	ldr	r2, [r6, #0]
 80025e0:	f003 0306 	and.w	r3, r3, #6
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	bf08      	it	eq
 80025e8:	1aad      	subeq	r5, r5, r2
 80025ea:	68a3      	ldr	r3, [r4, #8]
 80025ec:	6922      	ldr	r2, [r4, #16]
 80025ee:	bf0c      	ite	eq
 80025f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025f4:	2500      	movne	r5, #0
 80025f6:	4293      	cmp	r3, r2
 80025f8:	bfc4      	itt	gt
 80025fa:	1a9b      	subgt	r3, r3, r2
 80025fc:	18ed      	addgt	r5, r5, r3
 80025fe:	2600      	movs	r6, #0
 8002600:	341a      	adds	r4, #26
 8002602:	42b5      	cmp	r5, r6
 8002604:	d11a      	bne.n	800263c <_printf_common+0xc8>
 8002606:	2000      	movs	r0, #0
 8002608:	e008      	b.n	800261c <_printf_common+0xa8>
 800260a:	2301      	movs	r3, #1
 800260c:	4652      	mov	r2, sl
 800260e:	4649      	mov	r1, r9
 8002610:	4638      	mov	r0, r7
 8002612:	47c0      	blx	r8
 8002614:	3001      	adds	r0, #1
 8002616:	d103      	bne.n	8002620 <_printf_common+0xac>
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002620:	3501      	adds	r5, #1
 8002622:	e7c6      	b.n	80025b2 <_printf_common+0x3e>
 8002624:	18e1      	adds	r1, r4, r3
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	2030      	movs	r0, #48	; 0x30
 800262a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800262e:	4422      	add	r2, r4
 8002630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002638:	3302      	adds	r3, #2
 800263a:	e7c7      	b.n	80025cc <_printf_common+0x58>
 800263c:	2301      	movs	r3, #1
 800263e:	4622      	mov	r2, r4
 8002640:	4649      	mov	r1, r9
 8002642:	4638      	mov	r0, r7
 8002644:	47c0      	blx	r8
 8002646:	3001      	adds	r0, #1
 8002648:	d0e6      	beq.n	8002618 <_printf_common+0xa4>
 800264a:	3601      	adds	r6, #1
 800264c:	e7d9      	b.n	8002602 <_printf_common+0x8e>
	...

08002650 <_printf_i>:
 8002650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002654:	7e0f      	ldrb	r7, [r1, #24]
 8002656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002658:	2f78      	cmp	r7, #120	; 0x78
 800265a:	4691      	mov	r9, r2
 800265c:	4680      	mov	r8, r0
 800265e:	460c      	mov	r4, r1
 8002660:	469a      	mov	sl, r3
 8002662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002666:	d807      	bhi.n	8002678 <_printf_i+0x28>
 8002668:	2f62      	cmp	r7, #98	; 0x62
 800266a:	d80a      	bhi.n	8002682 <_printf_i+0x32>
 800266c:	2f00      	cmp	r7, #0
 800266e:	f000 80d8 	beq.w	8002822 <_printf_i+0x1d2>
 8002672:	2f58      	cmp	r7, #88	; 0x58
 8002674:	f000 80a3 	beq.w	80027be <_printf_i+0x16e>
 8002678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800267c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002680:	e03a      	b.n	80026f8 <_printf_i+0xa8>
 8002682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002686:	2b15      	cmp	r3, #21
 8002688:	d8f6      	bhi.n	8002678 <_printf_i+0x28>
 800268a:	a101      	add	r1, pc, #4	; (adr r1, 8002690 <_printf_i+0x40>)
 800268c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002690:	080026e9 	.word	0x080026e9
 8002694:	080026fd 	.word	0x080026fd
 8002698:	08002679 	.word	0x08002679
 800269c:	08002679 	.word	0x08002679
 80026a0:	08002679 	.word	0x08002679
 80026a4:	08002679 	.word	0x08002679
 80026a8:	080026fd 	.word	0x080026fd
 80026ac:	08002679 	.word	0x08002679
 80026b0:	08002679 	.word	0x08002679
 80026b4:	08002679 	.word	0x08002679
 80026b8:	08002679 	.word	0x08002679
 80026bc:	08002809 	.word	0x08002809
 80026c0:	0800272d 	.word	0x0800272d
 80026c4:	080027eb 	.word	0x080027eb
 80026c8:	08002679 	.word	0x08002679
 80026cc:	08002679 	.word	0x08002679
 80026d0:	0800282b 	.word	0x0800282b
 80026d4:	08002679 	.word	0x08002679
 80026d8:	0800272d 	.word	0x0800272d
 80026dc:	08002679 	.word	0x08002679
 80026e0:	08002679 	.word	0x08002679
 80026e4:	080027f3 	.word	0x080027f3
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	1d1a      	adds	r2, r3, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	602a      	str	r2, [r5, #0]
 80026f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0a3      	b.n	8002844 <_printf_i+0x1f4>
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	6829      	ldr	r1, [r5, #0]
 8002700:	0606      	lsls	r6, r0, #24
 8002702:	f101 0304 	add.w	r3, r1, #4
 8002706:	d50a      	bpl.n	800271e <_printf_i+0xce>
 8002708:	680e      	ldr	r6, [r1, #0]
 800270a:	602b      	str	r3, [r5, #0]
 800270c:	2e00      	cmp	r6, #0
 800270e:	da03      	bge.n	8002718 <_printf_i+0xc8>
 8002710:	232d      	movs	r3, #45	; 0x2d
 8002712:	4276      	negs	r6, r6
 8002714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002718:	485e      	ldr	r0, [pc, #376]	; (8002894 <_printf_i+0x244>)
 800271a:	230a      	movs	r3, #10
 800271c:	e019      	b.n	8002752 <_printf_i+0x102>
 800271e:	680e      	ldr	r6, [r1, #0]
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002726:	bf18      	it	ne
 8002728:	b236      	sxthne	r6, r6
 800272a:	e7ef      	b.n	800270c <_printf_i+0xbc>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	1d19      	adds	r1, r3, #4
 8002732:	6029      	str	r1, [r5, #0]
 8002734:	0601      	lsls	r1, r0, #24
 8002736:	d501      	bpl.n	800273c <_printf_i+0xec>
 8002738:	681e      	ldr	r6, [r3, #0]
 800273a:	e002      	b.n	8002742 <_printf_i+0xf2>
 800273c:	0646      	lsls	r6, r0, #25
 800273e:	d5fb      	bpl.n	8002738 <_printf_i+0xe8>
 8002740:	881e      	ldrh	r6, [r3, #0]
 8002742:	4854      	ldr	r0, [pc, #336]	; (8002894 <_printf_i+0x244>)
 8002744:	2f6f      	cmp	r7, #111	; 0x6f
 8002746:	bf0c      	ite	eq
 8002748:	2308      	moveq	r3, #8
 800274a:	230a      	movne	r3, #10
 800274c:	2100      	movs	r1, #0
 800274e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002752:	6865      	ldr	r5, [r4, #4]
 8002754:	60a5      	str	r5, [r4, #8]
 8002756:	2d00      	cmp	r5, #0
 8002758:	bfa2      	ittt	ge
 800275a:	6821      	ldrge	r1, [r4, #0]
 800275c:	f021 0104 	bicge.w	r1, r1, #4
 8002760:	6021      	strge	r1, [r4, #0]
 8002762:	b90e      	cbnz	r6, 8002768 <_printf_i+0x118>
 8002764:	2d00      	cmp	r5, #0
 8002766:	d04d      	beq.n	8002804 <_printf_i+0x1b4>
 8002768:	4615      	mov	r5, r2
 800276a:	fbb6 f1f3 	udiv	r1, r6, r3
 800276e:	fb03 6711 	mls	r7, r3, r1, r6
 8002772:	5dc7      	ldrb	r7, [r0, r7]
 8002774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002778:	4637      	mov	r7, r6
 800277a:	42bb      	cmp	r3, r7
 800277c:	460e      	mov	r6, r1
 800277e:	d9f4      	bls.n	800276a <_printf_i+0x11a>
 8002780:	2b08      	cmp	r3, #8
 8002782:	d10b      	bne.n	800279c <_printf_i+0x14c>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	07de      	lsls	r6, r3, #31
 8002788:	d508      	bpl.n	800279c <_printf_i+0x14c>
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	6861      	ldr	r1, [r4, #4]
 800278e:	4299      	cmp	r1, r3
 8002790:	bfde      	ittt	le
 8002792:	2330      	movle	r3, #48	; 0x30
 8002794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800279c:	1b52      	subs	r2, r2, r5
 800279e:	6122      	str	r2, [r4, #16]
 80027a0:	f8cd a000 	str.w	sl, [sp]
 80027a4:	464b      	mov	r3, r9
 80027a6:	aa03      	add	r2, sp, #12
 80027a8:	4621      	mov	r1, r4
 80027aa:	4640      	mov	r0, r8
 80027ac:	f7ff fee2 	bl	8002574 <_printf_common>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d14c      	bne.n	800284e <_printf_i+0x1fe>
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	b004      	add	sp, #16
 80027ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027be:	4835      	ldr	r0, [pc, #212]	; (8002894 <_printf_i+0x244>)
 80027c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80027c4:	6829      	ldr	r1, [r5, #0]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80027cc:	6029      	str	r1, [r5, #0]
 80027ce:	061d      	lsls	r5, r3, #24
 80027d0:	d514      	bpl.n	80027fc <_printf_i+0x1ac>
 80027d2:	07df      	lsls	r7, r3, #31
 80027d4:	bf44      	itt	mi
 80027d6:	f043 0320 	orrmi.w	r3, r3, #32
 80027da:	6023      	strmi	r3, [r4, #0]
 80027dc:	b91e      	cbnz	r6, 80027e6 <_printf_i+0x196>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	f023 0320 	bic.w	r3, r3, #32
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	2310      	movs	r3, #16
 80027e8:	e7b0      	b.n	800274c <_printf_i+0xfc>
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	2378      	movs	r3, #120	; 0x78
 80027f4:	4828      	ldr	r0, [pc, #160]	; (8002898 <_printf_i+0x248>)
 80027f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027fa:	e7e3      	b.n	80027c4 <_printf_i+0x174>
 80027fc:	0659      	lsls	r1, r3, #25
 80027fe:	bf48      	it	mi
 8002800:	b2b6      	uxthmi	r6, r6
 8002802:	e7e6      	b.n	80027d2 <_printf_i+0x182>
 8002804:	4615      	mov	r5, r2
 8002806:	e7bb      	b.n	8002780 <_printf_i+0x130>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	6826      	ldr	r6, [r4, #0]
 800280c:	6961      	ldr	r1, [r4, #20]
 800280e:	1d18      	adds	r0, r3, #4
 8002810:	6028      	str	r0, [r5, #0]
 8002812:	0635      	lsls	r5, r6, #24
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	d501      	bpl.n	800281c <_printf_i+0x1cc>
 8002818:	6019      	str	r1, [r3, #0]
 800281a:	e002      	b.n	8002822 <_printf_i+0x1d2>
 800281c:	0670      	lsls	r0, r6, #25
 800281e:	d5fb      	bpl.n	8002818 <_printf_i+0x1c8>
 8002820:	8019      	strh	r1, [r3, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	6123      	str	r3, [r4, #16]
 8002826:	4615      	mov	r5, r2
 8002828:	e7ba      	b.n	80027a0 <_printf_i+0x150>
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	1d1a      	adds	r2, r3, #4
 800282e:	602a      	str	r2, [r5, #0]
 8002830:	681d      	ldr	r5, [r3, #0]
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	2100      	movs	r1, #0
 8002836:	4628      	mov	r0, r5
 8002838:	f7fd fcda 	bl	80001f0 <memchr>
 800283c:	b108      	cbz	r0, 8002842 <_printf_i+0x1f2>
 800283e:	1b40      	subs	r0, r0, r5
 8002840:	6060      	str	r0, [r4, #4]
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	6123      	str	r3, [r4, #16]
 8002846:	2300      	movs	r3, #0
 8002848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800284c:	e7a8      	b.n	80027a0 <_printf_i+0x150>
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	462a      	mov	r2, r5
 8002852:	4649      	mov	r1, r9
 8002854:	4640      	mov	r0, r8
 8002856:	47d0      	blx	sl
 8002858:	3001      	adds	r0, #1
 800285a:	d0ab      	beq.n	80027b4 <_printf_i+0x164>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	079b      	lsls	r3, r3, #30
 8002860:	d413      	bmi.n	800288a <_printf_i+0x23a>
 8002862:	68e0      	ldr	r0, [r4, #12]
 8002864:	9b03      	ldr	r3, [sp, #12]
 8002866:	4298      	cmp	r0, r3
 8002868:	bfb8      	it	lt
 800286a:	4618      	movlt	r0, r3
 800286c:	e7a4      	b.n	80027b8 <_printf_i+0x168>
 800286e:	2301      	movs	r3, #1
 8002870:	4632      	mov	r2, r6
 8002872:	4649      	mov	r1, r9
 8002874:	4640      	mov	r0, r8
 8002876:	47d0      	blx	sl
 8002878:	3001      	adds	r0, #1
 800287a:	d09b      	beq.n	80027b4 <_printf_i+0x164>
 800287c:	3501      	adds	r5, #1
 800287e:	68e3      	ldr	r3, [r4, #12]
 8002880:	9903      	ldr	r1, [sp, #12]
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	42ab      	cmp	r3, r5
 8002886:	dcf2      	bgt.n	800286e <_printf_i+0x21e>
 8002888:	e7eb      	b.n	8002862 <_printf_i+0x212>
 800288a:	2500      	movs	r5, #0
 800288c:	f104 0619 	add.w	r6, r4, #25
 8002890:	e7f5      	b.n	800287e <_printf_i+0x22e>
 8002892:	bf00      	nop
 8002894:	08002f01 	.word	0x08002f01
 8002898:	08002f12 	.word	0x08002f12

0800289c <__sread>:
 800289c:	b510      	push	{r4, lr}
 800289e:	460c      	mov	r4, r1
 80028a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a4:	f000 f8ec 	bl	8002a80 <_read_r>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	bfab      	itete	ge
 80028ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028ae:	89a3      	ldrhlt	r3, [r4, #12]
 80028b0:	181b      	addge	r3, r3, r0
 80028b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028b6:	bfac      	ite	ge
 80028b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80028ba:	81a3      	strhlt	r3, [r4, #12]
 80028bc:	bd10      	pop	{r4, pc}

080028be <__swrite>:
 80028be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c2:	461f      	mov	r7, r3
 80028c4:	898b      	ldrh	r3, [r1, #12]
 80028c6:	05db      	lsls	r3, r3, #23
 80028c8:	4605      	mov	r5, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	4616      	mov	r6, r2
 80028ce:	d505      	bpl.n	80028dc <__swrite+0x1e>
 80028d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d4:	2302      	movs	r3, #2
 80028d6:	2200      	movs	r2, #0
 80028d8:	f000 f868 	bl	80029ac <_lseek_r>
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e6:	81a3      	strh	r3, [r4, #12]
 80028e8:	4632      	mov	r2, r6
 80028ea:	463b      	mov	r3, r7
 80028ec:	4628      	mov	r0, r5
 80028ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028f2:	f000 b817 	b.w	8002924 <_write_r>

080028f6 <__sseek>:
 80028f6:	b510      	push	{r4, lr}
 80028f8:	460c      	mov	r4, r1
 80028fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028fe:	f000 f855 	bl	80029ac <_lseek_r>
 8002902:	1c43      	adds	r3, r0, #1
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	bf15      	itete	ne
 8002908:	6560      	strne	r0, [r4, #84]	; 0x54
 800290a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800290e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002912:	81a3      	strheq	r3, [r4, #12]
 8002914:	bf18      	it	ne
 8002916:	81a3      	strhne	r3, [r4, #12]
 8002918:	bd10      	pop	{r4, pc}

0800291a <__sclose>:
 800291a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291e:	f000 b813 	b.w	8002948 <_close_r>
	...

08002924 <_write_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4d07      	ldr	r5, [pc, #28]	; (8002944 <_write_r+0x20>)
 8002928:	4604      	mov	r4, r0
 800292a:	4608      	mov	r0, r1
 800292c:	4611      	mov	r1, r2
 800292e:	2200      	movs	r2, #0
 8002930:	602a      	str	r2, [r5, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f965 	bl	8002c02 <_write>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_write_r+0x1e>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_write_r+0x1e>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	200000d0 	.word	0x200000d0

08002948 <_close_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4d06      	ldr	r5, [pc, #24]	; (8002964 <_close_r+0x1c>)
 800294c:	2300      	movs	r3, #0
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	f000 f986 	bl	8002c64 <_close>
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	d102      	bne.n	8002962 <_close_r+0x1a>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	b103      	cbz	r3, 8002962 <_close_r+0x1a>
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	bd38      	pop	{r3, r4, r5, pc}
 8002964:	200000d0 	.word	0x200000d0

08002968 <_fstat_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4d07      	ldr	r5, [pc, #28]	; (8002988 <_fstat_r+0x20>)
 800296c:	2300      	movs	r3, #0
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	602b      	str	r3, [r5, #0]
 8002976:	f000 f9bc 	bl	8002cf2 <_fstat>
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	d102      	bne.n	8002984 <_fstat_r+0x1c>
 800297e:	682b      	ldr	r3, [r5, #0]
 8002980:	b103      	cbz	r3, 8002984 <_fstat_r+0x1c>
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	bd38      	pop	{r3, r4, r5, pc}
 8002986:	bf00      	nop
 8002988:	200000d0 	.word	0x200000d0

0800298c <_isatty_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4d06      	ldr	r5, [pc, #24]	; (80029a8 <_isatty_r+0x1c>)
 8002990:	2300      	movs	r3, #0
 8002992:	4604      	mov	r4, r0
 8002994:	4608      	mov	r0, r1
 8002996:	602b      	str	r3, [r5, #0]
 8002998:	f000 f9b9 	bl	8002d0e <_isatty>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_isatty_r+0x1a>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_isatty_r+0x1a>
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	200000d0 	.word	0x200000d0

080029ac <_lseek_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4d07      	ldr	r5, [pc, #28]	; (80029cc <_lseek_r+0x20>)
 80029b0:	4604      	mov	r4, r0
 80029b2:	4608      	mov	r0, r1
 80029b4:	4611      	mov	r1, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	602a      	str	r2, [r5, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 f90f 	bl	8002bde <_lseek>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d102      	bne.n	80029ca <_lseek_r+0x1e>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	b103      	cbz	r3, 80029ca <_lseek_r+0x1e>
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	200000d0 	.word	0x200000d0

080029d0 <memcpy>:
 80029d0:	440a      	add	r2, r1
 80029d2:	4291      	cmp	r1, r2
 80029d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80029d8:	d100      	bne.n	80029dc <memcpy+0xc>
 80029da:	4770      	bx	lr
 80029dc:	b510      	push	{r4, lr}
 80029de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029e6:	4291      	cmp	r1, r2
 80029e8:	d1f9      	bne.n	80029de <memcpy+0xe>
 80029ea:	bd10      	pop	{r4, pc}

080029ec <memmove>:
 80029ec:	4288      	cmp	r0, r1
 80029ee:	b510      	push	{r4, lr}
 80029f0:	eb01 0402 	add.w	r4, r1, r2
 80029f4:	d902      	bls.n	80029fc <memmove+0x10>
 80029f6:	4284      	cmp	r4, r0
 80029f8:	4623      	mov	r3, r4
 80029fa:	d807      	bhi.n	8002a0c <memmove+0x20>
 80029fc:	1e43      	subs	r3, r0, #1
 80029fe:	42a1      	cmp	r1, r4
 8002a00:	d008      	beq.n	8002a14 <memmove+0x28>
 8002a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a0a:	e7f8      	b.n	80029fe <memmove+0x12>
 8002a0c:	4402      	add	r2, r0
 8002a0e:	4601      	mov	r1, r0
 8002a10:	428a      	cmp	r2, r1
 8002a12:	d100      	bne.n	8002a16 <memmove+0x2a>
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a1e:	e7f7      	b.n	8002a10 <memmove+0x24>

08002a20 <_realloc_r>:
 8002a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a24:	4680      	mov	r8, r0
 8002a26:	4614      	mov	r4, r2
 8002a28:	460e      	mov	r6, r1
 8002a2a:	b921      	cbnz	r1, 8002a36 <_realloc_r+0x16>
 8002a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a30:	4611      	mov	r1, r2
 8002a32:	f7fe becb 	b.w	80017cc <_malloc_r>
 8002a36:	b92a      	cbnz	r2, 8002a44 <_realloc_r+0x24>
 8002a38:	f7fe fe5c 	bl	80016f4 <_free_r>
 8002a3c:	4625      	mov	r5, r4
 8002a3e:	4628      	mov	r0, r5
 8002a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a44:	f000 f82e 	bl	8002aa4 <_malloc_usable_size_r>
 8002a48:	4284      	cmp	r4, r0
 8002a4a:	4607      	mov	r7, r0
 8002a4c:	d802      	bhi.n	8002a54 <_realloc_r+0x34>
 8002a4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a52:	d812      	bhi.n	8002a7a <_realloc_r+0x5a>
 8002a54:	4621      	mov	r1, r4
 8002a56:	4640      	mov	r0, r8
 8002a58:	f7fe feb8 	bl	80017cc <_malloc_r>
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d0ed      	beq.n	8002a3e <_realloc_r+0x1e>
 8002a62:	42bc      	cmp	r4, r7
 8002a64:	4622      	mov	r2, r4
 8002a66:	4631      	mov	r1, r6
 8002a68:	bf28      	it	cs
 8002a6a:	463a      	movcs	r2, r7
 8002a6c:	f7ff ffb0 	bl	80029d0 <memcpy>
 8002a70:	4631      	mov	r1, r6
 8002a72:	4640      	mov	r0, r8
 8002a74:	f7fe fe3e 	bl	80016f4 <_free_r>
 8002a78:	e7e1      	b.n	8002a3e <_realloc_r+0x1e>
 8002a7a:	4635      	mov	r5, r6
 8002a7c:	e7df      	b.n	8002a3e <_realloc_r+0x1e>
	...

08002a80 <_read_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4d07      	ldr	r5, [pc, #28]	; (8002aa0 <_read_r+0x20>)
 8002a84:	4604      	mov	r4, r0
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	602a      	str	r2, [r5, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f000 f84d 	bl	8002b2e <_read>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_read_r+0x1e>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_read_r+0x1e>
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	200000d0 	.word	0x200000d0

08002aa4 <_malloc_usable_size_r>:
 8002aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aa8:	1f18      	subs	r0, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bfbc      	itt	lt
 8002aae:	580b      	ldrlt	r3, [r1, r0]
 8002ab0:	18c0      	addlt	r0, r0, r3
 8002ab2:	4770      	bx	lr

08002ab4 <findslot>:
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <findslot+0x2c>)
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	4604      	mov	r4, r0
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	b118      	cbz	r0, 8002ac6 <findslot+0x12>
 8002abe:	6983      	ldr	r3, [r0, #24]
 8002ac0:	b90b      	cbnz	r3, 8002ac6 <findslot+0x12>
 8002ac2:	f7ff f98f 	bl	8001de4 <__sinit>
 8002ac6:	2c13      	cmp	r4, #19
 8002ac8:	d807      	bhi.n	8002ada <findslot+0x26>
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <findslot+0x30>)
 8002acc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002ad0:	3201      	adds	r2, #1
 8002ad2:	d002      	beq.n	8002ada <findslot+0x26>
 8002ad4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	2000      	movs	r0, #0
 8002adc:	e7fc      	b.n	8002ad8 <findslot+0x24>
 8002ade:	bf00      	nop
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	200000d4 	.word	0x200000d4

08002ae8 <error>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	f7fe fdc8 	bl	8001680 <__errno>
 8002af0:	2613      	movs	r6, #19
 8002af2:	4605      	mov	r5, r0
 8002af4:	2700      	movs	r7, #0
 8002af6:	4630      	mov	r0, r6
 8002af8:	4639      	mov	r1, r7
 8002afa:	beab      	bkpt	0x00ab
 8002afc:	4606      	mov	r6, r0
 8002afe:	602e      	str	r6, [r5, #0]
 8002b00:	4620      	mov	r0, r4
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b04 <checkerror>:
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d101      	bne.n	8002b0c <checkerror+0x8>
 8002b08:	f7ff bfee 	b.w	8002ae8 <error>
 8002b0c:	4770      	bx	lr

08002b0e <_swiread>:
 8002b0e:	b530      	push	{r4, r5, lr}
 8002b10:	b085      	sub	sp, #20
 8002b12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b16:	9203      	str	r2, [sp, #12]
 8002b18:	2406      	movs	r4, #6
 8002b1a:	ad01      	add	r5, sp, #4
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	4629      	mov	r1, r5
 8002b20:	beab      	bkpt	0x00ab
 8002b22:	4604      	mov	r4, r0
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff ffed 	bl	8002b04 <checkerror>
 8002b2a:	b005      	add	sp, #20
 8002b2c:	bd30      	pop	{r4, r5, pc}

08002b2e <_read>:
 8002b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b30:	4615      	mov	r5, r2
 8002b32:	9101      	str	r1, [sp, #4]
 8002b34:	f7ff ffbe 	bl	8002ab4 <findslot>
 8002b38:	9901      	ldr	r1, [sp, #4]
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	b938      	cbnz	r0, 8002b4e <_read+0x20>
 8002b3e:	f7fe fd9f 	bl	8001680 <__errno>
 8002b42:	2309      	movs	r3, #9
 8002b44:	6003      	str	r3, [r0, #0]
 8002b46:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4a:	b003      	add	sp, #12
 8002b4c:	bd30      	pop	{r4, r5, pc}
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	462a      	mov	r2, r5
 8002b52:	f7ff ffdc 	bl	8002b0e <_swiread>
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	d0f7      	beq.n	8002b4a <_read+0x1c>
 8002b5a:	6863      	ldr	r3, [r4, #4]
 8002b5c:	1a2a      	subs	r2, r5, r0
 8002b5e:	4413      	add	r3, r2
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	4610      	mov	r0, r2
 8002b64:	e7f1      	b.n	8002b4a <_read+0x1c>

08002b66 <_swilseek>:
 8002b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b68:	460c      	mov	r4, r1
 8002b6a:	4616      	mov	r6, r2
 8002b6c:	f7ff ffa2 	bl	8002ab4 <findslot>
 8002b70:	4605      	mov	r5, r0
 8002b72:	b940      	cbnz	r0, 8002b86 <_swilseek+0x20>
 8002b74:	f7fe fd84 	bl	8001680 <__errno>
 8002b78:	2309      	movs	r3, #9
 8002b7a:	6003      	str	r3, [r0, #0]
 8002b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8002b80:	4620      	mov	r0, r4
 8002b82:	b003      	add	sp, #12
 8002b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b86:	2e02      	cmp	r6, #2
 8002b88:	d903      	bls.n	8002b92 <_swilseek+0x2c>
 8002b8a:	f7fe fd79 	bl	8001680 <__errno>
 8002b8e:	2316      	movs	r3, #22
 8002b90:	e7f3      	b.n	8002b7a <_swilseek+0x14>
 8002b92:	2e01      	cmp	r6, #1
 8002b94:	d112      	bne.n	8002bbc <_swilseek+0x56>
 8002b96:	6843      	ldr	r3, [r0, #4]
 8002b98:	18e4      	adds	r4, r4, r3
 8002b9a:	d4f6      	bmi.n	8002b8a <_swilseek+0x24>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	260a      	movs	r6, #10
 8002ba0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ba4:	466f      	mov	r7, sp
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	4639      	mov	r1, r7
 8002baa:	beab      	bkpt	0x00ab
 8002bac:	4606      	mov	r6, r0
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f7ff ffa8 	bl	8002b04 <checkerror>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	dbe1      	blt.n	8002b7c <_swilseek+0x16>
 8002bb8:	606c      	str	r4, [r5, #4]
 8002bba:	e7e1      	b.n	8002b80 <_swilseek+0x1a>
 8002bbc:	2e02      	cmp	r6, #2
 8002bbe:	d1ed      	bne.n	8002b9c <_swilseek+0x36>
 8002bc0:	6803      	ldr	r3, [r0, #0]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	260c      	movs	r6, #12
 8002bc6:	466f      	mov	r7, sp
 8002bc8:	4630      	mov	r0, r6
 8002bca:	4639      	mov	r1, r7
 8002bcc:	beab      	bkpt	0x00ab
 8002bce:	4606      	mov	r6, r0
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f7ff ff97 	bl	8002b04 <checkerror>
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d0d0      	beq.n	8002b7c <_swilseek+0x16>
 8002bda:	4404      	add	r4, r0
 8002bdc:	e7de      	b.n	8002b9c <_swilseek+0x36>

08002bde <_lseek>:
 8002bde:	f7ff bfc2 	b.w	8002b66 <_swilseek>

08002be2 <_swiwrite>:
 8002be2:	b530      	push	{r4, r5, lr}
 8002be4:	b085      	sub	sp, #20
 8002be6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002bea:	9203      	str	r2, [sp, #12]
 8002bec:	2405      	movs	r4, #5
 8002bee:	ad01      	add	r5, sp, #4
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	beab      	bkpt	0x00ab
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff ff83 	bl	8002b04 <checkerror>
 8002bfe:	b005      	add	sp, #20
 8002c00:	bd30      	pop	{r4, r5, pc}

08002c02 <_write>:
 8002c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c04:	4615      	mov	r5, r2
 8002c06:	9101      	str	r1, [sp, #4]
 8002c08:	f7ff ff54 	bl	8002ab4 <findslot>
 8002c0c:	9901      	ldr	r1, [sp, #4]
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b930      	cbnz	r0, 8002c20 <_write+0x1e>
 8002c12:	f7fe fd35 	bl	8001680 <__errno>
 8002c16:	2309      	movs	r3, #9
 8002c18:	6003      	str	r3, [r0, #0]
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1e:	e012      	b.n	8002c46 <_write+0x44>
 8002c20:	6800      	ldr	r0, [r0, #0]
 8002c22:	462a      	mov	r2, r5
 8002c24:	f7ff ffdd 	bl	8002be2 <_swiwrite>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	dbf6      	blt.n	8002c1a <_write+0x18>
 8002c2c:	6862      	ldr	r2, [r4, #4]
 8002c2e:	1a2b      	subs	r3, r5, r0
 8002c30:	441a      	add	r2, r3
 8002c32:	42a8      	cmp	r0, r5
 8002c34:	6062      	str	r2, [r4, #4]
 8002c36:	d105      	bne.n	8002c44 <_write+0x42>
 8002c38:	2000      	movs	r0, #0
 8002c3a:	b003      	add	sp, #12
 8002c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c40:	f7ff bf52 	b.w	8002ae8 <error>
 8002c44:	4618      	mov	r0, r3
 8002c46:	b003      	add	sp, #12
 8002c48:	bd30      	pop	{r4, r5, pc}

08002c4a <_swiclose>:
 8002c4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c4c:	2402      	movs	r4, #2
 8002c4e:	9001      	str	r0, [sp, #4]
 8002c50:	ad01      	add	r5, sp, #4
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	beab      	bkpt	0x00ab
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff ff52 	bl	8002b04 <checkerror>
 8002c60:	b003      	add	sp, #12
 8002c62:	bd30      	pop	{r4, r5, pc}

08002c64 <_close>:
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4605      	mov	r5, r0
 8002c68:	f7ff ff24 	bl	8002ab4 <findslot>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	b930      	cbnz	r0, 8002c7e <_close+0x1a>
 8002c70:	f7fe fd06 	bl	8001680 <__errno>
 8002c74:	2309      	movs	r3, #9
 8002c76:	6003      	str	r3, [r0, #0]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
 8002c7e:	3d01      	subs	r5, #1
 8002c80:	2d01      	cmp	r5, #1
 8002c82:	d809      	bhi.n	8002c98 <_close+0x34>
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <_close+0x48>)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d104      	bne.n	8002c98 <_close+0x34>
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	2000      	movs	r0, #0
 8002c96:	e7f1      	b.n	8002c7c <_close+0x18>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	f7ff ffd6 	bl	8002c4a <_swiclose>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d1ec      	bne.n	8002c7c <_close+0x18>
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	6023      	str	r3, [r4, #0]
 8002ca8:	e7e8      	b.n	8002c7c <_close+0x18>
 8002caa:	bf00      	nop
 8002cac:	200000d4 	.word	0x200000d4

08002cb0 <_swistat>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	f7ff fefe 	bl	8002ab4 <findslot>
 8002cb8:	4605      	mov	r5, r0
 8002cba:	b930      	cbnz	r0, 8002cca <_swistat+0x1a>
 8002cbc:	f7fe fce0 	bl	8001680 <__errno>
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	6003      	str	r3, [r0, #0]
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	6863      	ldr	r3, [r4, #4]
 8002ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd0:	6063      	str	r3, [r4, #4]
 8002cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8002cd8:	260c      	movs	r6, #12
 8002cda:	4630      	mov	r0, r6
 8002cdc:	4629      	mov	r1, r5
 8002cde:	beab      	bkpt	0x00ab
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f7ff ff0e 	bl	8002b04 <checkerror>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	bf1c      	itt	ne
 8002cec:	6120      	strne	r0, [r4, #16]
 8002cee:	2000      	movne	r0, #0
 8002cf0:	e7ea      	b.n	8002cc8 <_swistat+0x18>

08002cf2 <_fstat>:
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	2258      	movs	r2, #88	; 0x58
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fcf1 	bl	80016e4 <memset>
 8002d02:	4601      	mov	r1, r0
 8002d04:	4620      	mov	r0, r4
 8002d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d0a:	f7ff bfd1 	b.w	8002cb0 <_swistat>

08002d0e <_isatty>:
 8002d0e:	b570      	push	{r4, r5, r6, lr}
 8002d10:	f7ff fed0 	bl	8002ab4 <findslot>
 8002d14:	2509      	movs	r5, #9
 8002d16:	4604      	mov	r4, r0
 8002d18:	b920      	cbnz	r0, 8002d24 <_isatty+0x16>
 8002d1a:	f7fe fcb1 	bl	8001680 <__errno>
 8002d1e:	6005      	str	r5, [r0, #0]
 8002d20:	4620      	mov	r0, r4
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	4628      	mov	r0, r5
 8002d26:	4621      	mov	r1, r4
 8002d28:	beab      	bkpt	0x00ab
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	2c01      	cmp	r4, #1
 8002d2e:	d0f7      	beq.n	8002d20 <_isatty+0x12>
 8002d30:	f7fe fca6 	bl	8001680 <__errno>
 8002d34:	2400      	movs	r4, #0
 8002d36:	4605      	mov	r5, r0
 8002d38:	2613      	movs	r6, #19
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	beab      	bkpt	0x00ab
 8002d40:	4606      	mov	r6, r0
 8002d42:	602e      	str	r6, [r5, #0]
 8002d44:	e7ec      	b.n	8002d20 <_isatty+0x12>
	...

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
