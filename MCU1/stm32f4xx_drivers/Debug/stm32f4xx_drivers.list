
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000000e8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015ec  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000056b  00000000  00000000  000216a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00021c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  00021d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003168  00000000  00000000  00021ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cb2  00000000  00000000  00025040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c397  00000000  00000000  00026cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00033089  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001134  00000000  00000000  000330dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002764 	.word	0x08002764

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08002764 	.word	0x08002764

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <delay>:
} I2CGPIOHandle_t;

// Global handle for use with the interrupt
I2C_Handle_t myI2CHandle;

void delay(uint16_t ms){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i < (ms*1000); i++);
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e002      	b.n	80002b6 <delay+0x16>
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3301      	adds	r3, #1
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d3f3      	bcc.n	80002b0 <delay+0x10>
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <I2C1_GPIOInits>:

void I2C1_GPIOInits(I2CGPIOHandle_t *pI2CGPIOHandle){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	pI2CGPIOHandle->SCL.pGPIOx = GPIOB;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <I2C1_GPIOInits+0x78>)
 80002e4:	60da      	str	r2, [r3, #12]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2206      	movs	r2, #6
 80002ea:	741a      	strb	r2, [r3, #16]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2202      	movs	r2, #2
 80002f0:	745a      	strb	r2, [r3, #17]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2204      	movs	r2, #4
 80002f6:	755a      	strb	r2, [r3, #21]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2201      	movs	r2, #1
 80002fc:	751a      	strb	r2, [r3, #20]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	74da      	strb	r2, [r3, #19]
	pI2CGPIOHandle->SCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2202      	movs	r2, #2
 8000308:	749a      	strb	r2, [r3, #18]

	pI2CGPIOHandle->SDA.pGPIOx = GPIOB;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <I2C1_GPIOInits+0x78>)
 800030e:	601a      	str	r2, [r3, #0]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2207      	movs	r2, #7
 8000314:	711a      	strb	r2, [r3, #4]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2202      	movs	r2, #2
 800031a:	715a      	strb	r2, [r3, #5]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2204      	movs	r2, #4
 8000320:	725a      	strb	r2, [r3, #9]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2201      	movs	r2, #1
 8000326:	721a      	strb	r2, [r3, #8]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	71da      	strb	r2, [r3, #7]
	pI2CGPIOHandle->SDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2202      	movs	r2, #2
 8000332:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&(pI2CGPIOHandle->SDA));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f9f2 	bl	8000720 <GPIO_Init>
	GPIO_Init(&(pI2CGPIOHandle->SCL));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	330c      	adds	r3, #12
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f9ed 	bl	8000720 <GPIO_Init>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020400 	.word	0x40020400

08000354 <I2C1_Init>:

void I2C1_Init(I2C_Handle_t *pI2CHandle){
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx = I2C1;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <I2C1_Init+0x34>)
 8000360:	601a      	str	r2, [r3, #0]
	pI2CHandle->I2C_Config.AckControl = I2C_ACK_ENABLE;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2201      	movs	r2, #1
 8000366:	725a      	strb	r2, [r3, #9]
	pI2CHandle->I2C_Config.DeviceAddress = 0x3F;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	223f      	movs	r2, #63	; 0x3f
 800036c:	721a      	strb	r2, [r3, #8]
	pI2CHandle->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	729a      	strb	r2, [r3, #10]
	pI2CHandle->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <I2C1_Init+0x38>)
 8000378:	605a      	str	r2, [r3, #4]

	I2C_Init(pI2CHandle);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 fd4e 	bl	8000e1c <I2C_Init>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40005400 	.word	0x40005400
 800038c:	000186a0 	.word	0x000186a0

08000390 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* pUSRPB){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	pUSRPB->pGPIOx = GPIOA;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <USRBTN_Init+0x40>)
 800039c:	601a      	str	r2, [r3, #0]
	pUSRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	711a      	strb	r2, [r3, #4]
	pUSRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2205      	movs	r2, #5
 80003a8:	715a      	strb	r2, [r3, #5]
	pUSRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2202      	movs	r2, #2
 80003ae:	719a      	strb	r2, [r3, #6]
	pUSRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	71da      	strb	r2, [r3, #7]

	GPIO_Init(pUSRPB);
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f000 f9b2 	bl	8000720 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 80003bc:	2201      	movs	r2, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	2006      	movs	r0, #6
 80003c2:	f000 fb5b 	bl	8000a7c <GPIO_IRQInterruptConfig>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020000 	.word	0x40020000

080003d4 <sendCommand>:

void sendCommand(uint8_t cmd){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af02      	add	r7, sp, #8
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	I2C_MasterSendData(&myI2CHandle, &cmd, sizeof(uint8_t), SLAVEADDR, I2C_ENABLE_RS);
 80003de:	1df9      	adds	r1, r7, #7
 80003e0:	2301      	movs	r3, #1
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2368      	movs	r3, #104	; 0x68
 80003e6:	2201      	movs	r2, #1
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <sendCommand+0x24>)
 80003ea:	f000 fe09 	bl	8001000 <I2C_MasterSendData>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200000a4 	.word	0x200000a4

080003fc <getLength>:

uint8_t getLength(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af02      	add	r7, sp, #8
	uint8_t strLen;

	sendCommand(CMD_READLENGTH);
 8000402:	2051      	movs	r0, #81	; 0x51
 8000404:	f7ff ffe6 	bl	80003d4 <sendCommand>

	I2C_MasterReceiveData(&myI2CHandle, &strLen, 1, SLAVEADDR, I2C_ENABLE_RS);
 8000408:	1df9      	adds	r1, r7, #7
 800040a:	2301      	movs	r3, #1
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2368      	movs	r3, #104	; 0x68
 8000410:	2201      	movs	r2, #1
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <getLength+0x28>)
 8000414:	f000 fe5b 	bl	80010ce <I2C_MasterReceiveData>

	return strLen;
 8000418:	79fb      	ldrb	r3, [r7, #7]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000a4 	.word	0x200000a4

08000428 <getData>:

uint8_t* getData(uint8_t len){
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	uint8_t* data = (uint8_t*)malloc((len * sizeof(uint8_t)) + 1);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	3301      	adds	r3, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f000 ff22 	bl	8001280 <malloc>
 800043c:	4603      	mov	r3, r0
 800043e:	60fb      	str	r3, [r7, #12]

	sendCommand(CMD_READDATA);
 8000440:	2052      	movs	r0, #82	; 0x52
 8000442:	f7ff ffc7 	bl	80003d4 <sendCommand>

	I2C_MasterReceiveData(&myI2CHandle, data, len, SLAVEADDR, I2C_DISABLE_RS);
 8000446:	79fa      	ldrb	r2, [r7, #7]
 8000448:	2300      	movs	r3, #0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2368      	movs	r3, #104	; 0x68
 800044e:	68f9      	ldr	r1, [r7, #12]
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <getData+0x38>)
 8000452:	f000 fe3c 	bl	80010ce <I2C_MasterReceiveData>

	return data;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000a4 	.word	0x200000a4

08000464 <readFromArduino>:

void readFromArduino(){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	I2C_PeripheralControl(&myI2CHandle, ENABLE);
 800046a:	2101      	movs	r1, #1
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <readFromArduino+0x48>)
 800046e:	f000 febd 	bl	80011ec <I2C_PeripheralControl>

	uint8_t len = getLength();
 8000472:	f7ff ffc3 	bl	80003fc <getLength>
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	uint8_t* data = getData(len);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ffd3 	bl	8000428 <getData>
 8000482:	6038      	str	r0, [r7, #0]
	I2C_PeripheralControl(&myI2CHandle, DISABLE);
 8000484:	2100      	movs	r1, #0
 8000486:	4809      	ldr	r0, [pc, #36]	; (80004ac <readFromArduino+0x48>)
 8000488:	f000 feb0 	bl	80011ec <I2C_PeripheralControl>

	data[len] = '\0';
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	4413      	add	r3, r2
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]

	printf("Retrieved string: %s\n", (char*)data);
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <readFromArduino+0x4c>)
 800049a:	f000 ffe9 	bl	8001470 <iprintf>

	free(data);
 800049e:	6838      	ldr	r0, [r7, #0]
 80004a0:	f000 fef6 	bl	8001290 <free>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000a4 	.word	0x200000a4
 80004b0:	0800277c 	.word	0x0800277c

080004b4 <main>:

int main(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80004ba:	f002 f8d1 	bl	8002660 <initialise_monitor_handles>

	// Initialize the GPIO's to be used for I2C
	I2CGPIOHandle_t I2C1GPIOs;
	I2C1_GPIOInits(&I2C1GPIOs);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff08 	bl	80002d8 <I2C1_GPIOInits>

	// Initialize I2C1 itself
	I2C1_Init(&myI2CHandle);
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <main+0x24>)
 80004ca:	f7ff ff43 	bl	8000354 <I2C1_Init>

	// Initialize push button
	GPIO_Handle_t USRPB;
	USRBTN_Init(&USRPB);
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ff5d 	bl	8000390 <USRBTN_Init>

	while(1);
 80004d6:	e7fe      	b.n	80004d6 <main+0x22>
 80004d8:	200000a4 	.word	0x200000a4

080004dc <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	delay(200);
 80004e0:	20c8      	movs	r0, #200	; 0xc8
 80004e2:	f7ff fedd 	bl	80002a0 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 fb78 	bl	8000bdc <GPIO_IRQHandling>
	readFromArduino();
 80004ec:	f7ff ffba 	bl	8000464 <readFromArduino>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 fe89 	bl	8001238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff ffc5 	bl	80004b4 <main>

0800052a <LoopForever>:

LoopForever:
    b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000538:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 800053c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000540:	20000170 	.word	0x20000170

08000544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_IRQHandler>
	...

08000548 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d162      	bne.n	8000620 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a66      	ldr	r2, [pc, #408]	; (80006f8 <GPIO_PeriClockControl+0x1b0>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000562:	4b66      	ldr	r3, [pc, #408]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a65      	ldr	r2, [pc, #404]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 800056e:	e0bc      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a63      	ldr	r2, [pc, #396]	; (8000700 <GPIO_PeriClockControl+0x1b8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000578:	4b60      	ldr	r3, [pc, #384]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a5f      	ldr	r2, [pc, #380]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e0b1      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a5e      	ldr	r2, [pc, #376]	; (8000704 <GPIO_PeriClockControl+0x1bc>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800058e:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a5a      	ldr	r2, [pc, #360]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e0a6      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a5a      	ldr	r2, [pc, #360]	; (8000708 <GPIO_PeriClockControl+0x1c0>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005a4:	4b55      	ldr	r3, [pc, #340]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a54      	ldr	r2, [pc, #336]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e09b      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a55      	ldr	r2, [pc, #340]	; (800070c <GPIO_PeriClockControl+0x1c4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a4f      	ldr	r2, [pc, #316]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005c0:	f043 0310 	orr.w	r3, r3, #16
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e090      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a51      	ldr	r2, [pc, #324]	; (8000710 <GPIO_PeriClockControl+0x1c8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a49      	ldr	r2, [pc, #292]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e085      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4c      	ldr	r2, [pc, #304]	; (8000714 <GPIO_PeriClockControl+0x1cc>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005e6:	4b45      	ldr	r3, [pc, #276]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a44      	ldr	r2, [pc, #272]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f2:	e07a      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a48      	ldr	r2, [pc, #288]	; (8000718 <GPIO_PeriClockControl+0x1d0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a3e      	ldr	r2, [pc, #248]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	e06f      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a43      	ldr	r2, [pc, #268]	; (800071c <GPIO_PeriClockControl+0x1d4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d16b      	bne.n	80006ea <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000612:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a39      	ldr	r2, [pc, #228]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061e:	e064      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d161      	bne.n	80006ea <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <GPIO_PeriClockControl+0x1b0>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 800062e:	4b33      	ldr	r3, [pc, #204]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a32      	ldr	r2, [pc, #200]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063a:	e056      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a30      	ldr	r2, [pc, #192]	; (8000700 <GPIO_PeriClockControl+0x1b8>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d106      	bne.n	8000652 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a2c      	ldr	r2, [pc, #176]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800064a:	f023 0302 	bic.w	r3, r3, #2
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000650:	e04b      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <GPIO_PeriClockControl+0x1bc>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a27      	ldr	r2, [pc, #156]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000660:	f023 0304 	bic.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000666:	e040      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <GPIO_PeriClockControl+0x1c0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000676:	f023 0308 	bic.w	r3, r3, #8
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067c:	e035      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a22      	ldr	r2, [pc, #136]	; (800070c <GPIO_PeriClockControl+0x1c4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800068c:	f023 0310 	bic.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000692:	e02a      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <GPIO_PeriClockControl+0x1c8>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006a2:	f023 0320 	bic.w	r3, r3, #32
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a8:	e01f      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <GPIO_PeriClockControl+0x1cc>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d106      	bne.n	80006c0 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006be:	e014      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <GPIO_PeriClockControl+0x1d0>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d4:	e009      	b.n	80006ea <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <GPIO_PeriClockControl+0x1d4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d105      	bne.n	80006ea <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <GPIO_PeriClockControl+0x1b4>)
 80006e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400
 8000704:	40020800 	.word	0x40020800
 8000708:	40020c00 	.word	0x40020c00
 800070c:	40021000 	.word	0x40021000
 8000710:	40021400 	.word	0x40021400
 8000714:	40021800 	.word	0x40021800
 8000718:	40021c00 	.word	0x40021c00
 800071c:	40022000 	.word	0x40022000

08000720 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff0a 	bl	8000548 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d820      	bhi.n	8000782 <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2103      	movs	r1, #3
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	430a      	orrs	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e0d0      	b.n	8000924 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b04      	cmp	r3, #4
 8000788:	d117      	bne.n	80007ba <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078a:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <GPIO_Init+0x19c>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	4611      	mov	r1, r2
 800079a:	4a48      	ldr	r2, [pc, #288]	; (80008bc <GPIO_Init+0x19c>)
 800079c:	430b      	orrs	r3, r1
 800079e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a0:	4b46      	ldr	r3, [pc, #280]	; (80008bc <GPIO_Init+0x19c>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7912      	ldrb	r2, [r2, #4]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	43d2      	mvns	r2, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a42      	ldr	r2, [pc, #264]	; (80008bc <GPIO_Init+0x19c>)
 80007b4:	400b      	ands	r3, r1
 80007b6:	6093      	str	r3, [r2, #8]
 80007b8:	e031      	b.n	800081e <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	795b      	ldrb	r3, [r3, #5]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d117      	bne.n	80007f2 <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c2:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <GPIO_Init+0x19c>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7912      	ldrb	r2, [r2, #4]
 80007ca:	4611      	mov	r1, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	408a      	lsls	r2, r1
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <GPIO_Init+0x19c>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <GPIO_Init+0x19c>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	43d2      	mvns	r2, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a34      	ldr	r2, [pc, #208]	; (80008bc <GPIO_Init+0x19c>)
 80007ec:	400b      	ands	r3, r1
 80007ee:	60d3      	str	r3, [r2, #12]
 80007f0:	e015      	b.n	800081e <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <GPIO_Init+0x19c>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7912      	ldrb	r2, [r2, #4]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	4611      	mov	r1, r2
 8000802:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <GPIO_Init+0x19c>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <GPIO_Init+0x19c>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7912      	ldrb	r2, [r2, #4]
 8000810:	4611      	mov	r1, r2
 8000812:	2201      	movs	r2, #1
 8000814:	408a      	lsls	r2, r1
 8000816:	4611      	mov	r1, r2
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <GPIO_Init+0x19c>)
 800081a:	430b      	orrs	r3, r1
 800081c:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <GPIO_Init+0x1a0>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <GPIO_Init+0x1a0>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	f003 0303 	and.w	r3, r3, #3
 800083a:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <GPIO_Init+0x1a4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d050      	beq.n	80008e8 <GPIO_Init+0x1c8>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <GPIO_Init+0x1a8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d032      	beq.n	80008b6 <GPIO_Init+0x196>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <GPIO_Init+0x1ac>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d02b      	beq.n	80008b2 <GPIO_Init+0x192>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <GPIO_Init+0x1b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d024      	beq.n	80008ae <GPIO_Init+0x18e>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <GPIO_Init+0x1b4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d01d      	beq.n	80008aa <GPIO_Init+0x18a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <GPIO_Init+0x1b8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d016      	beq.n	80008a6 <GPIO_Init+0x186>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <GPIO_Init+0x1bc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d00f      	beq.n	80008a2 <GPIO_Init+0x182>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <GPIO_Init+0x1c0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d008      	beq.n	800089e <GPIO_Init+0x17e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <GPIO_Init+0x1c4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <GPIO_Init+0x17a>
 8000896:	2308      	movs	r3, #8
 8000898:	e027      	b.n	80008ea <GPIO_Init+0x1ca>
 800089a:	2300      	movs	r3, #0
 800089c:	e025      	b.n	80008ea <GPIO_Init+0x1ca>
 800089e:	2307      	movs	r3, #7
 80008a0:	e023      	b.n	80008ea <GPIO_Init+0x1ca>
 80008a2:	2306      	movs	r3, #6
 80008a4:	e021      	b.n	80008ea <GPIO_Init+0x1ca>
 80008a6:	2305      	movs	r3, #5
 80008a8:	e01f      	b.n	80008ea <GPIO_Init+0x1ca>
 80008aa:	2304      	movs	r3, #4
 80008ac:	e01d      	b.n	80008ea <GPIO_Init+0x1ca>
 80008ae:	2303      	movs	r3, #3
 80008b0:	e01b      	b.n	80008ea <GPIO_Init+0x1ca>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e019      	b.n	80008ea <GPIO_Init+0x1ca>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e017      	b.n	80008ea <GPIO_Init+0x1ca>
 80008ba:	bf00      	nop
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40021400 	.word	0x40021400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40021c00 	.word	0x40021c00
 80008e4:	40022000 	.word	0x40022000
 80008e8:	2300      	movs	r3, #0
 80008ea:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80008ec:	4a61      	ldr	r2, [pc, #388]	; (8000a74 <GPIO_Init+0x354>)
 80008ee:	7cfb      	ldrb	r3, [r7, #19]
 80008f0:	3302      	adds	r3, #2
 80008f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f6:	7c79      	ldrb	r1, [r7, #17]
 80008f8:	7cbb      	ldrb	r3, [r7, #18]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	4618      	mov	r0, r3
 8000902:	495c      	ldr	r1, [pc, #368]	; (8000a74 <GPIO_Init+0x354>)
 8000904:	7cfb      	ldrb	r3, [r7, #19]
 8000906:	4302      	orrs	r2, r0
 8000908:	3302      	adds	r3, #2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <GPIO_Init+0x358>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7912      	ldrb	r2, [r2, #4]
 8000916:	4611      	mov	r1, r2
 8000918:	2201      	movs	r2, #1
 800091a:	408a      	lsls	r2, r1
 800091c:	4611      	mov	r1, r2
 800091e:	4a56      	ldr	r2, [pc, #344]	; (8000a78 <GPIO_Init+0x358>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	799b      	ldrb	r3, [r3, #6]
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2103      	movs	r1, #3
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	400a      	ands	r2, r1
 8000956:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6899      	ldr	r1, [r3, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	430a      	orrs	r2, r1
 8000966:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2103      	movs	r1, #3
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	400a      	ands	r2, r1
 800099a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68d9      	ldr	r1, [r3, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	60da      	str	r2, [r3, #12]
	temp = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) || (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d003      	beq.n	80009c0 <GPIO_Init+0x2a0>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d11f      	bne.n	8000a00 <GPIO_Init+0x2e0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7a1b      	ldrb	r3, [r3, #8]
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	4619      	mov	r1, r3
 80009dc:	2301      	movs	r3, #1
 80009de:	408b      	lsls	r3, r1
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	400a      	ands	r2, r1
 80009ea:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6859      	ldr	r1, [r3, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	605a      	str	r2, [r3, #4]
		temp = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d131      	bne.n	8000a6c <GPIO_Init+0x34c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7c3a      	ldrb	r2, [r7, #16]
 8000a20:	3208      	adds	r2, #8
 8000a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	7c3a      	ldrb	r2, [r7, #16]
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	3208      	adds	r2, #8
 8000a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	7c3a      	ldrb	r2, [r7, #16]
 8000a48:	3208      	adds	r2, #8
 8000a4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7a5b      	ldrb	r3, [r3, #9]
 8000a52:	461a      	mov	r2, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	7c3a      	ldrb	r2, [r7, #16]
 8000a64:	4301      	orrs	r1, r0
 8000a66:	3208      	adds	r2, #8
 8000a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d133      	bne.n	8000afa <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b1f      	cmp	r3, #31
 8000a96:	d80a      	bhi.n	8000aae <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000a98:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <GPIO_IRQInterruptConfig+0xf8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <GPIO_IRQInterruptConfig+0xf8>)
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	e058      	b.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b1f      	cmp	r3, #31
 8000ab2:	d90f      	bls.n	8000ad4 <GPIO_IRQInterruptConfig+0x58>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab8:	d80c      	bhi.n	8000ad4 <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <GPIO_IRQInterruptConfig+0xfc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	f002 021f 	and.w	r2, r2, #31
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <GPIO_IRQInterruptConfig+0xfc>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e045      	b.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad8:	d942      	bls.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b5f      	cmp	r3, #95	; 0x5f
 8000ade:	d83f      	bhi.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <GPIO_IRQInterruptConfig+0x100>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	f002 021f 	and.w	r2, r2, #31
 8000aea:	2101      	movs	r1, #1
 8000aec:	fa01 f202 	lsl.w	r2, r1, r2
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <GPIO_IRQInterruptConfig+0x100>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e032      	b.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b1f      	cmp	r3, #31
 8000afe:	d80a      	bhi.n	8000b16 <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <GPIO_IRQInterruptConfig+0x104>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <GPIO_IRQInterruptConfig+0x104>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e024      	b.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b1f      	cmp	r3, #31
 8000b1a:	d90f      	bls.n	8000b3c <GPIO_IRQInterruptConfig+0xc0>
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b20:	d80c      	bhi.n	8000b3c <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <GPIO_IRQInterruptConfig+0x108>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	f002 021f 	and.w	r2, r2, #31
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b32:	4611      	mov	r1, r2
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <GPIO_IRQInterruptConfig+0x108>)
 8000b36:	430b      	orrs	r3, r1
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e011      	b.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b40:	d90e      	bls.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b5f      	cmp	r3, #95	; 0x5f
 8000b46:	d80b      	bhi.n	8000b60 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <GPIO_IRQInterruptConfig+0x10c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	f002 021f 	and.w	r2, r2, #31
 8000b52:	2101      	movs	r1, #1
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <GPIO_IRQInterruptConfig+0x10c>)
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f811 	bl	8000b8c <GPIO_IRQPriorityConfig>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000e104 	.word	0xe000e104
 8000b7c:	e000e108 	.word	0xe000e108
 8000b80:	e000e180 	.word	0xe000e180
 8000b84:	e000e184 	.word	0xe000e184
 8000b88:	e000e188 	.word	0xe000e188

08000b8c <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000ba6:	7bbb      	ldrb	r3, [r7, #14]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	3304      	adds	r3, #4
 8000bae:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000bb8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000bbc:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	7b7b      	ldrb	r3, [r7, #13]
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <GPIO_IRQHandling>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQHandling(uint8_t pinNumber){
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << pinNumber)){
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <GPIO_IRQHandling+0x3c>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d009      	beq.n	8000c0c <GPIO_IRQHandling+0x30>
		// Clear the pending register by writing 1 to the corresponding bit
		EXTI->PR |= (1 << pinNumber);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <GPIO_IRQHandling+0x3c>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <GPIO_IRQHandling+0x3c>)
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	6153      	str	r3, [r2, #20]
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40013c00 	.word	0x40013c00

08000c1c <I2C_GenerateStartCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <I2C_GenerateStopCondition>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <I2C_ExecuteAddressPhase>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr, uint8_t RorW){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	70bb      	strb	r3, [r7, #2]
	if (RorW == READ)
 8000c6c:	78bb      	ldrb	r3, [r7, #2]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d107      	bne.n	8000c82 <I2C_ExecuteAddressPhase+0x26>
		pI2Cx->DR = ((slaveAddr << 1) | (0b00000001));
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	611a      	str	r2, [r3, #16]
	else if (RorW == WRITE)
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
}
 8000c80:	e007      	b.n	8000c92 <I2C_ExecuteAddressPhase+0x36>
	else if (RorW == WRITE)
 8000c82:	78bb      	ldrb	r3, [r7, #2]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d104      	bne.n	8000c92 <I2C_ExecuteAddressPhase+0x36>
		pI2Cx->DR = ((slaveAddr << 1) & ~(0b00000001));
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <I2C_ClearADDRFlag>:
 *
 * @return		- none
 *
 * @Note		- none
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000c9e:	b480      	push	{r7}
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	uint32_t dummy;
	dummy = pI2Cx->SR1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	60fb      	str	r3, [r7, #12]
	dummy = pI2Cx->SR2;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	60fb      	str	r3, [r7, #12]
	(void)dummy;
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <I2C_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d120      	bne.n	8000d14 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <I2C_PeriClockControl+0xa8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d106      	bne.n	8000ce8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DI();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DI();
	}
}
 8000ce6:	e038      	b.n	8000d5a <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <I2C_PeriClockControl+0xb0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d106      	bne.n	8000cfe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cfc:	e02d      	b.n	8000d5a <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <I2C_PeriClockControl+0xb4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d129      	bne.n	8000d5a <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d12:	e022      	b.n	8000d5a <I2C_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d11f      	bne.n	8000d5a <I2C_PeriClockControl+0x9a>
		if(pI2Cx == I2C1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <I2C_PeriClockControl+0xa8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d106      	bne.n	8000d30 <I2C_PeriClockControl+0x70>
			I2C1_PCLK_DI();
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d2e:	e014      	b.n	8000d5a <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <I2C_PeriClockControl+0xb0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d106      	bne.n	8000d46 <I2C_PeriClockControl+0x86>
			I2C2_PCLK_DI();
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d44:	e009      	b.n	8000d5a <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <I2C_PeriClockControl+0xb4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d105      	bne.n	8000d5a <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_DI();
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <I2C_PeriClockControl+0xac>)
 8000d54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40005800 	.word	0x40005800
 8000d74:	40005c00 	.word	0x40005c00

08000d78 <RCC_GetPCLK1Value>:
 *
 * @return		- APB1 Clock speed
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1Value(void){
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
	uint32_t pclk1, apb1p, ahbp, systemClk, temp;

	uint8_t clksrc;
	clksrc = (RCC->CFGR >> 2) & 0b11;
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <RCC_GetPCLK1Value+0x90>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	72fb      	strb	r3, [r7, #11]

	// System clock is HSI
	if(clksrc == 0){
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <RCC_GetPCLK1Value+0x20>
		systemClk = 16000000;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <RCC_GetPCLK1Value+0x94>)
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e004      	b.n	8000da2 <RCC_GetPCLK1Value+0x2a>
	}
	// System clock is HSE
	else if(clksrc == 1){
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <RCC_GetPCLK1Value+0x2a>
		systemClk = 8000000;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <RCC_GetPCLK1Value+0x98>)
 8000da0:	60fb      	str	r3, [r7, #12]
		// Not used in this course
		// systemClk = RCC_GetPLLOutputClock();
	}

	//AHB Prescaler starts at the fourth bit
	temp = (RCC->CFGR >> 4) & 0b1111;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <RCC_GetPCLK1Value+0x90>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	607b      	str	r3, [r7, #4]
	if (temp < 0b1000)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d802      	bhi.n	8000dba <RCC_GetPCLK1Value+0x42>
		ahbp = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	e005      	b.n	8000dc6 <RCC_GetPCLK1Value+0x4e>
	else
		ahbp = AHBPrescaler[temp - 0b1000];
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3b08      	subs	r3, #8
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <RCC_GetPCLK1Value+0x9c>)
 8000dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc4:	613b      	str	r3, [r7, #16]

	//APB1 prescaler starts at 10th bit
	temp = (RCC->CFGR >> 10) & 0b111;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <RCC_GetPCLK1Value+0x90>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	0a9b      	lsrs	r3, r3, #10
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	607b      	str	r3, [r7, #4]
	if (temp < 0b100)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d802      	bhi.n	8000dde <RCC_GetPCLK1Value+0x66>
		apb1p = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e005      	b.n	8000dea <RCC_GetPCLK1Value+0x72>
	else
		apb1p = APB1Prescaler[temp - 0b100];
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3b04      	subs	r3, #4
 8000de2:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <RCC_GetPCLK1Value+0xa0>)
 8000de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de8:	617b      	str	r3, [r7, #20]

	pclk1 = systemClk/(ahbp * apb1p);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df8:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000dfa:	683b      	ldr	r3, [r7, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	00f42400 	.word	0x00f42400
 8000e10:	007a1200 	.word	0x007a1200
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000010 	.word	0x20000010

08000e1c <I2C_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff46 	bl	8000cc0 <I2C_PeriClockControl>

	tempreg |= (pI2CHandle->I2C_Config.AckControl << 10);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7a5b      	ldrb	r3, [r3, #9]
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 8000e4e:	f7ff ff93 	bl	8000d78 <RCC_GetPCLK1Value>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a50      	ldr	r2, [pc, #320]	; (8000f98 <I2C_Init+0x17c>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e68:	605a      	str	r2, [r3, #4]

	// Address configuration
	tempreg = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
	tempreg = (pI2CHandle->I2C_Config.DeviceAddress << I2C_OAR1_ADD7);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6899      	ldr	r1, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	609a      	str	r2, [r3, #8]

	// Set to 7-bit slave address mode
	pI2CHandle->pI2Cx->OAR1 &= ~(1 << I2C_OAR1_ADD_MODE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e94:	609a      	str	r2, [r3, #8]

	// Bit 14 of OAR1 has to be kept at 1 by software, for some reason
	pI2CHandle->pI2Cx->OAR1 |= (1 << 14);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ea4:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	817b      	strh	r3, [r7, #10]
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a3b      	ldr	r2, [pc, #236]	; (8000f9c <I2C_Init+0x180>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d817      	bhi.n	8000ee4 <I2C_Init+0xc8>
		// Mode is standard mode
		pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_FS);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ec2:	61da      	str	r2, [r3, #28]
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.SCLSpeed);
 8000ec4:	f7ff ff58 	bl	8000d78 <RCC_GetPCLK1Value>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed4:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & (0xFFF);
 8000ed6:	897b      	ldrh	r3, [r7, #10]
 8000ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e02a      	b.n	8000f3a <I2C_Init+0x11e>
	} else {
		// Mode is fast mode
		pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_FS);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef2:	61da      	str	r2, [r3, #28]

		if(pI2CHandle->I2C_Config.FMDutyCycle == I2C_FM_DUTY_2){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7a9b      	ldrb	r3, [r3, #10]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10b      	bne.n	8000f14 <I2C_Init+0xf8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.SCLSpeed);
 8000efc:	f7ff ff3c 	bl	8000d78 <RCC_GetPCLK1Value>
 8000f00:	4601      	mov	r1, r0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f10:	817b      	strh	r3, [r7, #10]
 8000f12:	e00c      	b.n	8000f2e <I2C_Init+0x112>
		} else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.SCLSpeed);
 8000f14:	f7ff ff30 	bl	8000d78 <RCC_GetPCLK1Value>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009a      	lsls	r2, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= ccr_value & (0xFFF);
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= (tempreg);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69d9      	ldr	r1, [r3, #28]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCL_SPEED_SM){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <I2C_Init+0x180>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d809      	bhi.n	8000f68 <I2C_Init+0x14c>
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000f54:	f7ff ff10 	bl	8000d78 <RCC_GetPCLK1Value>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <I2C_Init+0x17c>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9b      	lsrs	r3, r3, #18
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e00c      	b.n	8000f82 <I2C_Init+0x166>
	} else {
		tempreg = ((RCC_GetPCLK1Value() * 300) /1000000U) + 1;
 8000f68:	f7ff ff06 	bl	8000d78 <RCC_GetPCLK1Value>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <I2C_Init+0x17c>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE =  (tempreg & 0x3F);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f8c:	621a      	str	r2, [r3, #32]
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <I2C_GetSR1FlagStatus>:
 *
 * @return		- SET or RESET
 *
 * @Note		- none
 */
uint8_t I2C_GetSR1FlagStatus(I2C_RegDef_t *pI2Cx, uint32_t flagName){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & flagName)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <I2C_GetSR1FlagStatus+0x1a>
		return FLAG_SET;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <I2C_GetSR1FlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <I2C_ManageAcking>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t ackOrNack){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
	if(ackOrNack == I2C_ACK_ENABLE)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d106      	bne.n	8000fe8 <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
}
 8000fe6:	e005      	b.n	8000ff4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <I2C_MasterSendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe02 	bl	8000c1c <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) == FLAG_RESET);
 8001018:	bf00      	nop
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2101      	movs	r1, #1
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffbd 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f6      	beq.n	800101a <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, WRITE);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	78f9      	ldrb	r1, [r7, #3]
 8001032:	2200      	movs	r2, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe11 	bl	8000c5c <I2C_ExecuteAddressPhase>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 800103a:	bf00      	nop
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffac 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f6      	beq.n	800103c <I2C_MasterSendData+0x3c>

	// 5. Clear the ADDR flag according to its software sequence
	//    Note: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fe23 	bl	8000c9e <I2C_ClearADDRFlag>

	// 6. Send the data until len becomes 0
	for(int i = 0; i < len; i++){
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e013      	b.n	8001086 <I2C_MasterSendData+0x86>
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET);
 800105e:	bf00      	nop
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff9a 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f6      	beq.n	8001060 <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = pTxbuffer[i];
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < len; i++){
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8e7      	bhi.n	800105e <I2C_MasterSendData+0x5e>
	}

	// 7. When Len becomes zero wait for TXE=1 and BTF=1 before generating ther STOP condition
	//	  Note: TXE=1, BTF-1, means that both SR and DR are empty and next transmission should begin
	//	  when BTF=1 SCL will be stretched (pulled to LOW)
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 800108e:	bf00      	nop
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff82 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f6      	beq.n	8001090 <I2C_MasterSendData+0x90>
			(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG) == FLAG_RESET));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff79 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 80010ae:	4603      	mov	r3, r0
	while ((I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG) == FLAG_RESET) ||
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ed      	beq.n	8001090 <I2C_MasterSendData+0x90>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	//    Note: generating STOP automatically clears the BTF
	if (sr == I2C_DISABLE_RS)
 80010b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d104      	bne.n	80010c6 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdbb 	bl	8000c3c <I2C_GenerateStopCondition>

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <I2C_MasterReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t sr){
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	70fb      	strb	r3, [r7, #3]
	// 1. Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd9b 	bl	8000c1c <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG) == FLAG_RESET);
 80010e6:	bf00      	nop
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff56 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f6      	beq.n	80010e8 <I2C_MasterReceiveData+0x1a>

	// 3. Send slave address
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr, READ);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	78f9      	ldrb	r1, [r7, #3]
 8001100:	2201      	movs	r2, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fdaa 	bl	8000c5c <I2C_ExecuteAddressPhase>

	// 4. Confirm that Ack bit is received by checking addr bit
	while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 8001108:	bf00      	nop
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2102      	movs	r1, #2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff45 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f6      	beq.n	800110a <I2C_MasterReceiveData+0x3c>

	// Procedure to read only 1 byte from slave
	if (len == 1){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d124      	bne.n	800116c <I2C_MasterReceiveData+0x9e>
		// Disable ACKing
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff4d 	bl	8000fc8 <I2C_ManageAcking>

		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fdb3 	bl	8000c9e <I2C_ClearADDRFlag>

		// Wair until RxNE becomes 1
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG) == FLAG_RESET)
 8001138:	e008      	b.n	800114c <I2C_MasterReceiveData+0x7e>

		// Generate STOP condition
		if (sr == I2C_DISABLE_RS)
 800113a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d104      	bne.n	800114c <I2C_MasterReceiveData+0x7e>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd78 	bl	8000c3c <I2C_GenerateStopCondition>
		while(I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG) == FLAG_RESET)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2140      	movs	r1, #64	; 0x40
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff24 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0ed      	beq.n	800113a <I2C_MasterReceiveData+0x6c>

		// Read data into buffer
		*pRxBuffer = (uint8_t)(pI2CHandle->pI2Cx->DR);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e031      	b.n	80011d0 <I2C_MasterReceiveData+0x102>
	}
	// Procedure to read multiple bytes from slave
	else {
		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fd94 	bl	8000c9e <I2C_ClearADDRFlag>

		// Read the data until len becomes zero
		for (uint32_t i = len; i > 0; i--){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e026      	b.n	80011ca <I2C_MasterReceiveData+0xfc>
			// Wait until RXnE becomes 1
			while (I2C_GetSR1FlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG) == FLAG_RESET);
 800117c:	bf00      	nop
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2102      	movs	r1, #2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff0b 	bl	8000fa0 <I2C_GetSR1FlagStatus>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f6      	beq.n	800117e <I2C_MasterReceiveData+0xb0>

			if(i == 2){ // if the last 2 bytes are remaining
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d10e      	bne.n	80011b4 <I2C_MasterReceiveData+0xe6>
				// Clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff13 	bl	8000fc8 <I2C_ManageAcking>

				// Generate STOP condition
				if (sr == I2C_DISABLE_RS)
 80011a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <I2C_MasterReceiveData+0xe6>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd44 	bl	8000c3c <I2C_GenerateStopCondition>
			}

			// Read the data from data register into buffer and increment buffer
			*(pRxBuffer++) = (uint8_t)(pI2CHandle->pI2Cx->DR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6919      	ldr	r1, [r3, #16]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	60ba      	str	r2, [r7, #8]
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = len; i > 0; i--){
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1d5      	bne.n	800117c <I2C_MasterReceiveData+0xae>
		}
	}

	// Re-enable ACKing
	if(pI2CHandle->I2C_Config.AckControl == I2C_ACK_ENABLE)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7a5b      	ldrb	r3, [r3, #9]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <I2C_MasterReceiveData+0x116>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fef2 	bl	8000fc8 <I2C_ManageAcking>
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <I2C_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeripheralControl(I2C_Handle_t* pI2CHandle, uint8_t EnorDi){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d110      	bne.n	8001220 <I2C_PeripheralControl+0x34>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
		I2C_ManageAcking(pI2CHandle->pI2Cx, pI2CHandle->I2C_Config.AckControl);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7a5b      	ldrb	r3, [r3, #9]
 8001216:	4619      	mov	r1, r3
 8001218:	4610      	mov	r0, r2
 800121a:	f7ff fed5 	bl	8000fc8 <I2C_ManageAcking>
	}
	else
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}
 800121e:	e007      	b.n	8001230 <I2C_PeripheralControl+0x44>
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <__libc_init_array>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	4d0d      	ldr	r5, [pc, #52]	; (8001270 <__libc_init_array+0x38>)
 800123c:	4c0d      	ldr	r4, [pc, #52]	; (8001274 <__libc_init_array+0x3c>)
 800123e:	1b64      	subs	r4, r4, r5
 8001240:	10a4      	asrs	r4, r4, #2
 8001242:	2600      	movs	r6, #0
 8001244:	42a6      	cmp	r6, r4
 8001246:	d109      	bne.n	800125c <__libc_init_array+0x24>
 8001248:	4d0b      	ldr	r5, [pc, #44]	; (8001278 <__libc_init_array+0x40>)
 800124a:	4c0c      	ldr	r4, [pc, #48]	; (800127c <__libc_init_array+0x44>)
 800124c:	f001 fa8a 	bl	8002764 <_init>
 8001250:	1b64      	subs	r4, r4, r5
 8001252:	10a4      	asrs	r4, r4, #2
 8001254:	2600      	movs	r6, #0
 8001256:	42a6      	cmp	r6, r4
 8001258:	d105      	bne.n	8001266 <__libc_init_array+0x2e>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001260:	4798      	blx	r3
 8001262:	3601      	adds	r6, #1
 8001264:	e7ee      	b.n	8001244 <__libc_init_array+0xc>
 8001266:	f855 3b04 	ldr.w	r3, [r5], #4
 800126a:	4798      	blx	r3
 800126c:	3601      	adds	r6, #1
 800126e:	e7f2      	b.n	8001256 <__libc_init_array+0x1e>
 8001270:	08002848 	.word	0x08002848
 8001274:	08002848 	.word	0x08002848
 8001278:	08002848 	.word	0x08002848
 800127c:	0800284c 	.word	0x0800284c

08001280 <malloc>:
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <malloc+0xc>)
 8001282:	4601      	mov	r1, r0
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	f000 b87f 	b.w	8001388 <_malloc_r>
 800128a:	bf00      	nop
 800128c:	20000018 	.word	0x20000018

08001290 <free>:
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <free+0xc>)
 8001292:	4601      	mov	r1, r0
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f000 b80b 	b.w	80012b0 <_free_r>
 800129a:	bf00      	nop
 800129c:	20000018 	.word	0x20000018

080012a0 <memset>:
 80012a0:	4402      	add	r2, r0
 80012a2:	4603      	mov	r3, r0
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d100      	bne.n	80012aa <memset+0xa>
 80012a8:	4770      	bx	lr
 80012aa:	f803 1b01 	strb.w	r1, [r3], #1
 80012ae:	e7f9      	b.n	80012a4 <memset+0x4>

080012b0 <_free_r>:
 80012b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d044      	beq.n	8001340 <_free_r+0x90>
 80012b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ba:	9001      	str	r0, [sp, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f1a1 0404 	sub.w	r4, r1, #4
 80012c2:	bfb8      	it	lt
 80012c4:	18e4      	addlt	r4, r4, r3
 80012c6:	f000 f9f3 	bl	80016b0 <__malloc_lock>
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <_free_r+0x94>)
 80012cc:	9801      	ldr	r0, [sp, #4]
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	b933      	cbnz	r3, 80012e0 <_free_r+0x30>
 80012d2:	6063      	str	r3, [r4, #4]
 80012d4:	6014      	str	r4, [r2, #0]
 80012d6:	b003      	add	sp, #12
 80012d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80012dc:	f000 b9ee 	b.w	80016bc <__malloc_unlock>
 80012e0:	42a3      	cmp	r3, r4
 80012e2:	d908      	bls.n	80012f6 <_free_r+0x46>
 80012e4:	6825      	ldr	r5, [r4, #0]
 80012e6:	1961      	adds	r1, r4, r5
 80012e8:	428b      	cmp	r3, r1
 80012ea:	bf01      	itttt	eq
 80012ec:	6819      	ldreq	r1, [r3, #0]
 80012ee:	685b      	ldreq	r3, [r3, #4]
 80012f0:	1949      	addeq	r1, r1, r5
 80012f2:	6021      	streq	r1, [r4, #0]
 80012f4:	e7ed      	b.n	80012d2 <_free_r+0x22>
 80012f6:	461a      	mov	r2, r3
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	b10b      	cbz	r3, 8001300 <_free_r+0x50>
 80012fc:	42a3      	cmp	r3, r4
 80012fe:	d9fa      	bls.n	80012f6 <_free_r+0x46>
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	1855      	adds	r5, r2, r1
 8001304:	42a5      	cmp	r5, r4
 8001306:	d10b      	bne.n	8001320 <_free_r+0x70>
 8001308:	6824      	ldr	r4, [r4, #0]
 800130a:	4421      	add	r1, r4
 800130c:	1854      	adds	r4, r2, r1
 800130e:	42a3      	cmp	r3, r4
 8001310:	6011      	str	r1, [r2, #0]
 8001312:	d1e0      	bne.n	80012d6 <_free_r+0x26>
 8001314:	681c      	ldr	r4, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	6053      	str	r3, [r2, #4]
 800131a:	4421      	add	r1, r4
 800131c:	6011      	str	r1, [r2, #0]
 800131e:	e7da      	b.n	80012d6 <_free_r+0x26>
 8001320:	d902      	bls.n	8001328 <_free_r+0x78>
 8001322:	230c      	movs	r3, #12
 8001324:	6003      	str	r3, [r0, #0]
 8001326:	e7d6      	b.n	80012d6 <_free_r+0x26>
 8001328:	6825      	ldr	r5, [r4, #0]
 800132a:	1961      	adds	r1, r4, r5
 800132c:	428b      	cmp	r3, r1
 800132e:	bf04      	itt	eq
 8001330:	6819      	ldreq	r1, [r3, #0]
 8001332:	685b      	ldreq	r3, [r3, #4]
 8001334:	6063      	str	r3, [r4, #4]
 8001336:	bf04      	itt	eq
 8001338:	1949      	addeq	r1, r1, r5
 800133a:	6021      	streq	r1, [r4, #0]
 800133c:	6054      	str	r4, [r2, #4]
 800133e:	e7ca      	b.n	80012d6 <_free_r+0x26>
 8001340:	b003      	add	sp, #12
 8001342:	bd30      	pop	{r4, r5, pc}
 8001344:	200000b0 	.word	0x200000b0

08001348 <sbrk_aligned>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4e0e      	ldr	r6, [pc, #56]	; (8001384 <sbrk_aligned+0x3c>)
 800134c:	460c      	mov	r4, r1
 800134e:	6831      	ldr	r1, [r6, #0]
 8001350:	4605      	mov	r5, r0
 8001352:	b911      	cbnz	r1, 800135a <sbrk_aligned+0x12>
 8001354:	f000 f8a4 	bl	80014a0 <_sbrk_r>
 8001358:	6030      	str	r0, [r6, #0]
 800135a:	4621      	mov	r1, r4
 800135c:	4628      	mov	r0, r5
 800135e:	f000 f89f 	bl	80014a0 <_sbrk_r>
 8001362:	1c43      	adds	r3, r0, #1
 8001364:	d00a      	beq.n	800137c <sbrk_aligned+0x34>
 8001366:	1cc4      	adds	r4, r0, #3
 8001368:	f024 0403 	bic.w	r4, r4, #3
 800136c:	42a0      	cmp	r0, r4
 800136e:	d007      	beq.n	8001380 <sbrk_aligned+0x38>
 8001370:	1a21      	subs	r1, r4, r0
 8001372:	4628      	mov	r0, r5
 8001374:	f000 f894 	bl	80014a0 <_sbrk_r>
 8001378:	3001      	adds	r0, #1
 800137a:	d101      	bne.n	8001380 <sbrk_aligned+0x38>
 800137c:	f04f 34ff 	mov.w	r4, #4294967295
 8001380:	4620      	mov	r0, r4
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	200000b4 	.word	0x200000b4

08001388 <_malloc_r>:
 8001388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	1ccd      	adds	r5, r1, #3
 800138e:	f025 0503 	bic.w	r5, r5, #3
 8001392:	3508      	adds	r5, #8
 8001394:	2d0c      	cmp	r5, #12
 8001396:	bf38      	it	cc
 8001398:	250c      	movcc	r5, #12
 800139a:	2d00      	cmp	r5, #0
 800139c:	4607      	mov	r7, r0
 800139e:	db01      	blt.n	80013a4 <_malloc_r+0x1c>
 80013a0:	42a9      	cmp	r1, r5
 80013a2:	d905      	bls.n	80013b0 <_malloc_r+0x28>
 80013a4:	230c      	movs	r3, #12
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	2600      	movs	r6, #0
 80013aa:	4630      	mov	r0, r6
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b0:	4e2e      	ldr	r6, [pc, #184]	; (800146c <_malloc_r+0xe4>)
 80013b2:	f000 f97d 	bl	80016b0 <__malloc_lock>
 80013b6:	6833      	ldr	r3, [r6, #0]
 80013b8:	461c      	mov	r4, r3
 80013ba:	bb34      	cbnz	r4, 800140a <_malloc_r+0x82>
 80013bc:	4629      	mov	r1, r5
 80013be:	4638      	mov	r0, r7
 80013c0:	f7ff ffc2 	bl	8001348 <sbrk_aligned>
 80013c4:	1c43      	adds	r3, r0, #1
 80013c6:	4604      	mov	r4, r0
 80013c8:	d14d      	bne.n	8001466 <_malloc_r+0xde>
 80013ca:	6834      	ldr	r4, [r6, #0]
 80013cc:	4626      	mov	r6, r4
 80013ce:	2e00      	cmp	r6, #0
 80013d0:	d140      	bne.n	8001454 <_malloc_r+0xcc>
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	4631      	mov	r1, r6
 80013d6:	4638      	mov	r0, r7
 80013d8:	eb04 0803 	add.w	r8, r4, r3
 80013dc:	f000 f860 	bl	80014a0 <_sbrk_r>
 80013e0:	4580      	cmp	r8, r0
 80013e2:	d13a      	bne.n	800145a <_malloc_r+0xd2>
 80013e4:	6821      	ldr	r1, [r4, #0]
 80013e6:	3503      	adds	r5, #3
 80013e8:	1a6d      	subs	r5, r5, r1
 80013ea:	f025 0503 	bic.w	r5, r5, #3
 80013ee:	3508      	adds	r5, #8
 80013f0:	2d0c      	cmp	r5, #12
 80013f2:	bf38      	it	cc
 80013f4:	250c      	movcc	r5, #12
 80013f6:	4629      	mov	r1, r5
 80013f8:	4638      	mov	r0, r7
 80013fa:	f7ff ffa5 	bl	8001348 <sbrk_aligned>
 80013fe:	3001      	adds	r0, #1
 8001400:	d02b      	beq.n	800145a <_malloc_r+0xd2>
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	442b      	add	r3, r5
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	e00e      	b.n	8001428 <_malloc_r+0xa0>
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	1b52      	subs	r2, r2, r5
 800140e:	d41e      	bmi.n	800144e <_malloc_r+0xc6>
 8001410:	2a0b      	cmp	r2, #11
 8001412:	d916      	bls.n	8001442 <_malloc_r+0xba>
 8001414:	1961      	adds	r1, r4, r5
 8001416:	42a3      	cmp	r3, r4
 8001418:	6025      	str	r5, [r4, #0]
 800141a:	bf18      	it	ne
 800141c:	6059      	strne	r1, [r3, #4]
 800141e:	6863      	ldr	r3, [r4, #4]
 8001420:	bf08      	it	eq
 8001422:	6031      	streq	r1, [r6, #0]
 8001424:	5162      	str	r2, [r4, r5]
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	4638      	mov	r0, r7
 800142a:	f104 060b 	add.w	r6, r4, #11
 800142e:	f000 f945 	bl	80016bc <__malloc_unlock>
 8001432:	f026 0607 	bic.w	r6, r6, #7
 8001436:	1d23      	adds	r3, r4, #4
 8001438:	1af2      	subs	r2, r6, r3
 800143a:	d0b6      	beq.n	80013aa <_malloc_r+0x22>
 800143c:	1b9b      	subs	r3, r3, r6
 800143e:	50a3      	str	r3, [r4, r2]
 8001440:	e7b3      	b.n	80013aa <_malloc_r+0x22>
 8001442:	6862      	ldr	r2, [r4, #4]
 8001444:	42a3      	cmp	r3, r4
 8001446:	bf0c      	ite	eq
 8001448:	6032      	streq	r2, [r6, #0]
 800144a:	605a      	strne	r2, [r3, #4]
 800144c:	e7ec      	b.n	8001428 <_malloc_r+0xa0>
 800144e:	4623      	mov	r3, r4
 8001450:	6864      	ldr	r4, [r4, #4]
 8001452:	e7b2      	b.n	80013ba <_malloc_r+0x32>
 8001454:	4634      	mov	r4, r6
 8001456:	6876      	ldr	r6, [r6, #4]
 8001458:	e7b9      	b.n	80013ce <_malloc_r+0x46>
 800145a:	230c      	movs	r3, #12
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4638      	mov	r0, r7
 8001460:	f000 f92c 	bl	80016bc <__malloc_unlock>
 8001464:	e7a1      	b.n	80013aa <_malloc_r+0x22>
 8001466:	6025      	str	r5, [r4, #0]
 8001468:	e7de      	b.n	8001428 <_malloc_r+0xa0>
 800146a:	bf00      	nop
 800146c:	200000b0 	.word	0x200000b0

08001470 <iprintf>:
 8001470:	b40f      	push	{r0, r1, r2, r3}
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <iprintf+0x2c>)
 8001474:	b513      	push	{r0, r1, r4, lr}
 8001476:	681c      	ldr	r4, [r3, #0]
 8001478:	b124      	cbz	r4, 8001484 <iprintf+0x14>
 800147a:	69a3      	ldr	r3, [r4, #24]
 800147c:	b913      	cbnz	r3, 8001484 <iprintf+0x14>
 800147e:	4620      	mov	r0, r4
 8001480:	f000 f876 	bl	8001570 <__sinit>
 8001484:	ab05      	add	r3, sp, #20
 8001486:	9a04      	ldr	r2, [sp, #16]
 8001488:	68a1      	ldr	r1, [r4, #8]
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	4620      	mov	r0, r4
 800148e:	f000 f945 	bl	800171c <_vfiprintf_r>
 8001492:	b002      	add	sp, #8
 8001494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001498:	b004      	add	sp, #16
 800149a:	4770      	bx	lr
 800149c:	20000018 	.word	0x20000018

080014a0 <_sbrk_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4d06      	ldr	r5, [pc, #24]	; (80014bc <_sbrk_r+0x1c>)
 80014a4:	2300      	movs	r3, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	f000 ff8c 	bl	80023c8 <_sbrk>
 80014b0:	1c43      	adds	r3, r0, #1
 80014b2:	d102      	bne.n	80014ba <_sbrk_r+0x1a>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	b103      	cbz	r3, 80014ba <_sbrk_r+0x1a>
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	bd38      	pop	{r3, r4, r5, pc}
 80014bc:	200000bc 	.word	0x200000bc

080014c0 <std>:
 80014c0:	2300      	movs	r3, #0
 80014c2:	b510      	push	{r4, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	e9c0 3300 	strd	r3, r3, [r0]
 80014ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014ce:	6083      	str	r3, [r0, #8]
 80014d0:	8181      	strh	r1, [r0, #12]
 80014d2:	6643      	str	r3, [r0, #100]	; 0x64
 80014d4:	81c2      	strh	r2, [r0, #14]
 80014d6:	6183      	str	r3, [r0, #24]
 80014d8:	4619      	mov	r1, r3
 80014da:	2208      	movs	r2, #8
 80014dc:	305c      	adds	r0, #92	; 0x5c
 80014de:	f7ff fedf 	bl	80012a0 <memset>
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <std+0x38>)
 80014e4:	6263      	str	r3, [r4, #36]	; 0x24
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <std+0x3c>)
 80014e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <std+0x40>)
 80014ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <std+0x44>)
 80014f0:	6224      	str	r4, [r4, #32]
 80014f2:	6323      	str	r3, [r4, #48]	; 0x30
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	bf00      	nop
 80014f8:	08001ca5 	.word	0x08001ca5
 80014fc:	08001cc7 	.word	0x08001cc7
 8001500:	08001cff 	.word	0x08001cff
 8001504:	08001d23 	.word	0x08001d23

08001508 <_cleanup_r>:
 8001508:	4901      	ldr	r1, [pc, #4]	; (8001510 <_cleanup_r+0x8>)
 800150a:	f000 b8af 	b.w	800166c <_fwalk_reent>
 800150e:	bf00      	nop
 8001510:	08001ffd 	.word	0x08001ffd

08001514 <__sfmoreglue>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	2268      	movs	r2, #104	; 0x68
 8001518:	1e4d      	subs	r5, r1, #1
 800151a:	4355      	muls	r5, r2
 800151c:	460e      	mov	r6, r1
 800151e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001522:	f7ff ff31 	bl	8001388 <_malloc_r>
 8001526:	4604      	mov	r4, r0
 8001528:	b140      	cbz	r0, 800153c <__sfmoreglue+0x28>
 800152a:	2100      	movs	r1, #0
 800152c:	e9c0 1600 	strd	r1, r6, [r0]
 8001530:	300c      	adds	r0, #12
 8001532:	60a0      	str	r0, [r4, #8]
 8001534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001538:	f7ff feb2 	bl	80012a0 <memset>
 800153c:	4620      	mov	r0, r4
 800153e:	bd70      	pop	{r4, r5, r6, pc}

08001540 <__sfp_lock_acquire>:
 8001540:	4801      	ldr	r0, [pc, #4]	; (8001548 <__sfp_lock_acquire+0x8>)
 8001542:	f000 b8b3 	b.w	80016ac <__retarget_lock_acquire_recursive>
 8001546:	bf00      	nop
 8001548:	200000b9 	.word	0x200000b9

0800154c <__sfp_lock_release>:
 800154c:	4801      	ldr	r0, [pc, #4]	; (8001554 <__sfp_lock_release+0x8>)
 800154e:	f000 b8ae 	b.w	80016ae <__retarget_lock_release_recursive>
 8001552:	bf00      	nop
 8001554:	200000b9 	.word	0x200000b9

08001558 <__sinit_lock_acquire>:
 8001558:	4801      	ldr	r0, [pc, #4]	; (8001560 <__sinit_lock_acquire+0x8>)
 800155a:	f000 b8a7 	b.w	80016ac <__retarget_lock_acquire_recursive>
 800155e:	bf00      	nop
 8001560:	200000ba 	.word	0x200000ba

08001564 <__sinit_lock_release>:
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <__sinit_lock_release+0x8>)
 8001566:	f000 b8a2 	b.w	80016ae <__retarget_lock_release_recursive>
 800156a:	bf00      	nop
 800156c:	200000ba 	.word	0x200000ba

08001570 <__sinit>:
 8001570:	b510      	push	{r4, lr}
 8001572:	4604      	mov	r4, r0
 8001574:	f7ff fff0 	bl	8001558 <__sinit_lock_acquire>
 8001578:	69a3      	ldr	r3, [r4, #24]
 800157a:	b11b      	cbz	r3, 8001584 <__sinit+0x14>
 800157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001580:	f7ff bff0 	b.w	8001564 <__sinit_lock_release>
 8001584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001588:	6523      	str	r3, [r4, #80]	; 0x50
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <__sinit+0x68>)
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <__sinit+0x6c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	62a2      	str	r2, [r4, #40]	; 0x28
 8001592:	42a3      	cmp	r3, r4
 8001594:	bf04      	itt	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	61a3      	streq	r3, [r4, #24]
 800159a:	4620      	mov	r0, r4
 800159c:	f000 f820 	bl	80015e0 <__sfp>
 80015a0:	6060      	str	r0, [r4, #4]
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 f81c 	bl	80015e0 <__sfp>
 80015a8:	60a0      	str	r0, [r4, #8]
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 f818 	bl	80015e0 <__sfp>
 80015b0:	2200      	movs	r2, #0
 80015b2:	60e0      	str	r0, [r4, #12]
 80015b4:	2104      	movs	r1, #4
 80015b6:	6860      	ldr	r0, [r4, #4]
 80015b8:	f7ff ff82 	bl	80014c0 <std>
 80015bc:	68a0      	ldr	r0, [r4, #8]
 80015be:	2201      	movs	r2, #1
 80015c0:	2109      	movs	r1, #9
 80015c2:	f7ff ff7d 	bl	80014c0 <std>
 80015c6:	68e0      	ldr	r0, [r4, #12]
 80015c8:	2202      	movs	r2, #2
 80015ca:	2112      	movs	r1, #18
 80015cc:	f7ff ff78 	bl	80014c0 <std>
 80015d0:	2301      	movs	r3, #1
 80015d2:	61a3      	str	r3, [r4, #24]
 80015d4:	e7d2      	b.n	800157c <__sinit+0xc>
 80015d6:	bf00      	nop
 80015d8:	08002794 	.word	0x08002794
 80015dc:	08001509 	.word	0x08001509

080015e0 <__sfp>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	4607      	mov	r7, r0
 80015e4:	f7ff ffac 	bl	8001540 <__sfp_lock_acquire>
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <__sfp+0x84>)
 80015ea:	681e      	ldr	r6, [r3, #0]
 80015ec:	69b3      	ldr	r3, [r6, #24]
 80015ee:	b913      	cbnz	r3, 80015f6 <__sfp+0x16>
 80015f0:	4630      	mov	r0, r6
 80015f2:	f7ff ffbd 	bl	8001570 <__sinit>
 80015f6:	3648      	adds	r6, #72	; 0x48
 80015f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	d503      	bpl.n	8001608 <__sfp+0x28>
 8001600:	6833      	ldr	r3, [r6, #0]
 8001602:	b30b      	cbz	r3, 8001648 <__sfp+0x68>
 8001604:	6836      	ldr	r6, [r6, #0]
 8001606:	e7f7      	b.n	80015f8 <__sfp+0x18>
 8001608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800160c:	b9d5      	cbnz	r5, 8001644 <__sfp+0x64>
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <__sfp+0x88>)
 8001610:	60e3      	str	r3, [r4, #12]
 8001612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001616:	6665      	str	r5, [r4, #100]	; 0x64
 8001618:	f000 f847 	bl	80016aa <__retarget_lock_init_recursive>
 800161c:	f7ff ff96 	bl	800154c <__sfp_lock_release>
 8001620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001628:	6025      	str	r5, [r4, #0]
 800162a:	61a5      	str	r5, [r4, #24]
 800162c:	2208      	movs	r2, #8
 800162e:	4629      	mov	r1, r5
 8001630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001634:	f7ff fe34 	bl	80012a0 <memset>
 8001638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800163c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001640:	4620      	mov	r0, r4
 8001642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001644:	3468      	adds	r4, #104	; 0x68
 8001646:	e7d9      	b.n	80015fc <__sfp+0x1c>
 8001648:	2104      	movs	r1, #4
 800164a:	4638      	mov	r0, r7
 800164c:	f7ff ff62 	bl	8001514 <__sfmoreglue>
 8001650:	4604      	mov	r4, r0
 8001652:	6030      	str	r0, [r6, #0]
 8001654:	2800      	cmp	r0, #0
 8001656:	d1d5      	bne.n	8001604 <__sfp+0x24>
 8001658:	f7ff ff78 	bl	800154c <__sfp_lock_release>
 800165c:	230c      	movs	r3, #12
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e7ee      	b.n	8001640 <__sfp+0x60>
 8001662:	bf00      	nop
 8001664:	08002794 	.word	0x08002794
 8001668:	ffff0001 	.word	0xffff0001

0800166c <_fwalk_reent>:
 800166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001670:	4606      	mov	r6, r0
 8001672:	4688      	mov	r8, r1
 8001674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001678:	2700      	movs	r7, #0
 800167a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800167e:	f1b9 0901 	subs.w	r9, r9, #1
 8001682:	d505      	bpl.n	8001690 <_fwalk_reent+0x24>
 8001684:	6824      	ldr	r4, [r4, #0]
 8001686:	2c00      	cmp	r4, #0
 8001688:	d1f7      	bne.n	800167a <_fwalk_reent+0xe>
 800168a:	4638      	mov	r0, r7
 800168c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001690:	89ab      	ldrh	r3, [r5, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d907      	bls.n	80016a6 <_fwalk_reent+0x3a>
 8001696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800169a:	3301      	adds	r3, #1
 800169c:	d003      	beq.n	80016a6 <_fwalk_reent+0x3a>
 800169e:	4629      	mov	r1, r5
 80016a0:	4630      	mov	r0, r6
 80016a2:	47c0      	blx	r8
 80016a4:	4307      	orrs	r7, r0
 80016a6:	3568      	adds	r5, #104	; 0x68
 80016a8:	e7e9      	b.n	800167e <_fwalk_reent+0x12>

080016aa <__retarget_lock_init_recursive>:
 80016aa:	4770      	bx	lr

080016ac <__retarget_lock_acquire_recursive>:
 80016ac:	4770      	bx	lr

080016ae <__retarget_lock_release_recursive>:
 80016ae:	4770      	bx	lr

080016b0 <__malloc_lock>:
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <__malloc_lock+0x8>)
 80016b2:	f7ff bffb 	b.w	80016ac <__retarget_lock_acquire_recursive>
 80016b6:	bf00      	nop
 80016b8:	200000b8 	.word	0x200000b8

080016bc <__malloc_unlock>:
 80016bc:	4801      	ldr	r0, [pc, #4]	; (80016c4 <__malloc_unlock+0x8>)
 80016be:	f7ff bff6 	b.w	80016ae <__retarget_lock_release_recursive>
 80016c2:	bf00      	nop
 80016c4:	200000b8 	.word	0x200000b8

080016c8 <__sfputc_r>:
 80016c8:	6893      	ldr	r3, [r2, #8]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	b410      	push	{r4}
 80016d0:	6093      	str	r3, [r2, #8]
 80016d2:	da08      	bge.n	80016e6 <__sfputc_r+0x1e>
 80016d4:	6994      	ldr	r4, [r2, #24]
 80016d6:	42a3      	cmp	r3, r4
 80016d8:	db01      	blt.n	80016de <__sfputc_r+0x16>
 80016da:	290a      	cmp	r1, #10
 80016dc:	d103      	bne.n	80016e6 <__sfputc_r+0x1e>
 80016de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e2:	f000 bb23 	b.w	8001d2c <__swbuf_r>
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	1c58      	adds	r0, r3, #1
 80016ea:	6010      	str	r0, [r2, #0]
 80016ec:	7019      	strb	r1, [r3, #0]
 80016ee:	4608      	mov	r0, r1
 80016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <__sfputs_r>:
 80016f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f8:	4606      	mov	r6, r0
 80016fa:	460f      	mov	r7, r1
 80016fc:	4614      	mov	r4, r2
 80016fe:	18d5      	adds	r5, r2, r3
 8001700:	42ac      	cmp	r4, r5
 8001702:	d101      	bne.n	8001708 <__sfputs_r+0x12>
 8001704:	2000      	movs	r0, #0
 8001706:	e007      	b.n	8001718 <__sfputs_r+0x22>
 8001708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800170c:	463a      	mov	r2, r7
 800170e:	4630      	mov	r0, r6
 8001710:	f7ff ffda 	bl	80016c8 <__sfputc_r>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d1f3      	bne.n	8001700 <__sfputs_r+0xa>
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800171c <_vfiprintf_r>:
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	460d      	mov	r5, r1
 8001722:	b09d      	sub	sp, #116	; 0x74
 8001724:	4614      	mov	r4, r2
 8001726:	4698      	mov	r8, r3
 8001728:	4606      	mov	r6, r0
 800172a:	b118      	cbz	r0, 8001734 <_vfiprintf_r+0x18>
 800172c:	6983      	ldr	r3, [r0, #24]
 800172e:	b90b      	cbnz	r3, 8001734 <_vfiprintf_r+0x18>
 8001730:	f7ff ff1e 	bl	8001570 <__sinit>
 8001734:	4b89      	ldr	r3, [pc, #548]	; (800195c <_vfiprintf_r+0x240>)
 8001736:	429d      	cmp	r5, r3
 8001738:	d11b      	bne.n	8001772 <_vfiprintf_r+0x56>
 800173a:	6875      	ldr	r5, [r6, #4]
 800173c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800173e:	07d9      	lsls	r1, r3, #31
 8001740:	d405      	bmi.n	800174e <_vfiprintf_r+0x32>
 8001742:	89ab      	ldrh	r3, [r5, #12]
 8001744:	059a      	lsls	r2, r3, #22
 8001746:	d402      	bmi.n	800174e <_vfiprintf_r+0x32>
 8001748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800174a:	f7ff ffaf 	bl	80016ac <__retarget_lock_acquire_recursive>
 800174e:	89ab      	ldrh	r3, [r5, #12]
 8001750:	071b      	lsls	r3, r3, #28
 8001752:	d501      	bpl.n	8001758 <_vfiprintf_r+0x3c>
 8001754:	692b      	ldr	r3, [r5, #16]
 8001756:	b9eb      	cbnz	r3, 8001794 <_vfiprintf_r+0x78>
 8001758:	4629      	mov	r1, r5
 800175a:	4630      	mov	r0, r6
 800175c:	f000 fb4a 	bl	8001df4 <__swsetup_r>
 8001760:	b1c0      	cbz	r0, 8001794 <_vfiprintf_r+0x78>
 8001762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001764:	07dc      	lsls	r4, r3, #31
 8001766:	d50e      	bpl.n	8001786 <_vfiprintf_r+0x6a>
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	b01d      	add	sp, #116	; 0x74
 800176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001772:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <_vfiprintf_r+0x244>)
 8001774:	429d      	cmp	r5, r3
 8001776:	d101      	bne.n	800177c <_vfiprintf_r+0x60>
 8001778:	68b5      	ldr	r5, [r6, #8]
 800177a:	e7df      	b.n	800173c <_vfiprintf_r+0x20>
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <_vfiprintf_r+0x248>)
 800177e:	429d      	cmp	r5, r3
 8001780:	bf08      	it	eq
 8001782:	68f5      	ldreq	r5, [r6, #12]
 8001784:	e7da      	b.n	800173c <_vfiprintf_r+0x20>
 8001786:	89ab      	ldrh	r3, [r5, #12]
 8001788:	0598      	lsls	r0, r3, #22
 800178a:	d4ed      	bmi.n	8001768 <_vfiprintf_r+0x4c>
 800178c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800178e:	f7ff ff8e 	bl	80016ae <__retarget_lock_release_recursive>
 8001792:	e7e9      	b.n	8001768 <_vfiprintf_r+0x4c>
 8001794:	2300      	movs	r3, #0
 8001796:	9309      	str	r3, [sp, #36]	; 0x24
 8001798:	2320      	movs	r3, #32
 800179a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800179e:	f8cd 800c 	str.w	r8, [sp, #12]
 80017a2:	2330      	movs	r3, #48	; 0x30
 80017a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001968 <_vfiprintf_r+0x24c>
 80017a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017ac:	f04f 0901 	mov.w	r9, #1
 80017b0:	4623      	mov	r3, r4
 80017b2:	469a      	mov	sl, r3
 80017b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017b8:	b10a      	cbz	r2, 80017be <_vfiprintf_r+0xa2>
 80017ba:	2a25      	cmp	r2, #37	; 0x25
 80017bc:	d1f9      	bne.n	80017b2 <_vfiprintf_r+0x96>
 80017be:	ebba 0b04 	subs.w	fp, sl, r4
 80017c2:	d00b      	beq.n	80017dc <_vfiprintf_r+0xc0>
 80017c4:	465b      	mov	r3, fp
 80017c6:	4622      	mov	r2, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	4630      	mov	r0, r6
 80017cc:	f7ff ff93 	bl	80016f6 <__sfputs_r>
 80017d0:	3001      	adds	r0, #1
 80017d2:	f000 80aa 	beq.w	800192a <_vfiprintf_r+0x20e>
 80017d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017d8:	445a      	add	r2, fp
 80017da:	9209      	str	r2, [sp, #36]	; 0x24
 80017dc:	f89a 3000 	ldrb.w	r3, [sl]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a2 	beq.w	800192a <_vfiprintf_r+0x20e>
 80017e6:	2300      	movs	r3, #0
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017f0:	f10a 0a01 	add.w	sl, sl, #1
 80017f4:	9304      	str	r3, [sp, #16]
 80017f6:	9307      	str	r3, [sp, #28]
 80017f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017fc:	931a      	str	r3, [sp, #104]	; 0x68
 80017fe:	4654      	mov	r4, sl
 8001800:	2205      	movs	r2, #5
 8001802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001806:	4858      	ldr	r0, [pc, #352]	; (8001968 <_vfiprintf_r+0x24c>)
 8001808:	f7fe fcf2 	bl	80001f0 <memchr>
 800180c:	9a04      	ldr	r2, [sp, #16]
 800180e:	b9d8      	cbnz	r0, 8001848 <_vfiprintf_r+0x12c>
 8001810:	06d1      	lsls	r1, r2, #27
 8001812:	bf44      	itt	mi
 8001814:	2320      	movmi	r3, #32
 8001816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800181a:	0713      	lsls	r3, r2, #28
 800181c:	bf44      	itt	mi
 800181e:	232b      	movmi	r3, #43	; 0x2b
 8001820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001824:	f89a 3000 	ldrb.w	r3, [sl]
 8001828:	2b2a      	cmp	r3, #42	; 0x2a
 800182a:	d015      	beq.n	8001858 <_vfiprintf_r+0x13c>
 800182c:	9a07      	ldr	r2, [sp, #28]
 800182e:	4654      	mov	r4, sl
 8001830:	2000      	movs	r0, #0
 8001832:	f04f 0c0a 	mov.w	ip, #10
 8001836:	4621      	mov	r1, r4
 8001838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800183c:	3b30      	subs	r3, #48	; 0x30
 800183e:	2b09      	cmp	r3, #9
 8001840:	d94e      	bls.n	80018e0 <_vfiprintf_r+0x1c4>
 8001842:	b1b0      	cbz	r0, 8001872 <_vfiprintf_r+0x156>
 8001844:	9207      	str	r2, [sp, #28]
 8001846:	e014      	b.n	8001872 <_vfiprintf_r+0x156>
 8001848:	eba0 0308 	sub.w	r3, r0, r8
 800184c:	fa09 f303 	lsl.w	r3, r9, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	9304      	str	r3, [sp, #16]
 8001854:	46a2      	mov	sl, r4
 8001856:	e7d2      	b.n	80017fe <_vfiprintf_r+0xe2>
 8001858:	9b03      	ldr	r3, [sp, #12]
 800185a:	1d19      	adds	r1, r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	9103      	str	r1, [sp, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	bfbb      	ittet	lt
 8001864:	425b      	neglt	r3, r3
 8001866:	f042 0202 	orrlt.w	r2, r2, #2
 800186a:	9307      	strge	r3, [sp, #28]
 800186c:	9307      	strlt	r3, [sp, #28]
 800186e:	bfb8      	it	lt
 8001870:	9204      	strlt	r2, [sp, #16]
 8001872:	7823      	ldrb	r3, [r4, #0]
 8001874:	2b2e      	cmp	r3, #46	; 0x2e
 8001876:	d10c      	bne.n	8001892 <_vfiprintf_r+0x176>
 8001878:	7863      	ldrb	r3, [r4, #1]
 800187a:	2b2a      	cmp	r3, #42	; 0x2a
 800187c:	d135      	bne.n	80018ea <_vfiprintf_r+0x1ce>
 800187e:	9b03      	ldr	r3, [sp, #12]
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	9203      	str	r2, [sp, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	bfb8      	it	lt
 800188a:	f04f 33ff 	movlt.w	r3, #4294967295
 800188e:	3402      	adds	r4, #2
 8001890:	9305      	str	r3, [sp, #20]
 8001892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001978 <_vfiprintf_r+0x25c>
 8001896:	7821      	ldrb	r1, [r4, #0]
 8001898:	2203      	movs	r2, #3
 800189a:	4650      	mov	r0, sl
 800189c:	f7fe fca8 	bl	80001f0 <memchr>
 80018a0:	b140      	cbz	r0, 80018b4 <_vfiprintf_r+0x198>
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	eba0 000a 	sub.w	r0, r0, sl
 80018a8:	fa03 f000 	lsl.w	r0, r3, r0
 80018ac:	9b04      	ldr	r3, [sp, #16]
 80018ae:	4303      	orrs	r3, r0
 80018b0:	3401      	adds	r4, #1
 80018b2:	9304      	str	r3, [sp, #16]
 80018b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018b8:	482c      	ldr	r0, [pc, #176]	; (800196c <_vfiprintf_r+0x250>)
 80018ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018be:	2206      	movs	r2, #6
 80018c0:	f7fe fc96 	bl	80001f0 <memchr>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d03f      	beq.n	8001948 <_vfiprintf_r+0x22c>
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <_vfiprintf_r+0x254>)
 80018ca:	bb1b      	cbnz	r3, 8001914 <_vfiprintf_r+0x1f8>
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	3307      	adds	r3, #7
 80018d0:	f023 0307 	bic.w	r3, r3, #7
 80018d4:	3308      	adds	r3, #8
 80018d6:	9303      	str	r3, [sp, #12]
 80018d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018da:	443b      	add	r3, r7
 80018dc:	9309      	str	r3, [sp, #36]	; 0x24
 80018de:	e767      	b.n	80017b0 <_vfiprintf_r+0x94>
 80018e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80018e4:	460c      	mov	r4, r1
 80018e6:	2001      	movs	r0, #1
 80018e8:	e7a5      	b.n	8001836 <_vfiprintf_r+0x11a>
 80018ea:	2300      	movs	r3, #0
 80018ec:	3401      	adds	r4, #1
 80018ee:	9305      	str	r3, [sp, #20]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0c0a 	mov.w	ip, #10
 80018f6:	4620      	mov	r0, r4
 80018f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018fc:	3a30      	subs	r2, #48	; 0x30
 80018fe:	2a09      	cmp	r2, #9
 8001900:	d903      	bls.n	800190a <_vfiprintf_r+0x1ee>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0c5      	beq.n	8001892 <_vfiprintf_r+0x176>
 8001906:	9105      	str	r1, [sp, #20]
 8001908:	e7c3      	b.n	8001892 <_vfiprintf_r+0x176>
 800190a:	fb0c 2101 	mla	r1, ip, r1, r2
 800190e:	4604      	mov	r4, r0
 8001910:	2301      	movs	r3, #1
 8001912:	e7f0      	b.n	80018f6 <_vfiprintf_r+0x1da>
 8001914:	ab03      	add	r3, sp, #12
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	462a      	mov	r2, r5
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <_vfiprintf_r+0x258>)
 800191c:	a904      	add	r1, sp, #16
 800191e:	4630      	mov	r0, r6
 8001920:	f3af 8000 	nop.w
 8001924:	4607      	mov	r7, r0
 8001926:	1c78      	adds	r0, r7, #1
 8001928:	d1d6      	bne.n	80018d8 <_vfiprintf_r+0x1bc>
 800192a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800192c:	07d9      	lsls	r1, r3, #31
 800192e:	d405      	bmi.n	800193c <_vfiprintf_r+0x220>
 8001930:	89ab      	ldrh	r3, [r5, #12]
 8001932:	059a      	lsls	r2, r3, #22
 8001934:	d402      	bmi.n	800193c <_vfiprintf_r+0x220>
 8001936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001938:	f7ff feb9 	bl	80016ae <__retarget_lock_release_recursive>
 800193c:	89ab      	ldrh	r3, [r5, #12]
 800193e:	065b      	lsls	r3, r3, #25
 8001940:	f53f af12 	bmi.w	8001768 <_vfiprintf_r+0x4c>
 8001944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001946:	e711      	b.n	800176c <_vfiprintf_r+0x50>
 8001948:	ab03      	add	r3, sp, #12
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	462a      	mov	r2, r5
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <_vfiprintf_r+0x258>)
 8001950:	a904      	add	r1, sp, #16
 8001952:	4630      	mov	r0, r6
 8001954:	f000 f880 	bl	8001a58 <_printf_i>
 8001958:	e7e4      	b.n	8001924 <_vfiprintf_r+0x208>
 800195a:	bf00      	nop
 800195c:	080027b8 	.word	0x080027b8
 8001960:	080027d8 	.word	0x080027d8
 8001964:	08002798 	.word	0x08002798
 8001968:	080027f8 	.word	0x080027f8
 800196c:	08002802 	.word	0x08002802
 8001970:	00000000 	.word	0x00000000
 8001974:	080016f7 	.word	0x080016f7
 8001978:	080027fe 	.word	0x080027fe

0800197c <_printf_common>:
 800197c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001980:	4616      	mov	r6, r2
 8001982:	4699      	mov	r9, r3
 8001984:	688a      	ldr	r2, [r1, #8]
 8001986:	690b      	ldr	r3, [r1, #16]
 8001988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800198c:	4293      	cmp	r3, r2
 800198e:	bfb8      	it	lt
 8001990:	4613      	movlt	r3, r2
 8001992:	6033      	str	r3, [r6, #0]
 8001994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001998:	4607      	mov	r7, r0
 800199a:	460c      	mov	r4, r1
 800199c:	b10a      	cbz	r2, 80019a2 <_printf_common+0x26>
 800199e:	3301      	adds	r3, #1
 80019a0:	6033      	str	r3, [r6, #0]
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	0699      	lsls	r1, r3, #26
 80019a6:	bf42      	ittt	mi
 80019a8:	6833      	ldrmi	r3, [r6, #0]
 80019aa:	3302      	addmi	r3, #2
 80019ac:	6033      	strmi	r3, [r6, #0]
 80019ae:	6825      	ldr	r5, [r4, #0]
 80019b0:	f015 0506 	ands.w	r5, r5, #6
 80019b4:	d106      	bne.n	80019c4 <_printf_common+0x48>
 80019b6:	f104 0a19 	add.w	sl, r4, #25
 80019ba:	68e3      	ldr	r3, [r4, #12]
 80019bc:	6832      	ldr	r2, [r6, #0]
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	42ab      	cmp	r3, r5
 80019c2:	dc26      	bgt.n	8001a12 <_printf_common+0x96>
 80019c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019c8:	1e13      	subs	r3, r2, #0
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	bf18      	it	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	0692      	lsls	r2, r2, #26
 80019d2:	d42b      	bmi.n	8001a2c <_printf_common+0xb0>
 80019d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019d8:	4649      	mov	r1, r9
 80019da:	4638      	mov	r0, r7
 80019dc:	47c0      	blx	r8
 80019de:	3001      	adds	r0, #1
 80019e0:	d01e      	beq.n	8001a20 <_printf_common+0xa4>
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	68e5      	ldr	r5, [r4, #12]
 80019e6:	6832      	ldr	r2, [r6, #0]
 80019e8:	f003 0306 	and.w	r3, r3, #6
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	bf08      	it	eq
 80019f0:	1aad      	subeq	r5, r5, r2
 80019f2:	68a3      	ldr	r3, [r4, #8]
 80019f4:	6922      	ldr	r2, [r4, #16]
 80019f6:	bf0c      	ite	eq
 80019f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019fc:	2500      	movne	r5, #0
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bfc4      	itt	gt
 8001a02:	1a9b      	subgt	r3, r3, r2
 8001a04:	18ed      	addgt	r5, r5, r3
 8001a06:	2600      	movs	r6, #0
 8001a08:	341a      	adds	r4, #26
 8001a0a:	42b5      	cmp	r5, r6
 8001a0c:	d11a      	bne.n	8001a44 <_printf_common+0xc8>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e008      	b.n	8001a24 <_printf_common+0xa8>
 8001a12:	2301      	movs	r3, #1
 8001a14:	4652      	mov	r2, sl
 8001a16:	4649      	mov	r1, r9
 8001a18:	4638      	mov	r0, r7
 8001a1a:	47c0      	blx	r8
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	d103      	bne.n	8001a28 <_printf_common+0xac>
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a28:	3501      	adds	r5, #1
 8001a2a:	e7c6      	b.n	80019ba <_printf_common+0x3e>
 8001a2c:	18e1      	adds	r1, r4, r3
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	2030      	movs	r0, #48	; 0x30
 8001a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a36:	4422      	add	r2, r4
 8001a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a40:	3302      	adds	r3, #2
 8001a42:	e7c7      	b.n	80019d4 <_printf_common+0x58>
 8001a44:	2301      	movs	r3, #1
 8001a46:	4622      	mov	r2, r4
 8001a48:	4649      	mov	r1, r9
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	47c0      	blx	r8
 8001a4e:	3001      	adds	r0, #1
 8001a50:	d0e6      	beq.n	8001a20 <_printf_common+0xa4>
 8001a52:	3601      	adds	r6, #1
 8001a54:	e7d9      	b.n	8001a0a <_printf_common+0x8e>
	...

08001a58 <_printf_i>:
 8001a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a5c:	7e0f      	ldrb	r7, [r1, #24]
 8001a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a60:	2f78      	cmp	r7, #120	; 0x78
 8001a62:	4691      	mov	r9, r2
 8001a64:	4680      	mov	r8, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	469a      	mov	sl, r3
 8001a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a6e:	d807      	bhi.n	8001a80 <_printf_i+0x28>
 8001a70:	2f62      	cmp	r7, #98	; 0x62
 8001a72:	d80a      	bhi.n	8001a8a <_printf_i+0x32>
 8001a74:	2f00      	cmp	r7, #0
 8001a76:	f000 80d8 	beq.w	8001c2a <_printf_i+0x1d2>
 8001a7a:	2f58      	cmp	r7, #88	; 0x58
 8001a7c:	f000 80a3 	beq.w	8001bc6 <_printf_i+0x16e>
 8001a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a88:	e03a      	b.n	8001b00 <_printf_i+0xa8>
 8001a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a8e:	2b15      	cmp	r3, #21
 8001a90:	d8f6      	bhi.n	8001a80 <_printf_i+0x28>
 8001a92:	a101      	add	r1, pc, #4	; (adr r1, 8001a98 <_printf_i+0x40>)
 8001a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a98:	08001af1 	.word	0x08001af1
 8001a9c:	08001b05 	.word	0x08001b05
 8001aa0:	08001a81 	.word	0x08001a81
 8001aa4:	08001a81 	.word	0x08001a81
 8001aa8:	08001a81 	.word	0x08001a81
 8001aac:	08001a81 	.word	0x08001a81
 8001ab0:	08001b05 	.word	0x08001b05
 8001ab4:	08001a81 	.word	0x08001a81
 8001ab8:	08001a81 	.word	0x08001a81
 8001abc:	08001a81 	.word	0x08001a81
 8001ac0:	08001a81 	.word	0x08001a81
 8001ac4:	08001c11 	.word	0x08001c11
 8001ac8:	08001b35 	.word	0x08001b35
 8001acc:	08001bf3 	.word	0x08001bf3
 8001ad0:	08001a81 	.word	0x08001a81
 8001ad4:	08001a81 	.word	0x08001a81
 8001ad8:	08001c33 	.word	0x08001c33
 8001adc:	08001a81 	.word	0x08001a81
 8001ae0:	08001b35 	.word	0x08001b35
 8001ae4:	08001a81 	.word	0x08001a81
 8001ae8:	08001a81 	.word	0x08001a81
 8001aec:	08001bfb 	.word	0x08001bfb
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	602a      	str	r2, [r5, #0]
 8001af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0a3      	b.n	8001c4c <_printf_i+0x1f4>
 8001b04:	6820      	ldr	r0, [r4, #0]
 8001b06:	6829      	ldr	r1, [r5, #0]
 8001b08:	0606      	lsls	r6, r0, #24
 8001b0a:	f101 0304 	add.w	r3, r1, #4
 8001b0e:	d50a      	bpl.n	8001b26 <_printf_i+0xce>
 8001b10:	680e      	ldr	r6, [r1, #0]
 8001b12:	602b      	str	r3, [r5, #0]
 8001b14:	2e00      	cmp	r6, #0
 8001b16:	da03      	bge.n	8001b20 <_printf_i+0xc8>
 8001b18:	232d      	movs	r3, #45	; 0x2d
 8001b1a:	4276      	negs	r6, r6
 8001b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b20:	485e      	ldr	r0, [pc, #376]	; (8001c9c <_printf_i+0x244>)
 8001b22:	230a      	movs	r3, #10
 8001b24:	e019      	b.n	8001b5a <_printf_i+0x102>
 8001b26:	680e      	ldr	r6, [r1, #0]
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b2e:	bf18      	it	ne
 8001b30:	b236      	sxthne	r6, r6
 8001b32:	e7ef      	b.n	8001b14 <_printf_i+0xbc>
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	6820      	ldr	r0, [r4, #0]
 8001b38:	1d19      	adds	r1, r3, #4
 8001b3a:	6029      	str	r1, [r5, #0]
 8001b3c:	0601      	lsls	r1, r0, #24
 8001b3e:	d501      	bpl.n	8001b44 <_printf_i+0xec>
 8001b40:	681e      	ldr	r6, [r3, #0]
 8001b42:	e002      	b.n	8001b4a <_printf_i+0xf2>
 8001b44:	0646      	lsls	r6, r0, #25
 8001b46:	d5fb      	bpl.n	8001b40 <_printf_i+0xe8>
 8001b48:	881e      	ldrh	r6, [r3, #0]
 8001b4a:	4854      	ldr	r0, [pc, #336]	; (8001c9c <_printf_i+0x244>)
 8001b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8001b4e:	bf0c      	ite	eq
 8001b50:	2308      	moveq	r3, #8
 8001b52:	230a      	movne	r3, #10
 8001b54:	2100      	movs	r1, #0
 8001b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b5a:	6865      	ldr	r5, [r4, #4]
 8001b5c:	60a5      	str	r5, [r4, #8]
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	bfa2      	ittt	ge
 8001b62:	6821      	ldrge	r1, [r4, #0]
 8001b64:	f021 0104 	bicge.w	r1, r1, #4
 8001b68:	6021      	strge	r1, [r4, #0]
 8001b6a:	b90e      	cbnz	r6, 8001b70 <_printf_i+0x118>
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	d04d      	beq.n	8001c0c <_printf_i+0x1b4>
 8001b70:	4615      	mov	r5, r2
 8001b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b76:	fb03 6711 	mls	r7, r3, r1, r6
 8001b7a:	5dc7      	ldrb	r7, [r0, r7]
 8001b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b80:	4637      	mov	r7, r6
 8001b82:	42bb      	cmp	r3, r7
 8001b84:	460e      	mov	r6, r1
 8001b86:	d9f4      	bls.n	8001b72 <_printf_i+0x11a>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d10b      	bne.n	8001ba4 <_printf_i+0x14c>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	07de      	lsls	r6, r3, #31
 8001b90:	d508      	bpl.n	8001ba4 <_printf_i+0x14c>
 8001b92:	6923      	ldr	r3, [r4, #16]
 8001b94:	6861      	ldr	r1, [r4, #4]
 8001b96:	4299      	cmp	r1, r3
 8001b98:	bfde      	ittt	le
 8001b9a:	2330      	movle	r3, #48	; 0x30
 8001b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ba4:	1b52      	subs	r2, r2, r5
 8001ba6:	6122      	str	r2, [r4, #16]
 8001ba8:	f8cd a000 	str.w	sl, [sp]
 8001bac:	464b      	mov	r3, r9
 8001bae:	aa03      	add	r2, sp, #12
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	4640      	mov	r0, r8
 8001bb4:	f7ff fee2 	bl	800197c <_printf_common>
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d14c      	bne.n	8001c56 <_printf_i+0x1fe>
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	b004      	add	sp, #16
 8001bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc6:	4835      	ldr	r0, [pc, #212]	; (8001c9c <_printf_i+0x244>)
 8001bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bcc:	6829      	ldr	r1, [r5, #0]
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bd4:	6029      	str	r1, [r5, #0]
 8001bd6:	061d      	lsls	r5, r3, #24
 8001bd8:	d514      	bpl.n	8001c04 <_printf_i+0x1ac>
 8001bda:	07df      	lsls	r7, r3, #31
 8001bdc:	bf44      	itt	mi
 8001bde:	f043 0320 	orrmi.w	r3, r3, #32
 8001be2:	6023      	strmi	r3, [r4, #0]
 8001be4:	b91e      	cbnz	r6, 8001bee <_printf_i+0x196>
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	f023 0320 	bic.w	r3, r3, #32
 8001bec:	6023      	str	r3, [r4, #0]
 8001bee:	2310      	movs	r3, #16
 8001bf0:	e7b0      	b.n	8001b54 <_printf_i+0xfc>
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	2378      	movs	r3, #120	; 0x78
 8001bfc:	4828      	ldr	r0, [pc, #160]	; (8001ca0 <_printf_i+0x248>)
 8001bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c02:	e7e3      	b.n	8001bcc <_printf_i+0x174>
 8001c04:	0659      	lsls	r1, r3, #25
 8001c06:	bf48      	it	mi
 8001c08:	b2b6      	uxthmi	r6, r6
 8001c0a:	e7e6      	b.n	8001bda <_printf_i+0x182>
 8001c0c:	4615      	mov	r5, r2
 8001c0e:	e7bb      	b.n	8001b88 <_printf_i+0x130>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	6826      	ldr	r6, [r4, #0]
 8001c14:	6961      	ldr	r1, [r4, #20]
 8001c16:	1d18      	adds	r0, r3, #4
 8001c18:	6028      	str	r0, [r5, #0]
 8001c1a:	0635      	lsls	r5, r6, #24
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	d501      	bpl.n	8001c24 <_printf_i+0x1cc>
 8001c20:	6019      	str	r1, [r3, #0]
 8001c22:	e002      	b.n	8001c2a <_printf_i+0x1d2>
 8001c24:	0670      	lsls	r0, r6, #25
 8001c26:	d5fb      	bpl.n	8001c20 <_printf_i+0x1c8>
 8001c28:	8019      	strh	r1, [r3, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	6123      	str	r3, [r4, #16]
 8001c2e:	4615      	mov	r5, r2
 8001c30:	e7ba      	b.n	8001ba8 <_printf_i+0x150>
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	1d1a      	adds	r2, r3, #4
 8001c36:	602a      	str	r2, [r5, #0]
 8001c38:	681d      	ldr	r5, [r3, #0]
 8001c3a:	6862      	ldr	r2, [r4, #4]
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f7fe fad6 	bl	80001f0 <memchr>
 8001c44:	b108      	cbz	r0, 8001c4a <_printf_i+0x1f2>
 8001c46:	1b40      	subs	r0, r0, r5
 8001c48:	6060      	str	r0, [r4, #4]
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	6123      	str	r3, [r4, #16]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c54:	e7a8      	b.n	8001ba8 <_printf_i+0x150>
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	4640      	mov	r0, r8
 8001c5e:	47d0      	blx	sl
 8001c60:	3001      	adds	r0, #1
 8001c62:	d0ab      	beq.n	8001bbc <_printf_i+0x164>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	079b      	lsls	r3, r3, #30
 8001c68:	d413      	bmi.n	8001c92 <_printf_i+0x23a>
 8001c6a:	68e0      	ldr	r0, [r4, #12]
 8001c6c:	9b03      	ldr	r3, [sp, #12]
 8001c6e:	4298      	cmp	r0, r3
 8001c70:	bfb8      	it	lt
 8001c72:	4618      	movlt	r0, r3
 8001c74:	e7a4      	b.n	8001bc0 <_printf_i+0x168>
 8001c76:	2301      	movs	r3, #1
 8001c78:	4632      	mov	r2, r6
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	4640      	mov	r0, r8
 8001c7e:	47d0      	blx	sl
 8001c80:	3001      	adds	r0, #1
 8001c82:	d09b      	beq.n	8001bbc <_printf_i+0x164>
 8001c84:	3501      	adds	r5, #1
 8001c86:	68e3      	ldr	r3, [r4, #12]
 8001c88:	9903      	ldr	r1, [sp, #12]
 8001c8a:	1a5b      	subs	r3, r3, r1
 8001c8c:	42ab      	cmp	r3, r5
 8001c8e:	dcf2      	bgt.n	8001c76 <_printf_i+0x21e>
 8001c90:	e7eb      	b.n	8001c6a <_printf_i+0x212>
 8001c92:	2500      	movs	r5, #0
 8001c94:	f104 0619 	add.w	r6, r4, #25
 8001c98:	e7f5      	b.n	8001c86 <_printf_i+0x22e>
 8001c9a:	bf00      	nop
 8001c9c:	08002809 	.word	0x08002809
 8001ca0:	0800281a 	.word	0x0800281a

08001ca4 <__sread>:
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cac:	f000 fa5a 	bl	8002164 <_read_r>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	bfab      	itete	ge
 8001cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8001cb8:	181b      	addge	r3, r3, r0
 8001cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cbe:	bfac      	ite	ge
 8001cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cc2:	81a3      	strhlt	r3, [r4, #12]
 8001cc4:	bd10      	pop	{r4, pc}

08001cc6 <__swrite>:
 8001cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cca:	461f      	mov	r7, r3
 8001ccc:	898b      	ldrh	r3, [r1, #12]
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4616      	mov	r6, r2
 8001cd6:	d505      	bpl.n	8001ce4 <__swrite+0x1e>
 8001cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f000 f9c8 	bl	8002074 <_lseek_r>
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cee:	81a3      	strh	r3, [r4, #12]
 8001cf0:	4632      	mov	r2, r6
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfa:	f000 b869 	b.w	8001dd0 <_write_r>

08001cfe <__sseek>:
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	460c      	mov	r4, r1
 8001d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d06:	f000 f9b5 	bl	8002074 <_lseek_r>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	bf15      	itete	ne
 8001d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d1a:	81a3      	strheq	r3, [r4, #12]
 8001d1c:	bf18      	it	ne
 8001d1e:	81a3      	strhne	r3, [r4, #12]
 8001d20:	bd10      	pop	{r4, pc}

08001d22 <__sclose>:
 8001d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d26:	f000 b8d3 	b.w	8001ed0 <_close_r>
	...

08001d2c <__swbuf_r>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	460e      	mov	r6, r1
 8001d30:	4614      	mov	r4, r2
 8001d32:	4605      	mov	r5, r0
 8001d34:	b118      	cbz	r0, 8001d3e <__swbuf_r+0x12>
 8001d36:	6983      	ldr	r3, [r0, #24]
 8001d38:	b90b      	cbnz	r3, 8001d3e <__swbuf_r+0x12>
 8001d3a:	f7ff fc19 	bl	8001570 <__sinit>
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <__swbuf_r+0x98>)
 8001d40:	429c      	cmp	r4, r3
 8001d42:	d12b      	bne.n	8001d9c <__swbuf_r+0x70>
 8001d44:	686c      	ldr	r4, [r5, #4]
 8001d46:	69a3      	ldr	r3, [r4, #24]
 8001d48:	60a3      	str	r3, [r4, #8]
 8001d4a:	89a3      	ldrh	r3, [r4, #12]
 8001d4c:	071a      	lsls	r2, r3, #28
 8001d4e:	d52f      	bpl.n	8001db0 <__swbuf_r+0x84>
 8001d50:	6923      	ldr	r3, [r4, #16]
 8001d52:	b36b      	cbz	r3, 8001db0 <__swbuf_r+0x84>
 8001d54:	6923      	ldr	r3, [r4, #16]
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	1ac0      	subs	r0, r0, r3
 8001d5a:	6963      	ldr	r3, [r4, #20]
 8001d5c:	b2f6      	uxtb	r6, r6
 8001d5e:	4283      	cmp	r3, r0
 8001d60:	4637      	mov	r7, r6
 8001d62:	dc04      	bgt.n	8001d6e <__swbuf_r+0x42>
 8001d64:	4621      	mov	r1, r4
 8001d66:	4628      	mov	r0, r5
 8001d68:	f000 f948 	bl	8001ffc <_fflush_r>
 8001d6c:	bb30      	cbnz	r0, 8001dbc <__swbuf_r+0x90>
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60a3      	str	r3, [r4, #8]
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	6022      	str	r2, [r4, #0]
 8001d7a:	701e      	strb	r6, [r3, #0]
 8001d7c:	6963      	ldr	r3, [r4, #20]
 8001d7e:	3001      	adds	r0, #1
 8001d80:	4283      	cmp	r3, r0
 8001d82:	d004      	beq.n	8001d8e <__swbuf_r+0x62>
 8001d84:	89a3      	ldrh	r3, [r4, #12]
 8001d86:	07db      	lsls	r3, r3, #31
 8001d88:	d506      	bpl.n	8001d98 <__swbuf_r+0x6c>
 8001d8a:	2e0a      	cmp	r6, #10
 8001d8c:	d104      	bne.n	8001d98 <__swbuf_r+0x6c>
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4628      	mov	r0, r5
 8001d92:	f000 f933 	bl	8001ffc <_fflush_r>
 8001d96:	b988      	cbnz	r0, 8001dbc <__swbuf_r+0x90>
 8001d98:	4638      	mov	r0, r7
 8001d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <__swbuf_r+0x9c>)
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	d101      	bne.n	8001da6 <__swbuf_r+0x7a>
 8001da2:	68ac      	ldr	r4, [r5, #8]
 8001da4:	e7cf      	b.n	8001d46 <__swbuf_r+0x1a>
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <__swbuf_r+0xa0>)
 8001da8:	429c      	cmp	r4, r3
 8001daa:	bf08      	it	eq
 8001dac:	68ec      	ldreq	r4, [r5, #12]
 8001dae:	e7ca      	b.n	8001d46 <__swbuf_r+0x1a>
 8001db0:	4621      	mov	r1, r4
 8001db2:	4628      	mov	r0, r5
 8001db4:	f000 f81e 	bl	8001df4 <__swsetup_r>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d0cb      	beq.n	8001d54 <__swbuf_r+0x28>
 8001dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8001dc0:	e7ea      	b.n	8001d98 <__swbuf_r+0x6c>
 8001dc2:	bf00      	nop
 8001dc4:	080027b8 	.word	0x080027b8
 8001dc8:	080027d8 	.word	0x080027d8
 8001dcc:	08002798 	.word	0x08002798

08001dd0 <_write_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4d07      	ldr	r5, [pc, #28]	; (8001df0 <_write_r+0x20>)
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	4611      	mov	r1, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	602a      	str	r2, [r5, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f000 fa9b 	bl	800231a <_write>
 8001de4:	1c43      	adds	r3, r0, #1
 8001de6:	d102      	bne.n	8001dee <_write_r+0x1e>
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	b103      	cbz	r3, 8001dee <_write_r+0x1e>
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	bd38      	pop	{r3, r4, r5, pc}
 8001df0:	200000bc 	.word	0x200000bc

08001df4 <__swsetup_r>:
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <__swsetup_r+0xcc>)
 8001df6:	b570      	push	{r4, r5, r6, lr}
 8001df8:	681d      	ldr	r5, [r3, #0]
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	b125      	cbz	r5, 8001e0a <__swsetup_r+0x16>
 8001e00:	69ab      	ldr	r3, [r5, #24]
 8001e02:	b913      	cbnz	r3, 8001e0a <__swsetup_r+0x16>
 8001e04:	4628      	mov	r0, r5
 8001e06:	f7ff fbb3 	bl	8001570 <__sinit>
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <__swsetup_r+0xd0>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d10f      	bne.n	8001e30 <__swsetup_r+0x3c>
 8001e10:	686c      	ldr	r4, [r5, #4]
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e18:	0719      	lsls	r1, r3, #28
 8001e1a:	d42c      	bmi.n	8001e76 <__swsetup_r+0x82>
 8001e1c:	06dd      	lsls	r5, r3, #27
 8001e1e:	d411      	bmi.n	8001e44 <__swsetup_r+0x50>
 8001e20:	2309      	movs	r3, #9
 8001e22:	6033      	str	r3, [r6, #0]
 8001e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e28:	81a3      	strh	r3, [r4, #12]
 8001e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2e:	e03e      	b.n	8001eae <__swsetup_r+0xba>
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <__swsetup_r+0xd4>)
 8001e32:	429c      	cmp	r4, r3
 8001e34:	d101      	bne.n	8001e3a <__swsetup_r+0x46>
 8001e36:	68ac      	ldr	r4, [r5, #8]
 8001e38:	e7eb      	b.n	8001e12 <__swsetup_r+0x1e>
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <__swsetup_r+0xd8>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	bf08      	it	eq
 8001e40:	68ec      	ldreq	r4, [r5, #12]
 8001e42:	e7e6      	b.n	8001e12 <__swsetup_r+0x1e>
 8001e44:	0758      	lsls	r0, r3, #29
 8001e46:	d512      	bpl.n	8001e6e <__swsetup_r+0x7a>
 8001e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4a:	b141      	cbz	r1, 8001e5e <__swsetup_r+0x6a>
 8001e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e50:	4299      	cmp	r1, r3
 8001e52:	d002      	beq.n	8001e5a <__swsetup_r+0x66>
 8001e54:	4630      	mov	r0, r6
 8001e56:	f7ff fa2b 	bl	80012b0 <_free_r>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e5e:	89a3      	ldrh	r3, [r4, #12]
 8001e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e64:	81a3      	strh	r3, [r4, #12]
 8001e66:	2300      	movs	r3, #0
 8001e68:	6063      	str	r3, [r4, #4]
 8001e6a:	6923      	ldr	r3, [r4, #16]
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	81a3      	strh	r3, [r4, #12]
 8001e76:	6923      	ldr	r3, [r4, #16]
 8001e78:	b94b      	cbnz	r3, 8001e8e <__swsetup_r+0x9a>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e84:	d003      	beq.n	8001e8e <__swsetup_r+0x9a>
 8001e86:	4621      	mov	r1, r4
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f000 f92b 	bl	80020e4 <__smakebuf_r>
 8001e8e:	89a0      	ldrh	r0, [r4, #12]
 8001e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e94:	f010 0301 	ands.w	r3, r0, #1
 8001e98:	d00a      	beq.n	8001eb0 <__swsetup_r+0xbc>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60a3      	str	r3, [r4, #8]
 8001e9e:	6963      	ldr	r3, [r4, #20]
 8001ea0:	425b      	negs	r3, r3
 8001ea2:	61a3      	str	r3, [r4, #24]
 8001ea4:	6923      	ldr	r3, [r4, #16]
 8001ea6:	b943      	cbnz	r3, 8001eba <__swsetup_r+0xc6>
 8001ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001eac:	d1ba      	bne.n	8001e24 <__swsetup_r+0x30>
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	0781      	lsls	r1, r0, #30
 8001eb2:	bf58      	it	pl
 8001eb4:	6963      	ldrpl	r3, [r4, #20]
 8001eb6:	60a3      	str	r3, [r4, #8]
 8001eb8:	e7f4      	b.n	8001ea4 <__swsetup_r+0xb0>
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e7f7      	b.n	8001eae <__swsetup_r+0xba>
 8001ebe:	bf00      	nop
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	080027b8 	.word	0x080027b8
 8001ec8:	080027d8 	.word	0x080027d8
 8001ecc:	08002798 	.word	0x08002798

08001ed0 <_close_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4d06      	ldr	r5, [pc, #24]	; (8001eec <_close_r+0x1c>)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	602b      	str	r3, [r5, #0]
 8001edc:	f000 fa4e 	bl	800237c <_close>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d102      	bne.n	8001eea <_close_r+0x1a>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	b103      	cbz	r3, 8001eea <_close_r+0x1a>
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	200000bc 	.word	0x200000bc

08001ef0 <__sflush_r>:
 8001ef0:	898a      	ldrh	r2, [r1, #12]
 8001ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef6:	4605      	mov	r5, r0
 8001ef8:	0710      	lsls	r0, r2, #28
 8001efa:	460c      	mov	r4, r1
 8001efc:	d458      	bmi.n	8001fb0 <__sflush_r+0xc0>
 8001efe:	684b      	ldr	r3, [r1, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dc05      	bgt.n	8001f10 <__sflush_r+0x20>
 8001f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dc02      	bgt.n	8001f10 <__sflush_r+0x20>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f12:	2e00      	cmp	r6, #0
 8001f14:	d0f9      	beq.n	8001f0a <__sflush_r+0x1a>
 8001f16:	2300      	movs	r3, #0
 8001f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f1c:	682f      	ldr	r7, [r5, #0]
 8001f1e:	602b      	str	r3, [r5, #0]
 8001f20:	d032      	beq.n	8001f88 <__sflush_r+0x98>
 8001f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	075a      	lsls	r2, r3, #29
 8001f28:	d505      	bpl.n	8001f36 <__sflush_r+0x46>
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	1ac0      	subs	r0, r0, r3
 8001f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f30:	b10b      	cbz	r3, 8001f36 <__sflush_r+0x46>
 8001f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f34:	1ac0      	subs	r0, r0, r3
 8001f36:	2300      	movs	r3, #0
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f3c:	6a21      	ldr	r1, [r4, #32]
 8001f3e:	4628      	mov	r0, r5
 8001f40:	47b0      	blx	r6
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	d106      	bne.n	8001f56 <__sflush_r+0x66>
 8001f48:	6829      	ldr	r1, [r5, #0]
 8001f4a:	291d      	cmp	r1, #29
 8001f4c:	d82c      	bhi.n	8001fa8 <__sflush_r+0xb8>
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <__sflush_r+0x108>)
 8001f50:	40ca      	lsrs	r2, r1
 8001f52:	07d6      	lsls	r6, r2, #31
 8001f54:	d528      	bpl.n	8001fa8 <__sflush_r+0xb8>
 8001f56:	2200      	movs	r2, #0
 8001f58:	6062      	str	r2, [r4, #4]
 8001f5a:	04d9      	lsls	r1, r3, #19
 8001f5c:	6922      	ldr	r2, [r4, #16]
 8001f5e:	6022      	str	r2, [r4, #0]
 8001f60:	d504      	bpl.n	8001f6c <__sflush_r+0x7c>
 8001f62:	1c42      	adds	r2, r0, #1
 8001f64:	d101      	bne.n	8001f6a <__sflush_r+0x7a>
 8001f66:	682b      	ldr	r3, [r5, #0]
 8001f68:	b903      	cbnz	r3, 8001f6c <__sflush_r+0x7c>
 8001f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f6e:	602f      	str	r7, [r5, #0]
 8001f70:	2900      	cmp	r1, #0
 8001f72:	d0ca      	beq.n	8001f0a <__sflush_r+0x1a>
 8001f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f78:	4299      	cmp	r1, r3
 8001f7a:	d002      	beq.n	8001f82 <__sflush_r+0x92>
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f7ff f997 	bl	80012b0 <_free_r>
 8001f82:	2000      	movs	r0, #0
 8001f84:	6360      	str	r0, [r4, #52]	; 0x34
 8001f86:	e7c1      	b.n	8001f0c <__sflush_r+0x1c>
 8001f88:	6a21      	ldr	r1, [r4, #32]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	47b0      	blx	r6
 8001f90:	1c41      	adds	r1, r0, #1
 8001f92:	d1c7      	bne.n	8001f24 <__sflush_r+0x34>
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0c4      	beq.n	8001f24 <__sflush_r+0x34>
 8001f9a:	2b1d      	cmp	r3, #29
 8001f9c:	d001      	beq.n	8001fa2 <__sflush_r+0xb2>
 8001f9e:	2b16      	cmp	r3, #22
 8001fa0:	d101      	bne.n	8001fa6 <__sflush_r+0xb6>
 8001fa2:	602f      	str	r7, [r5, #0]
 8001fa4:	e7b1      	b.n	8001f0a <__sflush_r+0x1a>
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	e7ad      	b.n	8001f0c <__sflush_r+0x1c>
 8001fb0:	690f      	ldr	r7, [r1, #16]
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d0a9      	beq.n	8001f0a <__sflush_r+0x1a>
 8001fb6:	0793      	lsls	r3, r2, #30
 8001fb8:	680e      	ldr	r6, [r1, #0]
 8001fba:	bf08      	it	eq
 8001fbc:	694b      	ldreq	r3, [r1, #20]
 8001fbe:	600f      	str	r7, [r1, #0]
 8001fc0:	bf18      	it	ne
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	eba6 0807 	sub.w	r8, r6, r7
 8001fc8:	608b      	str	r3, [r1, #8]
 8001fca:	f1b8 0f00 	cmp.w	r8, #0
 8001fce:	dd9c      	ble.n	8001f0a <__sflush_r+0x1a>
 8001fd0:	6a21      	ldr	r1, [r4, #32]
 8001fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	463a      	mov	r2, r7
 8001fd8:	4628      	mov	r0, r5
 8001fda:	47b0      	blx	r6
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	dc06      	bgt.n	8001fee <__sflush_r+0xfe>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	e78e      	b.n	8001f0c <__sflush_r+0x1c>
 8001fee:	4407      	add	r7, r0
 8001ff0:	eba8 0800 	sub.w	r8, r8, r0
 8001ff4:	e7e9      	b.n	8001fca <__sflush_r+0xda>
 8001ff6:	bf00      	nop
 8001ff8:	20400001 	.word	0x20400001

08001ffc <_fflush_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	690b      	ldr	r3, [r1, #16]
 8002000:	4605      	mov	r5, r0
 8002002:	460c      	mov	r4, r1
 8002004:	b913      	cbnz	r3, 800200c <_fflush_r+0x10>
 8002006:	2500      	movs	r5, #0
 8002008:	4628      	mov	r0, r5
 800200a:	bd38      	pop	{r3, r4, r5, pc}
 800200c:	b118      	cbz	r0, 8002016 <_fflush_r+0x1a>
 800200e:	6983      	ldr	r3, [r0, #24]
 8002010:	b90b      	cbnz	r3, 8002016 <_fflush_r+0x1a>
 8002012:	f7ff faad 	bl	8001570 <__sinit>
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <_fflush_r+0x6c>)
 8002018:	429c      	cmp	r4, r3
 800201a:	d11b      	bne.n	8002054 <_fflush_r+0x58>
 800201c:	686c      	ldr	r4, [r5, #4]
 800201e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ef      	beq.n	8002006 <_fflush_r+0xa>
 8002026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002028:	07d0      	lsls	r0, r2, #31
 800202a:	d404      	bmi.n	8002036 <_fflush_r+0x3a>
 800202c:	0599      	lsls	r1, r3, #22
 800202e:	d402      	bmi.n	8002036 <_fflush_r+0x3a>
 8002030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002032:	f7ff fb3b 	bl	80016ac <__retarget_lock_acquire_recursive>
 8002036:	4628      	mov	r0, r5
 8002038:	4621      	mov	r1, r4
 800203a:	f7ff ff59 	bl	8001ef0 <__sflush_r>
 800203e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002040:	07da      	lsls	r2, r3, #31
 8002042:	4605      	mov	r5, r0
 8002044:	d4e0      	bmi.n	8002008 <_fflush_r+0xc>
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	059b      	lsls	r3, r3, #22
 800204a:	d4dd      	bmi.n	8002008 <_fflush_r+0xc>
 800204c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800204e:	f7ff fb2e 	bl	80016ae <__retarget_lock_release_recursive>
 8002052:	e7d9      	b.n	8002008 <_fflush_r+0xc>
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <_fflush_r+0x70>)
 8002056:	429c      	cmp	r4, r3
 8002058:	d101      	bne.n	800205e <_fflush_r+0x62>
 800205a:	68ac      	ldr	r4, [r5, #8]
 800205c:	e7df      	b.n	800201e <_fflush_r+0x22>
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <_fflush_r+0x74>)
 8002060:	429c      	cmp	r4, r3
 8002062:	bf08      	it	eq
 8002064:	68ec      	ldreq	r4, [r5, #12]
 8002066:	e7da      	b.n	800201e <_fflush_r+0x22>
 8002068:	080027b8 	.word	0x080027b8
 800206c:	080027d8 	.word	0x080027d8
 8002070:	08002798 	.word	0x08002798

08002074 <_lseek_r>:
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	4d07      	ldr	r5, [pc, #28]	; (8002094 <_lseek_r+0x20>)
 8002078:	4604      	mov	r4, r0
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	2200      	movs	r2, #0
 8002080:	602a      	str	r2, [r5, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	f000 f937 	bl	80022f6 <_lseek>
 8002088:	1c43      	adds	r3, r0, #1
 800208a:	d102      	bne.n	8002092 <_lseek_r+0x1e>
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	b103      	cbz	r3, 8002092 <_lseek_r+0x1e>
 8002090:	6023      	str	r3, [r4, #0]
 8002092:	bd38      	pop	{r3, r4, r5, pc}
 8002094:	200000bc 	.word	0x200000bc

08002098 <__swhatbuf_r>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	460e      	mov	r6, r1
 800209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a0:	2900      	cmp	r1, #0
 80020a2:	b096      	sub	sp, #88	; 0x58
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	da08      	bge.n	80020bc <__swhatbuf_r+0x24>
 80020aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	061a      	lsls	r2, r3, #24
 80020b4:	d410      	bmi.n	80020d8 <__swhatbuf_r+0x40>
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	e00e      	b.n	80020da <__swhatbuf_r+0x42>
 80020bc:	466a      	mov	r2, sp
 80020be:	f000 f863 	bl	8002188 <_fstat_r>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	dbf1      	blt.n	80020aa <__swhatbuf_r+0x12>
 80020c6:	9a01      	ldr	r2, [sp, #4]
 80020c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020d0:	425a      	negs	r2, r3
 80020d2:	415a      	adcs	r2, r3
 80020d4:	602a      	str	r2, [r5, #0]
 80020d6:	e7ee      	b.n	80020b6 <__swhatbuf_r+0x1e>
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	2000      	movs	r0, #0
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	b016      	add	sp, #88	; 0x58
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e4 <__smakebuf_r>:
 80020e4:	898b      	ldrh	r3, [r1, #12]
 80020e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020e8:	079d      	lsls	r5, r3, #30
 80020ea:	4606      	mov	r6, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	d507      	bpl.n	8002100 <__smakebuf_r+0x1c>
 80020f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	2301      	movs	r3, #1
 80020fa:	6163      	str	r3, [r4, #20]
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	ab01      	add	r3, sp, #4
 8002102:	466a      	mov	r2, sp
 8002104:	f7ff ffc8 	bl	8002098 <__swhatbuf_r>
 8002108:	9900      	ldr	r1, [sp, #0]
 800210a:	4605      	mov	r5, r0
 800210c:	4630      	mov	r0, r6
 800210e:	f7ff f93b 	bl	8001388 <_malloc_r>
 8002112:	b948      	cbnz	r0, 8002128 <__smakebuf_r+0x44>
 8002114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002118:	059a      	lsls	r2, r3, #22
 800211a:	d4ef      	bmi.n	80020fc <__smakebuf_r+0x18>
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	81a3      	strh	r3, [r4, #12]
 8002126:	e7e3      	b.n	80020f0 <__smakebuf_r+0xc>
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <__smakebuf_r+0x7c>)
 800212a:	62b3      	str	r3, [r6, #40]	; 0x28
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	6020      	str	r0, [r4, #0]
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	9b00      	ldr	r3, [sp, #0]
 8002138:	6163      	str	r3, [r4, #20]
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	6120      	str	r0, [r4, #16]
 800213e:	b15b      	cbz	r3, 8002158 <__smakebuf_r+0x74>
 8002140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002144:	4630      	mov	r0, r6
 8002146:	f000 f831 	bl	80021ac <_isatty_r>
 800214a:	b128      	cbz	r0, 8002158 <__smakebuf_r+0x74>
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	81a3      	strh	r3, [r4, #12]
 8002158:	89a0      	ldrh	r0, [r4, #12]
 800215a:	4305      	orrs	r5, r0
 800215c:	81a5      	strh	r5, [r4, #12]
 800215e:	e7cd      	b.n	80020fc <__smakebuf_r+0x18>
 8002160:	08001509 	.word	0x08001509

08002164 <_read_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4d07      	ldr	r5, [pc, #28]	; (8002184 <_read_r+0x20>)
 8002168:	4604      	mov	r4, r0
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	2200      	movs	r2, #0
 8002170:	602a      	str	r2, [r5, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f000 f867 	bl	8002246 <_read>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_read_r+0x1e>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	b103      	cbz	r3, 8002182 <_read_r+0x1e>
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	200000bc 	.word	0x200000bc

08002188 <_fstat_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4d07      	ldr	r5, [pc, #28]	; (80021a8 <_fstat_r+0x20>)
 800218c:	2300      	movs	r3, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	602b      	str	r3, [r5, #0]
 8002196:	f000 f95c 	bl	8002452 <_fstat>
 800219a:	1c43      	adds	r3, r0, #1
 800219c:	d102      	bne.n	80021a4 <_fstat_r+0x1c>
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	b103      	cbz	r3, 80021a4 <_fstat_r+0x1c>
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
 80021a6:	bf00      	nop
 80021a8:	200000bc 	.word	0x200000bc

080021ac <_isatty_r>:
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4d06      	ldr	r5, [pc, #24]	; (80021c8 <_isatty_r+0x1c>)
 80021b0:	2300      	movs	r3, #0
 80021b2:	4604      	mov	r4, r0
 80021b4:	4608      	mov	r0, r1
 80021b6:	602b      	str	r3, [r5, #0]
 80021b8:	f000 fab2 	bl	8002720 <_isatty>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_isatty_r+0x1a>
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_isatty_r+0x1a>
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	200000bc 	.word	0x200000bc

080021cc <findslot>:
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <findslot+0x2c>)
 80021ce:	b510      	push	{r4, lr}
 80021d0:	4604      	mov	r4, r0
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	b118      	cbz	r0, 80021de <findslot+0x12>
 80021d6:	6983      	ldr	r3, [r0, #24]
 80021d8:	b90b      	cbnz	r3, 80021de <findslot+0x12>
 80021da:	f7ff f9c9 	bl	8001570 <__sinit>
 80021de:	2c13      	cmp	r4, #19
 80021e0:	d807      	bhi.n	80021f2 <findslot+0x26>
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <findslot+0x30>)
 80021e4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80021e8:	3201      	adds	r2, #1
 80021ea:	d002      	beq.n	80021f2 <findslot+0x26>
 80021ec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	2000      	movs	r0, #0
 80021f4:	e7fc      	b.n	80021f0 <findslot+0x24>
 80021f6:	bf00      	nop
 80021f8:	20000018 	.word	0x20000018
 80021fc:	200000d0 	.word	0x200000d0

08002200 <error>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	4604      	mov	r4, r0
 8002204:	f000 faa8 	bl	8002758 <__errno>
 8002208:	2613      	movs	r6, #19
 800220a:	4605      	mov	r5, r0
 800220c:	2700      	movs	r7, #0
 800220e:	4630      	mov	r0, r6
 8002210:	4639      	mov	r1, r7
 8002212:	beab      	bkpt	0x00ab
 8002214:	4606      	mov	r6, r0
 8002216:	602e      	str	r6, [r5, #0]
 8002218:	4620      	mov	r0, r4
 800221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800221c <checkerror>:
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d101      	bne.n	8002224 <checkerror+0x8>
 8002220:	f7ff bfee 	b.w	8002200 <error>
 8002224:	4770      	bx	lr

08002226 <_swiread>:
 8002226:	b530      	push	{r4, r5, lr}
 8002228:	b085      	sub	sp, #20
 800222a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800222e:	9203      	str	r2, [sp, #12]
 8002230:	2406      	movs	r4, #6
 8002232:	ad01      	add	r5, sp, #4
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	beab      	bkpt	0x00ab
 800223a:	4604      	mov	r4, r0
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ffed 	bl	800221c <checkerror>
 8002242:	b005      	add	sp, #20
 8002244:	bd30      	pop	{r4, r5, pc}

08002246 <_read>:
 8002246:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002248:	4615      	mov	r5, r2
 800224a:	9101      	str	r1, [sp, #4]
 800224c:	f7ff ffbe 	bl	80021cc <findslot>
 8002250:	9901      	ldr	r1, [sp, #4]
 8002252:	4604      	mov	r4, r0
 8002254:	b938      	cbnz	r0, 8002266 <_read+0x20>
 8002256:	f000 fa7f 	bl	8002758 <__errno>
 800225a:	2309      	movs	r3, #9
 800225c:	6003      	str	r3, [r0, #0]
 800225e:	f04f 30ff 	mov.w	r0, #4294967295
 8002262:	b003      	add	sp, #12
 8002264:	bd30      	pop	{r4, r5, pc}
 8002266:	6800      	ldr	r0, [r0, #0]
 8002268:	462a      	mov	r2, r5
 800226a:	f7ff ffdc 	bl	8002226 <_swiread>
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	d0f7      	beq.n	8002262 <_read+0x1c>
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	1a2a      	subs	r2, r5, r0
 8002276:	4413      	add	r3, r2
 8002278:	6063      	str	r3, [r4, #4]
 800227a:	4610      	mov	r0, r2
 800227c:	e7f1      	b.n	8002262 <_read+0x1c>

0800227e <_swilseek>:
 800227e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002280:	460c      	mov	r4, r1
 8002282:	4616      	mov	r6, r2
 8002284:	f7ff ffa2 	bl	80021cc <findslot>
 8002288:	4605      	mov	r5, r0
 800228a:	b940      	cbnz	r0, 800229e <_swilseek+0x20>
 800228c:	f000 fa64 	bl	8002758 <__errno>
 8002290:	2309      	movs	r3, #9
 8002292:	6003      	str	r3, [r0, #0]
 8002294:	f04f 34ff 	mov.w	r4, #4294967295
 8002298:	4620      	mov	r0, r4
 800229a:	b003      	add	sp, #12
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229e:	2e02      	cmp	r6, #2
 80022a0:	d903      	bls.n	80022aa <_swilseek+0x2c>
 80022a2:	f000 fa59 	bl	8002758 <__errno>
 80022a6:	2316      	movs	r3, #22
 80022a8:	e7f3      	b.n	8002292 <_swilseek+0x14>
 80022aa:	2e01      	cmp	r6, #1
 80022ac:	d112      	bne.n	80022d4 <_swilseek+0x56>
 80022ae:	6843      	ldr	r3, [r0, #4]
 80022b0:	18e4      	adds	r4, r4, r3
 80022b2:	d4f6      	bmi.n	80022a2 <_swilseek+0x24>
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	260a      	movs	r6, #10
 80022b8:	e9cd 3400 	strd	r3, r4, [sp]
 80022bc:	466f      	mov	r7, sp
 80022be:	4630      	mov	r0, r6
 80022c0:	4639      	mov	r1, r7
 80022c2:	beab      	bkpt	0x00ab
 80022c4:	4606      	mov	r6, r0
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff ffa8 	bl	800221c <checkerror>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	dbe1      	blt.n	8002294 <_swilseek+0x16>
 80022d0:	606c      	str	r4, [r5, #4]
 80022d2:	e7e1      	b.n	8002298 <_swilseek+0x1a>
 80022d4:	2e02      	cmp	r6, #2
 80022d6:	d1ed      	bne.n	80022b4 <_swilseek+0x36>
 80022d8:	6803      	ldr	r3, [r0, #0]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	260c      	movs	r6, #12
 80022de:	466f      	mov	r7, sp
 80022e0:	4630      	mov	r0, r6
 80022e2:	4639      	mov	r1, r7
 80022e4:	beab      	bkpt	0x00ab
 80022e6:	4606      	mov	r6, r0
 80022e8:	4630      	mov	r0, r6
 80022ea:	f7ff ff97 	bl	800221c <checkerror>
 80022ee:	1c43      	adds	r3, r0, #1
 80022f0:	d0d0      	beq.n	8002294 <_swilseek+0x16>
 80022f2:	4404      	add	r4, r0
 80022f4:	e7de      	b.n	80022b4 <_swilseek+0x36>

080022f6 <_lseek>:
 80022f6:	f7ff bfc2 	b.w	800227e <_swilseek>

080022fa <_swiwrite>:
 80022fa:	b530      	push	{r4, r5, lr}
 80022fc:	b085      	sub	sp, #20
 80022fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002302:	9203      	str	r2, [sp, #12]
 8002304:	2405      	movs	r4, #5
 8002306:	ad01      	add	r5, sp, #4
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	beab      	bkpt	0x00ab
 800230e:	4604      	mov	r4, r0
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ff83 	bl	800221c <checkerror>
 8002316:	b005      	add	sp, #20
 8002318:	bd30      	pop	{r4, r5, pc}

0800231a <_write>:
 800231a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800231c:	4615      	mov	r5, r2
 800231e:	9101      	str	r1, [sp, #4]
 8002320:	f7ff ff54 	bl	80021cc <findslot>
 8002324:	9901      	ldr	r1, [sp, #4]
 8002326:	4604      	mov	r4, r0
 8002328:	b930      	cbnz	r0, 8002338 <_write+0x1e>
 800232a:	f000 fa15 	bl	8002758 <__errno>
 800232e:	2309      	movs	r3, #9
 8002330:	6003      	str	r3, [r0, #0]
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	e012      	b.n	800235e <_write+0x44>
 8002338:	6800      	ldr	r0, [r0, #0]
 800233a:	462a      	mov	r2, r5
 800233c:	f7ff ffdd 	bl	80022fa <_swiwrite>
 8002340:	2800      	cmp	r0, #0
 8002342:	dbf6      	blt.n	8002332 <_write+0x18>
 8002344:	6862      	ldr	r2, [r4, #4]
 8002346:	1a2b      	subs	r3, r5, r0
 8002348:	441a      	add	r2, r3
 800234a:	42a8      	cmp	r0, r5
 800234c:	6062      	str	r2, [r4, #4]
 800234e:	d105      	bne.n	800235c <_write+0x42>
 8002350:	2000      	movs	r0, #0
 8002352:	b003      	add	sp, #12
 8002354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002358:	f7ff bf52 	b.w	8002200 <error>
 800235c:	4618      	mov	r0, r3
 800235e:	b003      	add	sp, #12
 8002360:	bd30      	pop	{r4, r5, pc}

08002362 <_swiclose>:
 8002362:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002364:	2402      	movs	r4, #2
 8002366:	9001      	str	r0, [sp, #4]
 8002368:	ad01      	add	r5, sp, #4
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	beab      	bkpt	0x00ab
 8002370:	4604      	mov	r4, r0
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff ff52 	bl	800221c <checkerror>
 8002378:	b003      	add	sp, #12
 800237a:	bd30      	pop	{r4, r5, pc}

0800237c <_close>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4605      	mov	r5, r0
 8002380:	f7ff ff24 	bl	80021cc <findslot>
 8002384:	4604      	mov	r4, r0
 8002386:	b930      	cbnz	r0, 8002396 <_close+0x1a>
 8002388:	f000 f9e6 	bl	8002758 <__errno>
 800238c:	2309      	movs	r3, #9
 800238e:	6003      	str	r3, [r0, #0]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	bd38      	pop	{r3, r4, r5, pc}
 8002396:	3d01      	subs	r5, #1
 8002398:	2d01      	cmp	r5, #1
 800239a:	d809      	bhi.n	80023b0 <_close+0x34>
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <_close+0x48>)
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d104      	bne.n	80023b0 <_close+0x34>
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	6003      	str	r3, [r0, #0]
 80023ac:	2000      	movs	r0, #0
 80023ae:	e7f1      	b.n	8002394 <_close+0x18>
 80023b0:	6820      	ldr	r0, [r4, #0]
 80023b2:	f7ff ffd6 	bl	8002362 <_swiclose>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d1ec      	bne.n	8002394 <_close+0x18>
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	e7e8      	b.n	8002394 <_close+0x18>
 80023c2:	bf00      	nop
 80023c4:	200000d0 	.word	0x200000d0

080023c8 <_sbrk>:
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <_sbrk+0x38>)
 80023ca:	6811      	ldr	r1, [r2, #0]
 80023cc:	b510      	push	{r4, lr}
 80023ce:	4603      	mov	r3, r0
 80023d0:	b909      	cbnz	r1, 80023d6 <_sbrk+0xe>
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <_sbrk+0x3c>)
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	6810      	ldr	r0, [r2, #0]
 80023d8:	4669      	mov	r1, sp
 80023da:	4403      	add	r3, r0
 80023dc:	428b      	cmp	r3, r1
 80023de:	d806      	bhi.n	80023ee <_sbrk+0x26>
 80023e0:	4909      	ldr	r1, [pc, #36]	; (8002408 <_sbrk+0x40>)
 80023e2:	4c0a      	ldr	r4, [pc, #40]	; (800240c <_sbrk+0x44>)
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	42a1      	cmp	r1, r4
 80023e8:	d008      	beq.n	80023fc <_sbrk+0x34>
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d906      	bls.n	80023fc <_sbrk+0x34>
 80023ee:	f000 f9b3 	bl	8002758 <__errno>
 80023f2:	230c      	movs	r3, #12
 80023f4:	6003      	str	r3, [r0, #0]
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e7fc      	b.n	80023fa <_sbrk+0x32>
 8002400:	200000c0 	.word	0x200000c0
 8002404:	20000170 	.word	0x20000170
 8002408:	2000007c 	.word	0x2000007c
 800240c:	cafedead 	.word	0xcafedead

08002410 <_swistat>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	460c      	mov	r4, r1
 8002414:	f7ff feda 	bl	80021cc <findslot>
 8002418:	4605      	mov	r5, r0
 800241a:	b930      	cbnz	r0, 800242a <_swistat+0x1a>
 800241c:	f000 f99c 	bl	8002758 <__errno>
 8002420:	2309      	movs	r3, #9
 8002422:	6003      	str	r3, [r0, #0]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002430:	6063      	str	r3, [r4, #4]
 8002432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002436:	64a3      	str	r3, [r4, #72]	; 0x48
 8002438:	260c      	movs	r6, #12
 800243a:	4630      	mov	r0, r6
 800243c:	4629      	mov	r1, r5
 800243e:	beab      	bkpt	0x00ab
 8002440:	4605      	mov	r5, r0
 8002442:	4628      	mov	r0, r5
 8002444:	f7ff feea 	bl	800221c <checkerror>
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	bf1c      	itt	ne
 800244c:	6120      	strne	r0, [r4, #16]
 800244e:	2000      	movne	r0, #0
 8002450:	e7ea      	b.n	8002428 <_swistat+0x18>

08002452 <_fstat>:
 8002452:	460b      	mov	r3, r1
 8002454:	b510      	push	{r4, lr}
 8002456:	2100      	movs	r1, #0
 8002458:	4604      	mov	r4, r0
 800245a:	2258      	movs	r2, #88	; 0x58
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe ff1f 	bl	80012a0 <memset>
 8002462:	4601      	mov	r1, r0
 8002464:	4620      	mov	r0, r4
 8002466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800246a:	f7ff bfd1 	b.w	8002410 <_swistat>

0800246e <_stat>:
 800246e:	b538      	push	{r3, r4, r5, lr}
 8002470:	460d      	mov	r5, r1
 8002472:	4604      	mov	r4, r0
 8002474:	2258      	movs	r2, #88	; 0x58
 8002476:	2100      	movs	r1, #0
 8002478:	4628      	mov	r0, r5
 800247a:	f7fe ff11 	bl	80012a0 <memset>
 800247e:	4620      	mov	r0, r4
 8002480:	2100      	movs	r1, #0
 8002482:	f000 f811 	bl	80024a8 <_swiopen>
 8002486:	1c43      	adds	r3, r0, #1
 8002488:	4604      	mov	r4, r0
 800248a:	d00b      	beq.n	80024a4 <_stat+0x36>
 800248c:	686b      	ldr	r3, [r5, #4]
 800248e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002492:	606b      	str	r3, [r5, #4]
 8002494:	4629      	mov	r1, r5
 8002496:	f7ff ffbb 	bl	8002410 <_swistat>
 800249a:	4605      	mov	r5, r0
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ff6d 	bl	800237c <_close>
 80024a2:	462c      	mov	r4, r5
 80024a4:	4620      	mov	r0, r4
 80024a6:	bd38      	pop	{r3, r4, r5, pc}

080024a8 <_swiopen>:
 80024a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024ac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002558 <_swiopen+0xb0>
 80024b0:	b097      	sub	sp, #92	; 0x5c
 80024b2:	4607      	mov	r7, r0
 80024b4:	460e      	mov	r6, r1
 80024b6:	2500      	movs	r5, #0
 80024b8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80024bc:	1c61      	adds	r1, r4, #1
 80024be:	d037      	beq.n	8002530 <_swiopen+0x88>
 80024c0:	3501      	adds	r5, #1
 80024c2:	2d14      	cmp	r5, #20
 80024c4:	d1f8      	bne.n	80024b8 <_swiopen+0x10>
 80024c6:	f000 f947 	bl	8002758 <__errno>
 80024ca:	2318      	movs	r3, #24
 80024cc:	6003      	str	r3, [r0, #0]
 80024ce:	f04f 34ff 	mov.w	r4, #4294967295
 80024d2:	e03d      	b.n	8002550 <_swiopen+0xa8>
 80024d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80024d8:	f240 6301 	movw	r3, #1537	; 0x601
 80024dc:	07b2      	lsls	r2, r6, #30
 80024de:	bf48      	it	mi
 80024e0:	f044 0402 	orrmi.w	r4, r4, #2
 80024e4:	421e      	tst	r6, r3
 80024e6:	bf18      	it	ne
 80024e8:	f044 0404 	orrne.w	r4, r4, #4
 80024ec:	0733      	lsls	r3, r6, #28
 80024ee:	bf48      	it	mi
 80024f0:	f024 0404 	bicmi.w	r4, r4, #4
 80024f4:	4638      	mov	r0, r7
 80024f6:	bf48      	it	mi
 80024f8:	f044 0408 	orrmi.w	r4, r4, #8
 80024fc:	9700      	str	r7, [sp, #0]
 80024fe:	f7fd fec7 	bl	8000290 <strlen>
 8002502:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002506:	2401      	movs	r4, #1
 8002508:	4620      	mov	r0, r4
 800250a:	4649      	mov	r1, r9
 800250c:	beab      	bkpt	0x00ab
 800250e:	4604      	mov	r4, r0
 8002510:	2c00      	cmp	r4, #0
 8002512:	db08      	blt.n	8002526 <_swiopen+0x7e>
 8002514:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002518:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800251c:	2300      	movs	r3, #0
 800251e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002522:	462c      	mov	r4, r5
 8002524:	e014      	b.n	8002550 <_swiopen+0xa8>
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fe6a 	bl	8002200 <error>
 800252c:	4604      	mov	r4, r0
 800252e:	e00f      	b.n	8002550 <_swiopen+0xa8>
 8002530:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002534:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002538:	46e9      	mov	r9, sp
 800253a:	d1cb      	bne.n	80024d4 <_swiopen+0x2c>
 800253c:	4649      	mov	r1, r9
 800253e:	4638      	mov	r0, r7
 8002540:	f7ff ff95 	bl	800246e <_stat>
 8002544:	3001      	adds	r0, #1
 8002546:	d0c5      	beq.n	80024d4 <_swiopen+0x2c>
 8002548:	f000 f906 	bl	8002758 <__errno>
 800254c:	2311      	movs	r3, #17
 800254e:	6003      	str	r3, [r0, #0]
 8002550:	4620      	mov	r0, r4
 8002552:	b017      	add	sp, #92	; 0x5c
 8002554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002558:	200000d0 	.word	0x200000d0

0800255c <_get_semihosting_exts>:
 800255c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002560:	4606      	mov	r6, r0
 8002562:	460f      	mov	r7, r1
 8002564:	482a      	ldr	r0, [pc, #168]	; (8002610 <_get_semihosting_exts+0xb4>)
 8002566:	2100      	movs	r1, #0
 8002568:	4615      	mov	r5, r2
 800256a:	f7ff ff9d 	bl	80024a8 <_swiopen>
 800256e:	462a      	mov	r2, r5
 8002570:	4604      	mov	r4, r0
 8002572:	2100      	movs	r1, #0
 8002574:	4630      	mov	r0, r6
 8002576:	f7fe fe93 	bl	80012a0 <memset>
 800257a:	1c63      	adds	r3, r4, #1
 800257c:	d016      	beq.n	80025ac <_get_semihosting_exts+0x50>
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff fe24 	bl	80021cc <findslot>
 8002584:	f04f 090c 	mov.w	r9, #12
 8002588:	4680      	mov	r8, r0
 800258a:	4648      	mov	r0, r9
 800258c:	4641      	mov	r1, r8
 800258e:	beab      	bkpt	0x00ab
 8002590:	4680      	mov	r8, r0
 8002592:	4640      	mov	r0, r8
 8002594:	f7ff fe42 	bl	800221c <checkerror>
 8002598:	2803      	cmp	r0, #3
 800259a:	dd02      	ble.n	80025a2 <_get_semihosting_exts+0x46>
 800259c:	1ec3      	subs	r3, r0, #3
 800259e:	42ab      	cmp	r3, r5
 80025a0:	dc08      	bgt.n	80025b4 <_get_semihosting_exts+0x58>
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff feea 	bl	800237c <_close>
 80025a8:	f04f 34ff 	mov.w	r4, #4294967295
 80025ac:	4620      	mov	r0, r4
 80025ae:	b003      	add	sp, #12
 80025b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b4:	2204      	movs	r2, #4
 80025b6:	eb0d 0102 	add.w	r1, sp, r2
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff fe43 	bl	8002246 <_read>
 80025c0:	2803      	cmp	r0, #3
 80025c2:	ddee      	ble.n	80025a2 <_get_semihosting_exts+0x46>
 80025c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025c8:	2b53      	cmp	r3, #83	; 0x53
 80025ca:	d1ea      	bne.n	80025a2 <_get_semihosting_exts+0x46>
 80025cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80025d0:	2b48      	cmp	r3, #72	; 0x48
 80025d2:	d1e6      	bne.n	80025a2 <_get_semihosting_exts+0x46>
 80025d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80025d8:	2b46      	cmp	r3, #70	; 0x46
 80025da:	d1e2      	bne.n	80025a2 <_get_semihosting_exts+0x46>
 80025dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025e0:	2b42      	cmp	r3, #66	; 0x42
 80025e2:	d1de      	bne.n	80025a2 <_get_semihosting_exts+0x46>
 80025e4:	2201      	movs	r2, #1
 80025e6:	4639      	mov	r1, r7
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff fe48 	bl	800227e <_swilseek>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	dbd7      	blt.n	80025a2 <_get_semihosting_exts+0x46>
 80025f2:	462a      	mov	r2, r5
 80025f4:	4631      	mov	r1, r6
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff fe25 	bl	8002246 <_read>
 80025fc:	4605      	mov	r5, r0
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff febc 	bl	800237c <_close>
 8002604:	4628      	mov	r0, r5
 8002606:	f7ff fe09 	bl	800221c <checkerror>
 800260a:	4604      	mov	r4, r0
 800260c:	e7ce      	b.n	80025ac <_get_semihosting_exts+0x50>
 800260e:	bf00      	nop
 8002610:	0800282b 	.word	0x0800282b

08002614 <initialise_semihosting_exts>:
 8002614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002616:	4d0a      	ldr	r5, [pc, #40]	; (8002640 <initialise_semihosting_exts+0x2c>)
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <initialise_semihosting_exts+0x30>)
 800261a:	2100      	movs	r1, #0
 800261c:	2201      	movs	r2, #1
 800261e:	a801      	add	r0, sp, #4
 8002620:	6029      	str	r1, [r5, #0]
 8002622:	6022      	str	r2, [r4, #0]
 8002624:	f7ff ff9a 	bl	800255c <_get_semihosting_exts>
 8002628:	2800      	cmp	r0, #0
 800262a:	dd07      	ble.n	800263c <initialise_semihosting_exts+0x28>
 800262c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	602a      	str	r2, [r5, #0]
 800263a:	6023      	str	r3, [r4, #0]
 800263c:	b003      	add	sp, #12
 800263e:	bd30      	pop	{r4, r5, pc}
 8002640:	20000080 	.word	0x20000080
 8002644:	20000084 	.word	0x20000084

08002648 <_has_ext_stdout_stderr>:
 8002648:	b510      	push	{r4, lr}
 800264a:	4c04      	ldr	r4, [pc, #16]	; (800265c <_has_ext_stdout_stderr+0x14>)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	da01      	bge.n	8002656 <_has_ext_stdout_stderr+0xe>
 8002652:	f7ff ffdf 	bl	8002614 <initialise_semihosting_exts>
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	20000084 	.word	0x20000084

08002660 <initialise_monitor_handles>:
 8002660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002664:	b085      	sub	sp, #20
 8002666:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002718 <initialise_monitor_handles+0xb8>
 800266a:	f8cd 9004 	str.w	r9, [sp, #4]
 800266e:	2303      	movs	r3, #3
 8002670:	2400      	movs	r4, #0
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	af01      	add	r7, sp, #4
 8002676:	9402      	str	r4, [sp, #8]
 8002678:	2501      	movs	r5, #1
 800267a:	4628      	mov	r0, r5
 800267c:	4639      	mov	r1, r7
 800267e:	beab      	bkpt	0x00ab
 8002680:	4605      	mov	r5, r0
 8002682:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800271c <initialise_monitor_handles+0xbc>
 8002686:	4623      	mov	r3, r4
 8002688:	4c20      	ldr	r4, [pc, #128]	; (800270c <initialise_monitor_handles+0xac>)
 800268a:	f8c8 5000 	str.w	r5, [r8]
 800268e:	f04f 32ff 	mov.w	r2, #4294967295
 8002692:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002696:	3301      	adds	r3, #1
 8002698:	2b14      	cmp	r3, #20
 800269a:	d1fa      	bne.n	8002692 <initialise_monitor_handles+0x32>
 800269c:	f7ff ffd4 	bl	8002648 <_has_ext_stdout_stderr>
 80026a0:	4d1b      	ldr	r5, [pc, #108]	; (8002710 <initialise_monitor_handles+0xb0>)
 80026a2:	b1d0      	cbz	r0, 80026da <initialise_monitor_handles+0x7a>
 80026a4:	f04f 0a03 	mov.w	sl, #3
 80026a8:	2304      	movs	r3, #4
 80026aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80026ae:	2601      	movs	r6, #1
 80026b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	4630      	mov	r0, r6
 80026b8:	4639      	mov	r1, r7
 80026ba:	beab      	bkpt	0x00ab
 80026bc:	4683      	mov	fp, r0
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <initialise_monitor_handles+0xb4>)
 80026c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80026c4:	f8c3 b000 	str.w	fp, [r3]
 80026c8:	2308      	movs	r3, #8
 80026ca:	f8cd a00c 	str.w	sl, [sp, #12]
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	4630      	mov	r0, r6
 80026d2:	4639      	mov	r1, r7
 80026d4:	beab      	bkpt	0x00ab
 80026d6:	4606      	mov	r6, r0
 80026d8:	602e      	str	r6, [r5, #0]
 80026da:	682b      	ldr	r3, [r5, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	bf02      	ittt	eq
 80026e0:	4b0c      	ldreq	r3, [pc, #48]	; (8002714 <initialise_monitor_handles+0xb4>)
 80026e2:	681b      	ldreq	r3, [r3, #0]
 80026e4:	602b      	streq	r3, [r5, #0]
 80026e6:	2600      	movs	r6, #0
 80026e8:	f8d8 3000 	ldr.w	r3, [r8]
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	6066      	str	r6, [r4, #4]
 80026f0:	f7ff ffaa 	bl	8002648 <_has_ext_stdout_stderr>
 80026f4:	b130      	cbz	r0, 8002704 <initialise_monitor_handles+0xa4>
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <initialise_monitor_handles+0xb4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002704:	b005      	add	sp, #20
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	200000d0 	.word	0x200000d0
 8002710:	200000c4 	.word	0x200000c4
 8002714:	200000cc 	.word	0x200000cc
 8002718:	08002841 	.word	0x08002841
 800271c:	200000c8 	.word	0x200000c8

08002720 <_isatty>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	f7ff fd53 	bl	80021cc <findslot>
 8002726:	2509      	movs	r5, #9
 8002728:	4604      	mov	r4, r0
 800272a:	b920      	cbnz	r0, 8002736 <_isatty+0x16>
 800272c:	f000 f814 	bl	8002758 <__errno>
 8002730:	6005      	str	r5, [r0, #0]
 8002732:	4620      	mov	r0, r4
 8002734:	bd70      	pop	{r4, r5, r6, pc}
 8002736:	4628      	mov	r0, r5
 8002738:	4621      	mov	r1, r4
 800273a:	beab      	bkpt	0x00ab
 800273c:	4604      	mov	r4, r0
 800273e:	2c01      	cmp	r4, #1
 8002740:	d0f7      	beq.n	8002732 <_isatty+0x12>
 8002742:	f000 f809 	bl	8002758 <__errno>
 8002746:	2400      	movs	r4, #0
 8002748:	4605      	mov	r5, r0
 800274a:	2613      	movs	r6, #19
 800274c:	4630      	mov	r0, r6
 800274e:	4621      	mov	r1, r4
 8002750:	beab      	bkpt	0x00ab
 8002752:	4606      	mov	r6, r0
 8002754:	602e      	str	r6, [r5, #0]
 8002756:	e7ec      	b.n	8002732 <_isatty+0x12>

08002758 <__errno>:
 8002758:	4b01      	ldr	r3, [pc, #4]	; (8002760 <__errno+0x8>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000018 	.word	0x20000018

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
