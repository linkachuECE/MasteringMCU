
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a54  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000bfc  08000bfc  00010bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c28  08000c28  00010c30  2**0
                  CONTENTS
  4 .ARM          00000000  08000c28  08000c28  00010c30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c28  08000c30  00010c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c28  08000c28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c2c  08000c2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c30  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000132a  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000456  00000000  00000000  00011f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000123e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  00012518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f5c  00000000  00000000  00012618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001963  00000000  00000000  00015574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b8bf  00000000  00000000  00016ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00022796  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000042c  00000000  00000000  000227e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000be4 	.word	0x08000be4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000be4 	.word	0x08000be4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
 */
#include "stm32f407xx.h"
#include <string.h>
#include <stdio.h>

void delay(void){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 20000; i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000210:	4293      	cmp	r3, r2
 8000212:	d9f7      	bls.n	8000204 <delay+0xc>
}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a39      	ldr	r2, [pc, #228]	; (8000314 <SPI2_GPIO_Inits+0xf0>)
 8000230:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	220f      	movs	r2, #15
 8000236:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2202      	movs	r2, #2
 800023c:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2203      	movs	r2, #3
 8000242:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2205      	movs	r2, #5
 8000254:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <SPI2_GPIO_Inits+0xf0>)
 800025a:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	220e      	movs	r2, #14
 8000260:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2202      	movs	r2, #2
 8000266:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2203      	movs	r2, #3
 800026c:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2200      	movs	r2, #0
 8000272:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2200      	movs	r2, #0
 8000278:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2205      	movs	r2, #5
 800027e:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a24      	ldr	r2, [pc, #144]	; (8000314 <SPI2_GPIO_Inits+0xf0>)
 8000284:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	220d      	movs	r2, #13
 800028a:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2202      	movs	r2, #2
 8000290:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2203      	movs	r2, #3
 8000296:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2200      	movs	r2, #0
 80002a2:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2205      	movs	r2, #5
 80002aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SPI2_GPIO_Inits+0xf0>)
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	220c      	movs	r2, #12
 80002b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2202      	movs	r2, #2
 80002c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2203      	movs	r2, #3
 80002c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2200      	movs	r2, #0
 80002d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2205      	movs	r2, #5
 80002e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_Init(&(SPIPort->MOSI));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f97e 	bl	80005e8 <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	330c      	adds	r3, #12
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f979 	bl	80005e8 <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3318      	adds	r3, #24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f974 	bl	80005e8 <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3324      	adds	r3, #36	; 0x24
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f96f 	bl	80005e8 <GPIO_Init>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40020400 	.word	0x40020400

08000318 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	SPIDevice->pSPIx = SPI2;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a10      	ldr	r2, [pc, #64]	; (8000364 <SPI2_Init+0x4c>)
 8000324:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2201      	movs	r2, #1
 800032a:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2201      	movs	r2, #1
 8000330:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV4;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2201      	movs	r2, #1
 8000336:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2200      	movs	r2, #0
 800033c:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2200      	movs	r2, #0
 8000342:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2200      	movs	r2, #0
 8000348:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_SW;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2201      	movs	r2, #1
 800034e:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_LSBFIRST;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2201      	movs	r2, #1
 8000354:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 fb4c 	bl	80009f4 <SPI_Init>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40003800 	.word	0x40003800

08000368 <main>:

int main(void){
 8000368:	b5b0      	push	{r4, r5, r7, lr}
 800036a:	b098      	sub	sp, #96	; 0x60
 800036c:	af00      	add	r7, sp, #0

	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 800036e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff56 	bl	8000224 <SPI2_GPIO_Inits>

	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ffcb 	bl	8000318 <SPI2_Init>

	uint16_t myData[] = {0x0000, 0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888, 0x9999, 0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF};
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0x4c>)
 8000384:	463c      	mov	r4, r7
 8000386:	461d      	mov	r5, r3
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char* myString = "Fuck you";
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <main+0x50>)
 8000396:	65fb      	str	r3, [r7, #92]	; 0x5c

	//SPI_SendData(mySPIDevice.pSPIx, myData, 10);

	while(1){
		SPI_SendData(mySPIDevice.pSPIx, (uint8_t*)myString, strlen(myString));
 8000398:	6a3c      	ldr	r4, [r7, #32]
 800039a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800039c:	f7ff ff24 	bl	80001e8 <strlen>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
 80003a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80003a6:	4620      	mov	r0, r4
 80003a8:	f000 fbc4 	bl	8000b34 <SPI_SendData>
		delay();
 80003ac:	f7ff ff24 	bl	80001f8 <delay>
		SPI_SendData(mySPIDevice.pSPIx, (uint8_t*)myString, strlen(myString));
 80003b0:	e7f2      	b.n	8000398 <main+0x30>
 80003b2:	bf00      	nop
 80003b4:	08000c08 	.word	0x08000c08
 80003b8:	08000bfc 	.word	0x08000bfc

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 fbd7 	bl	8000b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff ffbb 	bl	8000368 <main>

080003f2 <LoopForever>:

LoopForever:
    b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000c30 	.word	0x08000c30
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	2000001c 	.word	0x2000001c

0800040c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC_IRQHandler>
	...

08000410 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d162      	bne.n	80004e8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a66      	ldr	r2, [pc, #408]	; (80005c0 <GPIO_PeriClockControl+0x1b0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800042a:	4b66      	ldr	r3, [pc, #408]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a65      	ldr	r2, [pc, #404]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 8000436:	e0bc      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a63      	ldr	r2, [pc, #396]	; (80005c8 <GPIO_PeriClockControl+0x1b8>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000440:	4b60      	ldr	r3, [pc, #384]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a5f      	ldr	r2, [pc, #380]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e0b1      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a5e      	ldr	r2, [pc, #376]	; (80005cc <GPIO_PeriClockControl+0x1bc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000456:	4b5b      	ldr	r3, [pc, #364]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a5a      	ldr	r2, [pc, #360]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e0a6      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a5a      	ldr	r2, [pc, #360]	; (80005d0 <GPIO_PeriClockControl+0x1c0>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800046c:	4b55      	ldr	r3, [pc, #340]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a54      	ldr	r2, [pc, #336]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e09b      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a55      	ldr	r2, [pc, #340]	; (80005d4 <GPIO_PeriClockControl+0x1c4>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000482:	4b50      	ldr	r3, [pc, #320]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a4f      	ldr	r2, [pc, #316]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000488:	f043 0310 	orr.w	r3, r3, #16
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e090      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a51      	ldr	r2, [pc, #324]	; (80005d8 <GPIO_PeriClockControl+0x1c8>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000498:	4b4a      	ldr	r3, [pc, #296]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a49      	ldr	r2, [pc, #292]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e085      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a4c      	ldr	r2, [pc, #304]	; (80005dc <GPIO_PeriClockControl+0x1cc>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004ae:	4b45      	ldr	r3, [pc, #276]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a44      	ldr	r2, [pc, #272]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e07a      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a48      	ldr	r2, [pc, #288]	; (80005e0 <GPIO_PeriClockControl+0x1d0>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004c4:	4b3f      	ldr	r3, [pc, #252]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a3e      	ldr	r2, [pc, #248]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e06f      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a43      	ldr	r2, [pc, #268]	; (80005e4 <GPIO_PeriClockControl+0x1d4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d16b      	bne.n	80005b2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80004da:	4b3a      	ldr	r3, [pc, #232]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a39      	ldr	r2, [pc, #228]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e064      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d161      	bne.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a33      	ldr	r2, [pc, #204]	; (80005c0 <GPIO_PeriClockControl+0x1b0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a32      	ldr	r2, [pc, #200]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80004fc:	f023 0301 	bic.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000502:	e056      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a30      	ldr	r2, [pc, #192]	; (80005c8 <GPIO_PeriClockControl+0x1b8>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 800050c:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000512:	f023 0302 	bic.w	r3, r3, #2
 8000516:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000518:	e04b      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <GPIO_PeriClockControl+0x1bc>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000528:	f023 0304 	bic.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052e:	e040      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <GPIO_PeriClockControl+0x1c0>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800053e:	f023 0308 	bic.w	r3, r3, #8
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000544:	e035      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <GPIO_PeriClockControl+0x1c4>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000554:	f023 0310 	bic.w	r3, r3, #16
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055a:	e02a      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <GPIO_PeriClockControl+0x1c8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800056a:	f023 0320 	bic.w	r3, r3, #32
 800056e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000570:	e01f      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <GPIO_PeriClockControl+0x1cc>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000586:	e014      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <GPIO_PeriClockControl+0x1d0>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 8000596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059c:	e009      	b.n	80005b2 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <GPIO_PeriClockControl+0x1d4>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d105      	bne.n	80005b2 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <GPIO_PeriClockControl+0x1b4>)
 80005ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40021400 	.word	0x40021400
 80005dc:	40021800 	.word	0x40021800
 80005e0:	40021c00 	.word	0x40021c00
 80005e4:	40022000 	.word	0x40022000

080005e8 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff0a 	bl	8000410 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d820      	bhi.n	800064a <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2103      	movs	r1, #3
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6819      	ldr	r1, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	430a      	orrs	r2, r1
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e0d0      	b.n	80007ec <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	2b04      	cmp	r3, #4
 8000650:	d117      	bne.n	8000682 <GPIO_Init+0x9a>
				// 1. Configure the Falling trigger selection register (FTSR)
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <GPIO_Init+0x19c>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a48      	ldr	r2, [pc, #288]	; (8000784 <GPIO_Init+0x19c>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000668:	4b46      	ldr	r3, [pc, #280]	; (8000784 <GPIO_Init+0x19c>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	2201      	movs	r2, #1
 8000674:	408a      	lsls	r2, r1
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a42      	ldr	r2, [pc, #264]	; (8000784 <GPIO_Init+0x19c>)
 800067c:	400b      	ands	r3, r1
 800067e:	6093      	str	r3, [r2, #8]
 8000680:	e031      	b.n	80006e6 <GPIO_Init+0xfe>
			} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	2b05      	cmp	r3, #5
 8000688:	d117      	bne.n	80006ba <GPIO_Init+0xd2>
				// 1. Configure the rising trigger selection register (RTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <GPIO_Init+0x19c>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <GPIO_Init+0x19c>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <GPIO_Init+0x19c>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7912      	ldrb	r2, [r2, #4]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a34      	ldr	r2, [pc, #208]	; (8000784 <GPIO_Init+0x19c>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	60d3      	str	r3, [r2, #12]
 80006b8:	e015      	b.n	80006e6 <GPIO_Init+0xfe>
			} else {
				// 1. Configure both registers (RSTR and FTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <GPIO_Init+0x19c>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4611      	mov	r1, r2
 80006c4:	2201      	movs	r2, #1
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <GPIO_Init+0x19c>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <GPIO_Init+0x19c>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7912      	ldrb	r2, [r2, #4]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <GPIO_Init+0x19c>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	60d3      	str	r3, [r2, #12]
			}

			// 2. Configure the GPIO port selection in SYSCFG_EXTICR

			SYSCFG_PCLK_EN();
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <GPIO_Init+0x1a0>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a27      	ldr	r2, [pc, #156]	; (8000788 <GPIO_Init+0x1a0>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	f003 0303 	and.w	r3, r3, #3
 8000702:	74bb      	strb	r3, [r7, #18]

			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <GPIO_Init+0x1a4>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d050      	beq.n	80007b0 <GPIO_Init+0x1c8>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <GPIO_Init+0x1a8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d032      	beq.n	800077e <GPIO_Init+0x196>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <GPIO_Init+0x1ac>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d02b      	beq.n	800077a <GPIO_Init+0x192>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <GPIO_Init+0x1b0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d024      	beq.n	8000776 <GPIO_Init+0x18e>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <GPIO_Init+0x1b4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d01d      	beq.n	8000772 <GPIO_Init+0x18a>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <GPIO_Init+0x1b8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d016      	beq.n	800076e <GPIO_Init+0x186>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <GPIO_Init+0x1bc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d00f      	beq.n	800076a <GPIO_Init+0x182>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <GPIO_Init+0x1c0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d008      	beq.n	8000766 <GPIO_Init+0x17e>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <GPIO_Init+0x1c4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <GPIO_Init+0x17a>
 800075e:	2308      	movs	r3, #8
 8000760:	e027      	b.n	80007b2 <GPIO_Init+0x1ca>
 8000762:	2300      	movs	r3, #0
 8000764:	e025      	b.n	80007b2 <GPIO_Init+0x1ca>
 8000766:	2307      	movs	r3, #7
 8000768:	e023      	b.n	80007b2 <GPIO_Init+0x1ca>
 800076a:	2306      	movs	r3, #6
 800076c:	e021      	b.n	80007b2 <GPIO_Init+0x1ca>
 800076e:	2305      	movs	r3, #5
 8000770:	e01f      	b.n	80007b2 <GPIO_Init+0x1ca>
 8000772:	2304      	movs	r3, #4
 8000774:	e01d      	b.n	80007b2 <GPIO_Init+0x1ca>
 8000776:	2303      	movs	r3, #3
 8000778:	e01b      	b.n	80007b2 <GPIO_Init+0x1ca>
 800077a:	2302      	movs	r3, #2
 800077c:	e019      	b.n	80007b2 <GPIO_Init+0x1ca>
 800077e:	2301      	movs	r3, #1
 8000780:	e017      	b.n	80007b2 <GPIO_Init+0x1ca>
 8000782:	bf00      	nop
 8000784:	40013c00 	.word	0x40013c00
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40020800 	.word	0x40020800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	40021400 	.word	0x40021400
 80007a4:	40021800 	.word	0x40021800
 80007a8:	40021c00 	.word	0x40021c00
 80007ac:	40022000 	.word	0x40022000
 80007b0:	2300      	movs	r3, #0
 80007b2:	747b      	strb	r3, [r7, #17]

			SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80007b4:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <GPIO_Init+0x34c>)
 80007b6:	7cfb      	ldrb	r3, [r7, #19]
 80007b8:	3302      	adds	r3, #2
 80007ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007be:	7c79      	ldrb	r1, [r7, #17]
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	495a      	ldr	r1, [pc, #360]	; (8000934 <GPIO_Init+0x34c>)
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	4302      	orrs	r2, r0
 80007d0:	3302      	adds	r3, #2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// 3. Enable the EXTI interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d6:	4b58      	ldr	r3, [pc, #352]	; (8000938 <GPIO_Init+0x350>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7912      	ldrb	r2, [r2, #4]
 80007de:	4611      	mov	r1, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	408a      	lsls	r2, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a54      	ldr	r2, [pc, #336]	; (8000938 <GPIO_Init+0x350>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	799b      	ldrb	r3, [r3, #6]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2103      	movs	r1, #3
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	400a      	ands	r2, r1
 800081e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6899      	ldr	r1, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	430a      	orrs	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	79db      	ldrb	r3, [r3, #7]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2103      	movs	r1, #3
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	400a      	ands	r2, r1
 8000862:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68d9      	ldr	r1, [r3, #12]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	430a      	orrs	r2, r1
 8000872:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d11f      	bne.n	80008c0 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7a1b      	ldrb	r3, [r3, #8]
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	4619      	mov	r1, r3
 800089c:	2301      	movs	r3, #1
 800089e:	408b      	lsls	r3, r1
 80008a0:	43db      	mvns	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	400a      	ands	r2, r1
 80008aa:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6859      	ldr	r1, [r3, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	605a      	str	r2, [r3, #4]
		temp = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d131      	bne.n	800092c <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	7c3a      	ldrb	r2, [r7, #16]
 80008e0:	3208      	adds	r2, #8
 80008e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	220f      	movs	r2, #15
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	7c3a      	ldrb	r2, [r7, #16]
 80008fa:	4001      	ands	r1, r0
 80008fc:	3208      	adds	r2, #8
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	7c3a      	ldrb	r2, [r7, #16]
 8000908:	3208      	adds	r2, #8
 800090a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7a5b      	ldrb	r3, [r3, #9]
 8000912:	461a      	mov	r2, r3
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	4618      	mov	r0, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7c3a      	ldrb	r2, [r7, #16]
 8000924:	4301      	orrs	r1, r0
 8000926:	3208      	adds	r2, #8
 8000928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	40013c00 	.word	0x40013c00

0800093c <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d120      	bne.n	8000990 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <SPI_PeriClockControl+0xa8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <SPI_PeriClockControl+0xac>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <SPI_PeriClockControl+0xac>)
 800095c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8000962:	e038      	b.n	80009d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SPI_PeriClockControl+0xb0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <SPI_PeriClockControl+0xac>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <SPI_PeriClockControl+0xac>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000978:	e02d      	b.n	80009d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <SPI_PeriClockControl+0xb4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d129      	bne.n	80009d6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <SPI_PeriClockControl+0xac>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <SPI_PeriClockControl+0xac>)
 8000988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800098e:	e022      	b.n	80009d6 <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11f      	bne.n	80009d6 <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <SPI_PeriClockControl+0xa8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009aa:	e014      	b.n	80009d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <SPI_PeriClockControl+0xb0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c0:	e009      	b.n	80009d6 <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SPI_PeriClockControl+0xb4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d105      	bne.n	80009d6 <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <SPI_PeriClockControl+0xac>)
 80009d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40013000 	.word	0x40013000
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40003800 	.word	0x40003800
 80009f0:	40003c00 	.word	0x40003c00

080009f4 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff9a 	bl	800093c <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	795b      	ldrb	r3, [r3, #5]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d104      	bne.n	8000a2c <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e014      	b.n	8000a56 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d104      	bne.n	8000a3e <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e00b      	b.n	8000a56 <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d107      	bne.n	8000a56 <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a4c:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a54:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	799b      	ldrb	r3, [r3, #6]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	79db      	ldrb	r3, [r3, #7]
 8000a68:	02db      	lsls	r3, r3, #11
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7a1b      	ldrb	r3, [r3, #8]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7a5b      	ldrb	r3, [r3, #9]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7a9b      	ldrb	r3, [r3, #10]
 8000a90:	025b      	lsls	r3, r3, #9
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << SPI_CR1_SSI);			// Pull SSI high
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	60fb      	str	r3, [r7, #12]

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7adb      	ldrb	r3, [r3, #11]
 8000aa6:	01db      	lsls	r3, r3, #7
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f804 	bl	8000ad4 <SPI_PeripheralControl>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 8000af2:	e005      	b.n	8000b00 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	uint32_t dummy;

	while(len > 0){
 8000b40:	e024      	b.n	8000b8c <SPI_SendData+0x58>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 8000b42:	bf00      	nop
 8000b44:	2102      	movs	r1, #2
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffe0 	bl	8000b0c <SPI_GetFlagStatus>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <SPI_SendData+0x42>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	60da      	str	r2, [r3, #12]
			len--;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
			pTxBuffer += 2;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3302      	adds	r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e00a      	b.n	8000b8c <SPI_SendData+0x58>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]
			while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
				;
			dummy = pSPIx->DR;
			*/

			len--;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
	while(len > 0){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1d7      	bne.n	8000b42 <SPI_SendData+0xe>
		}
	}
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <__libc_init_array>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4d0d      	ldr	r5, [pc, #52]	; (8000bd4 <__libc_init_array+0x38>)
 8000ba0:	4c0d      	ldr	r4, [pc, #52]	; (8000bd8 <__libc_init_array+0x3c>)
 8000ba2:	1b64      	subs	r4, r4, r5
 8000ba4:	10a4      	asrs	r4, r4, #2
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	42a6      	cmp	r6, r4
 8000baa:	d109      	bne.n	8000bc0 <__libc_init_array+0x24>
 8000bac:	4d0b      	ldr	r5, [pc, #44]	; (8000bdc <__libc_init_array+0x40>)
 8000bae:	4c0c      	ldr	r4, [pc, #48]	; (8000be0 <__libc_init_array+0x44>)
 8000bb0:	f000 f818 	bl	8000be4 <_init>
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	10a4      	asrs	r4, r4, #2
 8000bb8:	2600      	movs	r6, #0
 8000bba:	42a6      	cmp	r6, r4
 8000bbc:	d105      	bne.n	8000bca <__libc_init_array+0x2e>
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc4:	4798      	blx	r3
 8000bc6:	3601      	adds	r6, #1
 8000bc8:	e7ee      	b.n	8000ba8 <__libc_init_array+0xc>
 8000bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bce:	4798      	blx	r3
 8000bd0:	3601      	adds	r6, #1
 8000bd2:	e7f2      	b.n	8000bba <__libc_init_array+0x1e>
 8000bd4:	08000c28 	.word	0x08000c28
 8000bd8:	08000c28 	.word	0x08000c28
 8000bdc:	08000c28 	.word	0x08000c28
 8000be0:	08000c2c 	.word	0x08000c2c

08000be4 <_init>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	bf00      	nop
 8000be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bea:	bc08      	pop	{r3}
 8000bec:	469e      	mov	lr, r3
 8000bee:	4770      	bx	lr

08000bf0 <_fini>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr
