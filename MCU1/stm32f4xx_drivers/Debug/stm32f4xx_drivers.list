
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b98  08000b98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba4  08000bac  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000126f  00000000  00000000  00010bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c8  00000000  00000000  00011e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00012218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00012348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021a5  00000000  00000000  00012440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016ee  00000000  00000000  000145e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b7e6  00000000  00000000  00015cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000214b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000400  00000000  00000000  0002150c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b80 	.word	0x08000b80

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b80 	.word	0x08000b80

080001e8 <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a39      	ldr	r2, [pc, #228]	; (80002d8 <SPI2_GPIO_Inits+0xf0>)
 80001f4:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	220f      	movs	r2, #15
 80001fa:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2202      	movs	r2, #2
 8000200:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2203      	movs	r2, #3
 8000206:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2205      	movs	r2, #5
 8000218:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a2e      	ldr	r2, [pc, #184]	; (80002d8 <SPI2_GPIO_Inits+0xf0>)
 800021e:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	220e      	movs	r2, #14
 8000224:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2202      	movs	r2, #2
 800022a:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2203      	movs	r2, #3
 8000230:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2200      	movs	r2, #0
 800023c:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2205      	movs	r2, #5
 8000242:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <SPI2_GPIO_Inits+0xf0>)
 8000248:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	220d      	movs	r2, #13
 800024e:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2202      	movs	r2, #2
 8000254:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2203      	movs	r2, #3
 800025a:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2200      	movs	r2, #0
 8000260:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2205      	movs	r2, #5
 800026e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <SPI2_GPIO_Inits+0xf0>)
 8000276:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	220c      	movs	r2, #12
 800027c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2202      	movs	r2, #2
 8000284:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2203      	movs	r2, #3
 800028c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2200      	movs	r2, #0
 8000294:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2205      	movs	r2, #5
 80002a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_Init(&(SPIPort->MOSI));
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f96e 	bl	800058c <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	330c      	adds	r3, #12
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f969 	bl	800058c <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3318      	adds	r3, #24
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f964 	bl	800058c <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3324      	adds	r3, #36	; 0x24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f95f 	bl	800058c <GPIO_Init>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400

080002dc <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	SPIDevice->pSPIx = SPI2;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <SPI2_Init+0x48>)
 80002e8:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2201      	movs	r2, #1
 80002ee:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2201      	movs	r2, #1
 80002f4:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_SW;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2201      	movs	r2, #1
 8000312:	729a      	strb	r2, [r3, #10]

	SPI_Init(SPIDevice);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 fb3f 	bl	8000998 <SPI_Init>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40003800 	.word	0x40003800

08000328 <main>:

int main(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b092      	sub	sp, #72	; 0x48
 800032c:	af00      	add	r7, sp, #0

	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff58 	bl	80001e8 <SPI2_GPIO_Inits>

	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 8000338:	f107 030c 	add.w	r3, r7, #12
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ffcd 	bl	80002dc <SPI2_Init>

	uint8_t myData[10] = {1,2,3,4,5,6,7,8,9,10};
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <main+0x34>)
 8000344:	463b      	mov	r3, r7
 8000346:	ca07      	ldmia	r2, {r0, r1, r2}
 8000348:	c303      	stmia	r3!, {r0, r1}
 800034a:	801a      	strh	r2, [r3, #0]

	SPI_SendData(mySPIDevice.pSPIx, myData, 10);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4639      	mov	r1, r7
 8000350:	220a      	movs	r2, #10
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fbb9 	bl	8000aca <SPI_SendData>

	while(1);
 8000358:	e7fe      	b.n	8000358 <main+0x30>
 800035a:	bf00      	nop
 800035c:	08000b98 	.word	0x08000b98

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 fbd3 	bl	8000b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ffc9 	bl	8000328 <main>

08000396 <LoopForever>:

LoopForever:
    b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	08000bac 	.word	0x08000bac
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d162      	bne.n	800048c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a66      	ldr	r2, [pc, #408]	; (8000564 <GPIO_PeriClockControl+0x1b0>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003ce:	4b66      	ldr	r3, [pc, #408]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a65      	ldr	r2, [pc, #404]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80003da:	e0bc      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a63      	ldr	r2, [pc, #396]	; (800056c <GPIO_PeriClockControl+0x1b8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e4:	4b60      	ldr	r3, [pc, #384]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a5f      	ldr	r2, [pc, #380]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e0b1      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a5e      	ldr	r2, [pc, #376]	; (8000570 <GPIO_PeriClockControl+0x1bc>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003fa:	4b5b      	ldr	r3, [pc, #364]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a5a      	ldr	r2, [pc, #360]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e0a6      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a5a      	ldr	r2, [pc, #360]	; (8000574 <GPIO_PeriClockControl+0x1c0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000410:	4b55      	ldr	r3, [pc, #340]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a54      	ldr	r2, [pc, #336]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e09b      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a55      	ldr	r2, [pc, #340]	; (8000578 <GPIO_PeriClockControl+0x1c4>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000426:	4b50      	ldr	r3, [pc, #320]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a4f      	ldr	r2, [pc, #316]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e090      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a51      	ldr	r2, [pc, #324]	; (800057c <GPIO_PeriClockControl+0x1c8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800043c:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a49      	ldr	r2, [pc, #292]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e085      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a4c      	ldr	r2, [pc, #304]	; (8000580 <GPIO_PeriClockControl+0x1cc>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000452:	4b45      	ldr	r3, [pc, #276]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a44      	ldr	r2, [pc, #272]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e07a      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a48      	ldr	r2, [pc, #288]	; (8000584 <GPIO_PeriClockControl+0x1d0>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000468:	4b3f      	ldr	r3, [pc, #252]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a3e      	ldr	r2, [pc, #248]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e06f      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a43      	ldr	r2, [pc, #268]	; (8000588 <GPIO_PeriClockControl+0x1d4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d16b      	bne.n	8000556 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 800047e:	4b3a      	ldr	r3, [pc, #232]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a39      	ldr	r2, [pc, #228]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e064      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 800048c:	78fb      	ldrb	r3, [r7, #3]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d161      	bne.n	8000556 <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a33      	ldr	r2, [pc, #204]	; (8000564 <GPIO_PeriClockControl+0x1b0>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a32      	ldr	r2, [pc, #200]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004a0:	f023 0301 	bic.w	r3, r3, #1
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e056      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a30      	ldr	r2, [pc, #192]	; (800056c <GPIO_PeriClockControl+0x1b8>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004b6:	f023 0302 	bic.w	r3, r3, #2
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e04b      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <GPIO_PeriClockControl+0x1bc>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a27      	ldr	r2, [pc, #156]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004cc:	f023 0304 	bic.w	r3, r3, #4
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e040      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <GPIO_PeriClockControl+0x1c0>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a21      	ldr	r2, [pc, #132]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004e2:	f023 0308 	bic.w	r3, r3, #8
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e035      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <GPIO_PeriClockControl+0x1c4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 80004f8:	f023 0310 	bic.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e02a      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a1e      	ldr	r2, [pc, #120]	; (800057c <GPIO_PeriClockControl+0x1c8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a16      	ldr	r2, [pc, #88]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800050e:	f023 0320 	bic.w	r3, r3, #32
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	e01f      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <GPIO_PeriClockControl+0x1cc>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052a:	e014      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <GPIO_PeriClockControl+0x1d0>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800053a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	e009      	b.n	8000556 <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <GPIO_PeriClockControl+0x1d4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d105      	bne.n	8000556 <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <GPIO_PeriClockControl+0x1b4>)
 8000550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000
 8000568:	40023800 	.word	0x40023800
 800056c:	40020400 	.word	0x40020400
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40021000 	.word	0x40021000
 800057c:	40021400 	.word	0x40021400
 8000580:	40021800 	.word	0x40021800
 8000584:	40021c00 	.word	0x40021c00
 8000588:	40022000 	.word	0x40022000

0800058c <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff0a 	bl	80003b4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d820      	bhi.n	80005ee <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	461a      	mov	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	400a      	ands	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6819      	ldr	r1, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e0d0      	b.n	8000790 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d117      	bne.n	8000626 <GPIO_Init+0x9a>
				// 1. Configure the Falling trigger selection register (FTSR)
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b4c      	ldr	r3, [pc, #304]	; (8000728 <GPIO_Init+0x19c>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a48      	ldr	r2, [pc, #288]	; (8000728 <GPIO_Init+0x19c>)
 8000608:	430b      	orrs	r3, r1
 800060a:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b46      	ldr	r3, [pc, #280]	; (8000728 <GPIO_Init+0x19c>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a42      	ldr	r2, [pc, #264]	; (8000728 <GPIO_Init+0x19c>)
 8000620:	400b      	ands	r3, r1
 8000622:	6093      	str	r3, [r2, #8]
 8000624:	e031      	b.n	800068a <GPIO_Init+0xfe>
			} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d117      	bne.n	800065e <GPIO_Init+0xd2>
				// 1. Configure the rising trigger selection register (RTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <GPIO_Init+0x19c>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <GPIO_Init+0x19c>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <GPIO_Init+0x19c>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	43d2      	mvns	r2, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a34      	ldr	r2, [pc, #208]	; (8000728 <GPIO_Init+0x19c>)
 8000658:	400b      	ands	r3, r1
 800065a:	60d3      	str	r3, [r2, #12]
 800065c:	e015      	b.n	800068a <GPIO_Init+0xfe>
			} else {
				// 1. Configure both registers (RSTR and FTSR)
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <GPIO_Init+0x19c>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <GPIO_Init+0x19c>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <GPIO_Init+0x19c>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <GPIO_Init+0x19c>)
 8000686:	430b      	orrs	r3, r1
 8000688:	60d3      	str	r3, [r2, #12]
			}

			// 2. Configure the GPIO port selection in SYSCFG_EXTICR

			SYSCFG_PCLK_EN();
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <GPIO_Init+0x1a0>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <GPIO_Init+0x1a0>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6453      	str	r3, [r2, #68]	; 0x44

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	089b      	lsrs	r3, r3, #2
 800069c:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	f003 0303 	and.w	r3, r3, #3
 80006a6:	74bb      	strb	r3, [r7, #18]

			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <GPIO_Init+0x1a4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d050      	beq.n	8000754 <GPIO_Init+0x1c8>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <GPIO_Init+0x1a8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d032      	beq.n	8000722 <GPIO_Init+0x196>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <GPIO_Init+0x1ac>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d02b      	beq.n	800071e <GPIO_Init+0x192>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <GPIO_Init+0x1b0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d024      	beq.n	800071a <GPIO_Init+0x18e>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <GPIO_Init+0x1b4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d01d      	beq.n	8000716 <GPIO_Init+0x18a>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a19      	ldr	r2, [pc, #100]	; (8000744 <GPIO_Init+0x1b8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d016      	beq.n	8000712 <GPIO_Init+0x186>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <GPIO_Init+0x1bc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d00f      	beq.n	800070e <GPIO_Init+0x182>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <GPIO_Init+0x1c0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d008      	beq.n	800070a <GPIO_Init+0x17e>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <GPIO_Init+0x1c4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <GPIO_Init+0x17a>
 8000702:	2308      	movs	r3, #8
 8000704:	e027      	b.n	8000756 <GPIO_Init+0x1ca>
 8000706:	2300      	movs	r3, #0
 8000708:	e025      	b.n	8000756 <GPIO_Init+0x1ca>
 800070a:	2307      	movs	r3, #7
 800070c:	e023      	b.n	8000756 <GPIO_Init+0x1ca>
 800070e:	2306      	movs	r3, #6
 8000710:	e021      	b.n	8000756 <GPIO_Init+0x1ca>
 8000712:	2305      	movs	r3, #5
 8000714:	e01f      	b.n	8000756 <GPIO_Init+0x1ca>
 8000716:	2304      	movs	r3, #4
 8000718:	e01d      	b.n	8000756 <GPIO_Init+0x1ca>
 800071a:	2303      	movs	r3, #3
 800071c:	e01b      	b.n	8000756 <GPIO_Init+0x1ca>
 800071e:	2302      	movs	r3, #2
 8000720:	e019      	b.n	8000756 <GPIO_Init+0x1ca>
 8000722:	2301      	movs	r3, #1
 8000724:	e017      	b.n	8000756 <GPIO_Init+0x1ca>
 8000726:	bf00      	nop
 8000728:	40013c00 	.word	0x40013c00
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020400 	.word	0x40020400
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40021000 	.word	0x40021000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021800 	.word	0x40021800
 800074c:	40021c00 	.word	0x40021c00
 8000750:	40022000 	.word	0x40022000
 8000754:	2300      	movs	r3, #0
 8000756:	747b      	strb	r3, [r7, #17]

			SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000758:	4a5f      	ldr	r2, [pc, #380]	; (80008d8 <GPIO_Init+0x34c>)
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	3302      	adds	r3, #2
 800075e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000762:	7c79      	ldrb	r1, [r7, #17]
 8000764:	7cbb      	ldrb	r3, [r7, #18]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	4618      	mov	r0, r3
 800076e:	495a      	ldr	r1, [pc, #360]	; (80008d8 <GPIO_Init+0x34c>)
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	4302      	orrs	r2, r0
 8000774:	3302      	adds	r3, #2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// 3. Enable the EXTI interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077a:	4b58      	ldr	r3, [pc, #352]	; (80008dc <GPIO_Init+0x350>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	7912      	ldrb	r2, [r2, #4]
 8000782:	4611      	mov	r1, r2
 8000784:	2201      	movs	r2, #1
 8000786:	408a      	lsls	r2, r1
 8000788:	4611      	mov	r1, r2
 800078a:	4a54      	ldr	r2, [pc, #336]	; (80008dc <GPIO_Init+0x350>)
 800078c:	430b      	orrs	r3, r1
 800078e:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	2103      	movs	r1, #3
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6899      	ldr	r1, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2103      	movs	r1, #3
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	400a      	ands	r2, r1
 8000806:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68d9      	ldr	r1, [r3, #12]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	430a      	orrs	r2, r1
 8000816:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d11f      	bne.n	8000864 <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7a1b      	ldrb	r3, [r3, #8]
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	2301      	movs	r3, #1
 8000842:	408b      	lsls	r3, r1
 8000844:	43db      	mvns	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	400a      	ands	r2, r1
 800084e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	6859      	ldr	r1, [r3, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	430a      	orrs	r2, r1
 800085e:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	795b      	ldrb	r3, [r3, #5]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d131      	bne.n	80008d0 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	7c3a      	ldrb	r2, [r7, #16]
 8000884:	3208      	adds	r2, #8
 8000886:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	220f      	movs	r2, #15
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	7c3a      	ldrb	r2, [r7, #16]
 800089e:	4001      	ands	r1, r0
 80008a0:	3208      	adds	r2, #8
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	7c3a      	ldrb	r2, [r7, #16]
 80008ac:	3208      	adds	r2, #8
 80008ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a5b      	ldrb	r3, [r3, #9]
 80008b6:	461a      	mov	r2, r3
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7c3a      	ldrb	r2, [r7, #16]
 80008c8:	4301      	orrs	r1, r0
 80008ca:	3208      	adds	r2, #8
 80008cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40013800 	.word	0x40013800
 80008dc:	40013c00 	.word	0x40013c00

080008e0 <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d120      	bne.n	8000934 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a24      	ldr	r2, [pc, #144]	; (8000988 <SPI_PeriClockControl+0xa8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <SPI_PeriClockControl+0xac>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <SPI_PeriClockControl+0xac>)
 8000900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8000906:	e038      	b.n	800097a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SPI_PeriClockControl+0xb0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d106      	bne.n	800091e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SPI_PeriClockControl+0xac>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <SPI_PeriClockControl+0xac>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800091c:	e02d      	b.n	800097a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <SPI_PeriClockControl+0xb4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d129      	bne.n	800097a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <SPI_PeriClockControl+0xac>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <SPI_PeriClockControl+0xac>)
 800092c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000932:	e022      	b.n	800097a <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11f      	bne.n	800097a <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <SPI_PeriClockControl+0xa8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d106      	bne.n	8000950 <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <SPI_PeriClockControl+0xac>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <SPI_PeriClockControl+0xac>)
 8000948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800094e:	e014      	b.n	800097a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <SPI_PeriClockControl+0xb0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d106      	bne.n	8000966 <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <SPI_PeriClockControl+0xac>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <SPI_PeriClockControl+0xac>)
 800095e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000964:	e009      	b.n	800097a <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SPI_PeriClockControl+0xb4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d105      	bne.n	800097a <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <SPI_PeriClockControl+0xac>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a06      	ldr	r2, [pc, #24]	; (800098c <SPI_PeriClockControl+0xac>)
 8000974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40013000 	.word	0x40013000
 800098c:	40023800 	.word	0x40023800
 8000990:	40003800 	.word	0x40003800
 8000994:	40003c00 	.word	0x40003c00

08000998 <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff9a 	bl	80008e0 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	795b      	ldrb	r3, [r3, #5]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d104      	bne.n	80009d0 <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e014      	b.n	80009fa <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	795b      	ldrb	r3, [r3, #5]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d104      	bne.n	80009e2 <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00b      	b.n	80009fa <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d107      	bne.n	80009fa <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009f0:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f8:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	799b      	ldrb	r3, [r3, #6]
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	79db      	ldrb	r3, [r3, #7]
 8000a0c:	02db      	lsls	r3, r3, #11
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7a1b      	ldrb	r3, [r3, #8]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7a5b      	ldrb	r3, [r3, #9]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a9b      	ldrb	r3, [r3, #10]
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << SPI_CR1_SSI);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	60fb      	str	r3, [r7, #12]

	// TEMPORARY FOR TESTING CR1 SPE
	// tempreg |= (1 << SPI_CR1_SPE);

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]

	SPI_PeripheralControl(pSPIHandle->pSPIx, ENABLE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f804 	bl	8000a6a <SPI_PeripheralControl>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d106      	bne.n	8000a8a <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 8000a88:	e005      	b.n	8000a96 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
	while(len > 0){
 8000ad6:	e026      	b.n	8000b26 <SPI_SendData+0x5c>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_SR_TXE) == FLAG_RESET)
 8000ad8:	bf00      	nop
 8000ada:	2101      	movs	r1, #1
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff ffe0 	bl	8000aa2 <SPI_GetFlagStatus>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f8      	beq.n	8000ada <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00b      	beq.n	8000b0c <SPI_SendData+0x42>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	60da      	str	r2, [r3, #12]
			len -= 2;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3b02      	subs	r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	e00c      	b.n	8000b26 <SPI_SendData+0x5c>
		} else {
			pSPIx->DR |= *pTxBuffer;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	60da      	str	r2, [r3, #12]
			len--;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
	while(len > 0){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1d5      	bne.n	8000ad8 <SPI_SendData+0xe>
		}
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <__libc_init_array>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4d0d      	ldr	r5, [pc, #52]	; (8000b70 <__libc_init_array+0x38>)
 8000b3c:	4c0d      	ldr	r4, [pc, #52]	; (8000b74 <__libc_init_array+0x3c>)
 8000b3e:	1b64      	subs	r4, r4, r5
 8000b40:	10a4      	asrs	r4, r4, #2
 8000b42:	2600      	movs	r6, #0
 8000b44:	42a6      	cmp	r6, r4
 8000b46:	d109      	bne.n	8000b5c <__libc_init_array+0x24>
 8000b48:	4d0b      	ldr	r5, [pc, #44]	; (8000b78 <__libc_init_array+0x40>)
 8000b4a:	4c0c      	ldr	r4, [pc, #48]	; (8000b7c <__libc_init_array+0x44>)
 8000b4c:	f000 f818 	bl	8000b80 <_init>
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	10a4      	asrs	r4, r4, #2
 8000b54:	2600      	movs	r6, #0
 8000b56:	42a6      	cmp	r6, r4
 8000b58:	d105      	bne.n	8000b66 <__libc_init_array+0x2e>
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
 8000b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b60:	4798      	blx	r3
 8000b62:	3601      	adds	r6, #1
 8000b64:	e7ee      	b.n	8000b44 <__libc_init_array+0xc>
 8000b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6a:	4798      	blx	r3
 8000b6c:	3601      	adds	r6, #1
 8000b6e:	e7f2      	b.n	8000b56 <__libc_init_array+0x1e>
 8000b70:	08000ba4 	.word	0x08000ba4
 8000b74:	08000ba4 	.word	0x08000ba4
 8000b78:	08000ba4 	.word	0x08000ba4
 8000b7c:	08000ba8 	.word	0x08000ba8

08000b80 <_init>:
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	bf00      	nop
 8000b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b86:	bc08      	pop	{r3}
 8000b88:	469e      	mov	lr, r3
 8000b8a:	4770      	bx	lr

08000b8c <_fini>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr
