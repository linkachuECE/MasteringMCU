
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000700  08000708  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000700  08000700  00010708  2**0
                  CONTENTS
  4 .ARM          00000000  08000700  08000700  00010708  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000700  08000708  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000700  08000700  00010700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000704  08000704  00010704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010708  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000092b  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000272  00000000  00000000  00011063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000112d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e39  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000105d  00000000  00000000  00014259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000acbd  00000000  00000000  000152b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001ff73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  0001ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006e8 	.word	0x080006e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006e8 	.word	0x080006e8

080001e8 <delay>:
#include "stm32f407xx.h"

#include <unistd.h>
#include <stdio.h>

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 10000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t LED4;
	LED4.pGPIOx = GPIOD;
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <main+0x68>)
 800021c:	60fb      	str	r3, [r7, #12]
	LED4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021e:	230c      	movs	r3, #12
 8000220:	743b      	strb	r3, [r7, #16]
	LED4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	747b      	strb	r3, [r7, #17]
	LED4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	74bb      	strb	r3, [r7, #18]
	LED4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	74fb      	strb	r3, [r7, #19]
	LED4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022e:	2300      	movs	r3, #0
 8000230:	753b      	strb	r3, [r7, #20]

	GPIO_Handle_t PB1;
	PB1.pGPIOx = GPIOA;
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <main+0x6c>)
 8000234:	603b      	str	r3, [r7, #0]
	PB1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000236:	2300      	movs	r3, #0
 8000238:	713b      	strb	r3, [r7, #4]
	PB1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800023a:	2300      	movs	r3, #0
 800023c:	717b      	strb	r3, [r7, #5]
	PB1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	71bb      	strb	r3, [r7, #6]
	PB1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000246:	2101      	movs	r1, #1
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <main+0x68>)
 800024a:	f000 f845 	bl	80002d8 <GPIO_PeriClockControl>
	GPIO_Init(&LED4);
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f92c 	bl	80004b0 <GPIO_Init>
	GPIO_Init(&PB1);
 8000258:	463b      	mov	r3, r7
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f928 	bl	80004b0 <GPIO_Init>


	while(1){
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)){
 8000260:	2100      	movs	r1, #0
 8000262:	4807      	ldr	r0, [pc, #28]	; (8000280 <main+0x6c>)
 8000264:	f000 f9f0 	bl	8000648 <GPIO_ReadFromInputPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x4c>
			delay();
 800026e:	f7ff ffbb 	bl	80001e8 <delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000272:	210c      	movs	r1, #12
 8000274:	4801      	ldr	r0, [pc, #4]	; (800027c <main+0x68>)
 8000276:	f000 f9fd 	bl	8000674 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)){
 800027a:	e7f1      	b.n	8000260 <main+0x4c>
 800027c:	40020c00 	.word	0x40020c00
 8000280:	40020000 	.word	0x40020000

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f9f5 	bl	80006a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ffad 	bl	8000214 <main>

080002ba <LoopForever>:

LoopForever:
    b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000708 	.word	0x08000708
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d162      	bne.n	80003b0 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a66      	ldr	r2, [pc, #408]	; (8000488 <GPIO_PeriClockControl+0x1b0>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002f2:	4b66      	ldr	r3, [pc, #408]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a65      	ldr	r2, [pc, #404]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80002fe:	e0bc      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a63      	ldr	r2, [pc, #396]	; (8000490 <GPIO_PeriClockControl+0x1b8>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000308:	4b60      	ldr	r3, [pc, #384]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a5f      	ldr	r2, [pc, #380]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000314:	e0b1      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a5e      	ldr	r2, [pc, #376]	; (8000494 <GPIO_PeriClockControl+0x1bc>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800031e:	4b5b      	ldr	r3, [pc, #364]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a5a      	ldr	r2, [pc, #360]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032a:	e0a6      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a5a      	ldr	r2, [pc, #360]	; (8000498 <GPIO_PeriClockControl+0x1c0>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000334:	4b55      	ldr	r3, [pc, #340]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a54      	ldr	r2, [pc, #336]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e09b      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a55      	ldr	r2, [pc, #340]	; (800049c <GPIO_PeriClockControl+0x1c4>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800034a:	4b50      	ldr	r3, [pc, #320]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a4f      	ldr	r2, [pc, #316]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000350:	f043 0310 	orr.w	r3, r3, #16
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e090      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a51      	ldr	r2, [pc, #324]	; (80004a0 <GPIO_PeriClockControl+0x1c8>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000360:	4b4a      	ldr	r3, [pc, #296]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a49      	ldr	r2, [pc, #292]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e085      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a4c      	ldr	r2, [pc, #304]	; (80004a4 <GPIO_PeriClockControl+0x1cc>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000376:	4b45      	ldr	r3, [pc, #276]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a44      	ldr	r2, [pc, #272]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800037c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e07a      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a48      	ldr	r2, [pc, #288]	; (80004a8 <GPIO_PeriClockControl+0x1d0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800038c:	4b3f      	ldr	r3, [pc, #252]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a3e      	ldr	r2, [pc, #248]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e06f      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a43      	ldr	r2, [pc, #268]	; (80004ac <GPIO_PeriClockControl+0x1d4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d16b      	bne.n	800047a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80003a2:	4b3a      	ldr	r3, [pc, #232]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a39      	ldr	r2, [pc, #228]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e064      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d161      	bne.n	800047a <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a33      	ldr	r2, [pc, #204]	; (8000488 <GPIO_PeriClockControl+0x1b0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80003be:	4b33      	ldr	r3, [pc, #204]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ca:	e056      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a30      	ldr	r2, [pc, #192]	; (8000490 <GPIO_PeriClockControl+0x1b8>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003da:	f023 0302 	bic.w	r3, r3, #2
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e04b      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a2b      	ldr	r2, [pc, #172]	; (8000494 <GPIO_PeriClockControl+0x1bc>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80003ea:	4b28      	ldr	r3, [pc, #160]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a27      	ldr	r2, [pc, #156]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 80003f0:	f023 0304 	bic.w	r3, r3, #4
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e040      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a27      	ldr	r2, [pc, #156]	; (8000498 <GPIO_PeriClockControl+0x1c0>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a21      	ldr	r2, [pc, #132]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000406:	f023 0308 	bic.w	r3, r3, #8
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e035      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a22      	ldr	r2, [pc, #136]	; (800049c <GPIO_PeriClockControl+0x1c4>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800041c:	f023 0310 	bic.w	r3, r3, #16
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e02a      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a1e      	ldr	r2, [pc, #120]	; (80004a0 <GPIO_PeriClockControl+0x1c8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a16      	ldr	r2, [pc, #88]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000432:	f023 0320 	bic.w	r3, r3, #32
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e01f      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <GPIO_PeriClockControl+0x1cc>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a11      	ldr	r2, [pc, #68]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e014      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <GPIO_PeriClockControl+0x1d0>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 800045e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e009      	b.n	800047a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <GPIO_PeriClockControl+0x1d4>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a06      	ldr	r2, [pc, #24]	; (800048c <GPIO_PeriClockControl+0x1b4>)
 8000474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40020000 	.word	0x40020000
 800048c:	40023800 	.word	0x40023800
 8000490:	40020400 	.word	0x40020400
 8000494:	40020800 	.word	0x40020800
 8000498:	40020c00 	.word	0x40020c00
 800049c:	40021000 	.word	0x40021000
 80004a0:	40021400 	.word	0x40021400
 80004a4:	40021800 	.word	0x40021800
 80004a8:	40021c00 	.word	0x40021c00
 80004ac:	40022000 	.word	0x40022000

080004b0 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d81f      	bhi.n	8000504 <GPIO_Init+0x54>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2103      	movs	r1, #3
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
			// code later
	}
	temp = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2103      	movs	r1, #3
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	400a      	ands	r2, r1
 8000536:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6899      	ldr	r1, [r3, #8]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	430a      	orrs	r2, r1
 8000546:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	79db      	ldrb	r3, [r3, #7]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	2103      	movs	r1, #3
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	400a      	ands	r2, r1
 800057a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68d9      	ldr	r1, [r3, #12]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	430a      	orrs	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7a1b      	ldrb	r3, [r3, #8]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2301      	movs	r3, #1
 80005ae:	408b      	lsls	r3, r1
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6859      	ldr	r1, [r3, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	605a      	str	r2, [r3, #4]
	temp = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d131      	bne.n	800063c <GPIO_Init+0x18c>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f003 0307 	and.w	r3, r3, #7
 80005e8:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	7afa      	ldrb	r2, [r7, #11]
 80005f0:	3208      	adds	r2, #8
 80005f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005f6:	7abb      	ldrb	r3, [r7, #10]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	7afa      	ldrb	r2, [r7, #11]
 800060a:	4001      	ands	r1, r0
 800060c:	3208      	adds	r2, #8
 800060e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7afa      	ldrb	r2, [r7, #11]
 8000618:	3208      	adds	r2, #8
 800061a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7a5b      	ldrb	r3, [r3, #9]
 8000622:	461a      	mov	r2, r3
 8000624:	7abb      	ldrb	r3, [r7, #10]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	4618      	mov	r0, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	7afa      	ldrb	r2, [r7, #11]
 8000634:	4301      	orrs	r1, r0
 8000636:	3208      	adds	r2, #8
 8000638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	691a      	ldr	r2, [r3, #16]
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	fa22 f303 	lsr.w	r3, r2, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
	return value;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <GPIO_ToggleOutputPin>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	78fa      	ldrb	r2, [r7, #3]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	405a      	eors	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	615a      	str	r2, [r3, #20]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <__libc_init_array>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4d0d      	ldr	r5, [pc, #52]	; (80006d8 <__libc_init_array+0x38>)
 80006a4:	4c0d      	ldr	r4, [pc, #52]	; (80006dc <__libc_init_array+0x3c>)
 80006a6:	1b64      	subs	r4, r4, r5
 80006a8:	10a4      	asrs	r4, r4, #2
 80006aa:	2600      	movs	r6, #0
 80006ac:	42a6      	cmp	r6, r4
 80006ae:	d109      	bne.n	80006c4 <__libc_init_array+0x24>
 80006b0:	4d0b      	ldr	r5, [pc, #44]	; (80006e0 <__libc_init_array+0x40>)
 80006b2:	4c0c      	ldr	r4, [pc, #48]	; (80006e4 <__libc_init_array+0x44>)
 80006b4:	f000 f818 	bl	80006e8 <_init>
 80006b8:	1b64      	subs	r4, r4, r5
 80006ba:	10a4      	asrs	r4, r4, #2
 80006bc:	2600      	movs	r6, #0
 80006be:	42a6      	cmp	r6, r4
 80006c0:	d105      	bne.n	80006ce <__libc_init_array+0x2e>
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c8:	4798      	blx	r3
 80006ca:	3601      	adds	r6, #1
 80006cc:	e7ee      	b.n	80006ac <__libc_init_array+0xc>
 80006ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d2:	4798      	blx	r3
 80006d4:	3601      	adds	r6, #1
 80006d6:	e7f2      	b.n	80006be <__libc_init_array+0x1e>
 80006d8:	08000700 	.word	0x08000700
 80006dc:	08000700 	.word	0x08000700
 80006e0:	08000700 	.word	0x08000700
 80006e4:	08000704 	.word	0x08000704

080006e8 <_init>:
 80006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ea:	bf00      	nop
 80006ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ee:	bc08      	pop	{r3}
 80006f0:	469e      	mov	lr, r3
 80006f2:	4770      	bx	lr

080006f4 <_fini>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr
