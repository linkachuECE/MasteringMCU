
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b1c  08002b1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001959  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000527  00000000  00000000  000219f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  000220d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003162  00000000  00000000  00022248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e33  00000000  00000000  000253aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c4bf  00000000  00000000  000271dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003369c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000122c  00000000  00000000  000336ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028b0 	.word	0x080028b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080028b0 	.word	0x080028b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define	ANALOG_PIN4		4

// Arduino led
#define LED_PIN		9

void delay(void){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 50000; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d9f7      	bls.n	80002ac <delay+0xc>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <SPI2_GPIO_Inits>:
	GPIO_Handle_t MISO;
	GPIO_Handle_t SCK;
	GPIO_Handle_t NSS;
} SPI_GPIO_Pins_t;

void SPI2_GPIO_Inits(SPI_GPIO_Pins_t* SPIPort){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	SPIPort->MOSI.pGPIOx = GPIOB;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a3b      	ldr	r2, [pc, #236]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 80002d8:	601a      	str	r2, [r3, #0]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	220f      	movs	r2, #15
 80002de:	711a      	strb	r2, [r3, #4]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2202      	movs	r2, #2
 80002e4:	715a      	strb	r2, [r3, #5]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2203      	movs	r2, #3
 80002ea:	719a      	strb	r2, [r3, #6]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	71da      	strb	r2, [r3, #7]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	721a      	strb	r2, [r3, #8]
	SPIPort->MOSI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2205      	movs	r2, #5
 80002fc:	725a      	strb	r2, [r3, #9]

	SPIPort->MISO.pGPIOx = GPIOB;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a30      	ldr	r2, [pc, #192]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000302:	60da      	str	r2, [r3, #12]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	220e      	movs	r2, #14
 8000308:	741a      	strb	r2, [r3, #16]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2202      	movs	r2, #2
 800030e:	745a      	strb	r2, [r3, #17]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2203      	movs	r2, #3
 8000314:	749a      	strb	r2, [r3, #18]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	74da      	strb	r2, [r3, #19]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	751a      	strb	r2, [r3, #20]
	SPIPort->MISO.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2205      	movs	r2, #5
 8000326:	755a      	strb	r2, [r3, #21]

	SPIPort->SCK.pGPIOx = GPIOB;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a26      	ldr	r2, [pc, #152]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800032c:	619a      	str	r2, [r3, #24]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	220d      	movs	r2, #13
 8000332:	771a      	strb	r2, [r3, #28]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2202      	movs	r2, #2
 8000338:	775a      	strb	r2, [r3, #29]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2203      	movs	r2, #3
 800033e:	779a      	strb	r2, [r3, #30]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	77da      	strb	r2, [r3, #31]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2020 	strb.w	r2, [r3, #32]
	SPIPort->SCK.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2205      	movs	r2, #5
 8000352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	SPIPort->NSS.pGPIOx = GPIOB;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 800035a:	625a      	str	r2, [r3, #36]	; 0x24
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	220c      	movs	r2, #12
 8000360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2202      	movs	r2, #2
 8000368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2203      	movs	r2, #3
 8000370:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SPIPort->NSS.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2205      	movs	r2, #5
 8000388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800038c:	2101      	movs	r1, #1
 800038e:	480d      	ldr	r0, [pc, #52]	; (80003c4 <SPI2_GPIO_Inits+0xf8>)
 8000390:	f000 faa4 	bl	80008dc <GPIO_PeriClockControl>

	GPIO_Init(&(SPIPort->MOSI));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fb8c 	bl	8000ab4 <GPIO_Init>
	GPIO_Init(&(SPIPort->MISO));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	330c      	adds	r3, #12
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fb87 	bl	8000ab4 <GPIO_Init>
	GPIO_Init(&(SPIPort->SCK));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3318      	adds	r3, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fb82 	bl	8000ab4 <GPIO_Init>
	GPIO_Init(&(SPIPort->NSS));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3324      	adds	r3, #36	; 0x24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fb7d 	bl	8000ab4 <GPIO_Init>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020400 	.word	0x40020400

080003c8 <SPI2_Init>:

void SPI2_Init(SPI_Handle_t* SPIDevice){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	 * - Low Clock polarity, first phase detection
	 * - Hardware controlled slave select
	 * - Single master
	 */

	SPIDevice->pSPIx = SPI2;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <SPI2_Init+0x58>)
 80003d4:	601a      	str	r2, [r3, #0]
	SPIDevice->SPIConfig.DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2201      	movs	r2, #1
 80003da:	711a      	strb	r2, [r3, #4]
	SPIDevice->SPIConfig.BusConfig = SPI_BUS_CONFIG_FD;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	715a      	strb	r2, [r3, #5]
	SPIDevice->SPIConfig.SclkSpeed = SPI_SCLK_SPEED_DIV16;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2203      	movs	r2, #3
 80003e6:	719a      	strb	r2, [r3, #6]
	SPIDevice->SPIConfig.DFF = SPI_DFF_8BITS;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	71da      	strb	r2, [r3, #7]
	SPIDevice->SPIConfig.CPOL = SPI_CPOL_LOW;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	721a      	strb	r2, [r3, #8]
	SPIDevice->SPIConfig.CPHA = SPI_CPHA_FIRST;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	725a      	strb	r2, [r3, #9]
	SPIDevice->SPIConfig.SSM = SPI_SSM_HW;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	729a      	strb	r2, [r3, #10]
	SPIDevice->SPIConfig.FrameFormat = SPI_FRAME_FORMAT_MSBFIRST;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	72da      	strb	r2, [r3, #11]

	SPI_Init(SPIDevice);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fe20 	bl	800104c <SPI_Init>

	// Enable SSOE so that NSS goes low when SPE goes high
	SPI_SSOEControl(SPIDevice->pSPIx, ENABLE);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 febe 	bl	8001194 <SPI_SSOEControl>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40003800 	.word	0x40003800

08000424 <USRBTN_Init>:

void USRBTN_Init(GPIO_Handle_t* USRPB){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	USRPB->pGPIOx = GPIOA;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <USRBTN_Init+0x40>)
 8000430:	601a      	str	r2, [r3, #0]
	USRPB->GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	711a      	strb	r2, [r3, #4]
	USRPB->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	715a      	strb	r2, [r3, #5]
	USRPB->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2202      	movs	r2, #2
 8000442:	719a      	strb	r2, [r3, #6]
	USRPB->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	71da      	strb	r2, [r3, #7]

	GPIO_Init(USRPB);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f000 fb32 	bl	8000ab4 <GPIO_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, 1, ENABLE);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	2006      	movs	r0, #6
 8000456:	f000 fced 	bl	8000e34 <GPIO_IRQInterruptConfig>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000

08000468 <SendCmdGetAckByte>:

void SendCmdGetAckByte(SPI_RegDef_t* pSPIx, uint8_t* cmdCode, uint8_t* ackByte){
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 8000474:	23ff      	movs	r3, #255	; 0xff
 8000476:	75fb      	strb	r3, [r7, #23]
	uint8_t dummyReadByte;

	// Send command code
	SPI_SendData(pSPIx, cmdCode, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f000 feb9 	bl	80011f4 <SPI_SendData>

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 8000482:	f107 0316 	add.w	r3, r7, #22
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	f000 fee3 	bl	8001256 <SPI_ReceiveData>

	// Send dummy byte so that data can be retrieved from slave
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 8000490:	f107 0317 	add.w	r3, r7, #23
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	68f8      	ldr	r0, [r7, #12]
 800049a:	f000 feab 	bl	80011f4 <SPI_SendData>

	// Read the acknowledge byte
	SPI_ReceiveData(pSPIx, ackByte, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 fed7 	bl	8001256 <SPI_ReceiveData>
}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <SPI_Verify_Response>:

uint8_t SPI_Verify_Response(uint8_t ackbyte){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5){
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2bf5      	cmp	r3, #245	; 0xf5
 80004be:	d101      	bne.n	80004c4 <SPI_Verify_Response+0x14>
		//ack
		return 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e000      	b.n	80004c6 <SPI_Verify_Response+0x16>
	}else{
		//nack
		return 0;
 80004c4:	2300      	movs	r3, #0
	}
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <dummyReadDelayWrite>:

void dummyReadDelayWrite(SPI_RegDef_t* pSPIx){
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
	uint8_t dummyWriteByte = 0xFF;
 80004da:	23ff      	movs	r3, #255	; 0xff
 80004dc:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyReadByte;

	// Do dummy read to clear the RXNE register
	SPI_ReceiveData(pSPIx, &dummyReadByte, 1);
 80004de:	f107 030e 	add.w	r3, r7, #14
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 feb5 	bl	8001256 <SPI_ReceiveData>

	// Insert a delay long enough for the arduino to make a measurement
	delay();
 80004ec:	f7ff fed8 	bl	80002a0 <delay>

	// Send a dummy byte
	SPI_SendData(pSPIx, &dummyWriteByte, 1);
 80004f0:	f107 030f 	add.w	r3, r7, #15
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 fe7b 	bl	80011f4 <SPI_SendData>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <main>:

int main(void){
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b0a3      	sub	sp, #140	; 0x8c
 800050c:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 800050e:	f002 f94d 	bl	80027ac <initialise_monitor_handles>
	uint8_t dummy_read;
	uint8_t dummy_write;

	// Initialize the appropriate GPIO pins on port B
	SPI_GPIO_Pins_t spi2Pins;
	SPI2_GPIO_Inits(&spi2Pins);
 8000512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fed8 	bl	80002cc <SPI2_GPIO_Inits>

	// Initialize the SPI2 peripheral
	SPI_Handle_t mySPIDevice;
	SPI2_Init(&mySPIDevice);
 800051c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff51 	bl	80003c8 <SPI2_Init>

	// Initialize user button and interrupts
	GPIO_Handle_t USRPB;
	memset(&USRPB, 0, sizeof(USRPB));
 8000526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052a:	220c      	movs	r2, #12
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fee6 	bl	8001300 <memset>
	USRBTN_Init(&USRPB);
 8000534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff73 	bl	8000424 <USRBTN_Init>

		uint8_t cmdCode;
		uint8_t ackByte;
		uint8_t args[2];

		SPI_PeripheralControl(mySPIDevice.pSPIx, ENABLE);
 800053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fdee 	bl	8001124 <SPI_PeripheralControl>
		printf("SPI Communication opened\n");
 8000548:	48bf      	ldr	r0, [pc, #764]	; (8000848 <main+0x340>)
 800054a:	f000 ff67 	bl	800141c <puts>

		//******** 1. CMD_LED_CTRL *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800054e:	bf00      	nop
 8000550:	2100      	movs	r1, #0
 8000552:	48be      	ldr	r0, [pc, #760]	; (800084c <main+0x344>)
 8000554:	f000 fc58 	bl	8000e08 <GPIO_ReadFromInputPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f8      	beq.n	8000550 <main+0x48>
		delay();
 800055e:	f7ff fe9f 	bl	80002a0 <delay>


		printf("Attempting to do COMMAND_LED_CTRL\n");
 8000562:	48bb      	ldr	r0, [pc, #748]	; (8000850 <main+0x348>)
 8000564:	f000 ff5a 	bl	800141c <puts>

		cmdCode = COMMAND_LED_CTRL;
 8000568:	2350      	movs	r3, #80	; 0x50
 800056a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000574:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff75 	bl	8000468 <SendCmdGetAckByte>

		printf("Ack Byte received from SPI: %#x\n", ackByte);
 800057e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000582:	4619      	mov	r1, r3
 8000584:	48b3      	ldr	r0, [pc, #716]	; (8000854 <main+0x34c>)
 8000586:	f000 fec3 	bl	8001310 <iprintf>

		if(SPI_Verify_Response(ackByte)){
 800058a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff8e 	bl	80004b0 <SPI_Verify_Response>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00f      	beq.n	80005ba <main+0xb2>
			args[0] = LED_PIN;
 800059a:	2309      	movs	r3, #9
 800059c:	f887 3020 	strb.w	r3, [r7, #32]
			args[1] = LED_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			SPI_SendData(mySPIDevice.pSPIx, args, 2);
 80005a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a8:	f107 0120 	add.w	r1, r7, #32
 80005ac:	2202      	movs	r2, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fe20 	bl	80011f4 <SPI_SendData>

			printf("LED_CTRL Executed\n");
 80005b4:	48a8      	ldr	r0, [pc, #672]	; (8000858 <main+0x350>)
 80005b6:	f000 ff31 	bl	800141c <puts>
		}

		//******** 2. CMD_SENSOR_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80005ba:	bf00      	nop
 80005bc:	2100      	movs	r1, #0
 80005be:	48a3      	ldr	r0, [pc, #652]	; (800084c <main+0x344>)
 80005c0:	f000 fc22 	bl	8000e08 <GPIO_ReadFromInputPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f8      	beq.n	80005bc <main+0xb4>
		delay();
 80005ca:	f7ff fe69 	bl	80002a0 <delay>

		printf("Attempting to do COMMAND_SENSOR_READ\n");
 80005ce:	48a3      	ldr	r0, [pc, #652]	; (800085c <main+0x354>)
 80005d0:	f000 ff24 	bl	800141c <puts>

		cmdCode = COMMAND_SENSOR_READ;
 80005d4:	2351      	movs	r3, #81	; 0x51
 80005d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80005da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005dc:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80005e0:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff3f 	bl	8000468 <SendCmdGetAckByte>

		printf("Ack Byte received from SPI: %#x\n", ackByte);
 80005ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80005ee:	4619      	mov	r1, r3
 80005f0:	4898      	ldr	r0, [pc, #608]	; (8000854 <main+0x34c>)
 80005f2:	f000 fe8d 	bl	8001310 <iprintf>

		if(SPI_Verify_Response(ackByte)){
 80005f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff58 	bl	80004b0 <SPI_Verify_Response>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d019      	beq.n	800063a <main+0x132>
			args[0] = ANALOG_PIN0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 800060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060e:	f107 0120 	add.w	r1, r7, #32
 8000612:	2201      	movs	r2, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fded 	bl	80011f4 <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 800061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff58 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t analogRead;
			SPI_ReceiveData(mySPIDevice.pSPIx, &analogRead, 1);
 8000622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000624:	f107 0113 	add.w	r1, r7, #19
 8000628:	2201      	movs	r2, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe13 	bl	8001256 <SPI_ReceiveData>

			printf("Read from analog: %d\n", analogRead);
 8000630:	7cfb      	ldrb	r3, [r7, #19]
 8000632:	4619      	mov	r1, r3
 8000634:	488a      	ldr	r0, [pc, #552]	; (8000860 <main+0x358>)
 8000636:	f000 fe6b 	bl	8001310 <iprintf>
		}

		//******** 3. COMMAND_LED_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800063a:	bf00      	nop
 800063c:	2100      	movs	r1, #0
 800063e:	4883      	ldr	r0, [pc, #524]	; (800084c <main+0x344>)
 8000640:	f000 fbe2 	bl	8000e08 <GPIO_ReadFromInputPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f8      	beq.n	800063c <main+0x134>
		delay();
 800064a:	f7ff fe29 	bl	80002a0 <delay>

		printf("Attempting to do COMMAND_LED_READ\n");
 800064e:	4885      	ldr	r0, [pc, #532]	; (8000864 <main+0x35c>)
 8000650:	f000 fee4 	bl	800141c <puts>
		cmdCode = COMMAND_LED_READ;
 8000654:	2352      	movs	r3, #82	; 0x52
 8000656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000660:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff feff 	bl	8000468 <SendCmdGetAckByte>

		printf("Ack Byte received from SPI: %#x\n", ackByte);
 800066a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800066e:	4619      	mov	r1, r3
 8000670:	4878      	ldr	r0, [pc, #480]	; (8000854 <main+0x34c>)
 8000672:	f000 fe4d 	bl	8001310 <iprintf>

		if(SPI_Verify_Response(ackByte)){
 8000676:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff18 	bl	80004b0 <SPI_Verify_Response>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d019      	beq.n	80006ba <main+0x1b2>
			args[0] = LED_PIN;
 8000686:	2309      	movs	r3, #9
 8000688:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(SPI2, args, 1);
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4874      	ldr	r0, [pc, #464]	; (8000868 <main+0x360>)
 8000696:	f000 fdad 	bl	80011f4 <SPI_SendData>

			dummyReadDelayWrite(mySPIDevice.pSPIx);
 800069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff18 	bl	80004d2 <dummyReadDelayWrite>

			uint8_t ledread;
			SPI_ReceiveData(SPI2, &ledread, 1);
 80006a2:	f107 0312 	add.w	r3, r7, #18
 80006a6:	2201      	movs	r2, #1
 80006a8:	4619      	mov	r1, r3
 80006aa:	486f      	ldr	r0, [pc, #444]	; (8000868 <main+0x360>)
 80006ac:	f000 fdd3 	bl	8001256 <SPI_ReceiveData>

			printf("Read from LED: %d\n", ledread);
 80006b0:	7cbb      	ldrb	r3, [r7, #18]
 80006b2:	4619      	mov	r1, r3
 80006b4:	486d      	ldr	r0, [pc, #436]	; (800086c <main+0x364>)
 80006b6:	f000 fe2b 	bl	8001310 <iprintf>
		}

		//******** 4. COMMAND_PRINT *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80006ba:	bf00      	nop
 80006bc:	2100      	movs	r1, #0
 80006be:	4863      	ldr	r0, [pc, #396]	; (800084c <main+0x344>)
 80006c0:	f000 fba2 	bl	8000e08 <GPIO_ReadFromInputPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f8      	beq.n	80006bc <main+0x1b4>
		delay();
 80006ca:	f7ff fde9 	bl	80002a0 <delay>

		printf("Attempting to do COMMAND_PRINT\n");
 80006ce:	4868      	ldr	r0, [pc, #416]	; (8000870 <main+0x368>)
 80006d0:	f000 fea4 	bl	800141c <puts>

		cmdCode = COMMAND_PRINT;
 80006d4:	2353      	movs	r3, #83	; 0x53
 80006d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80006da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006dc:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80006e0:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff febf 	bl	8000468 <SendCmdGetAckByte>

		printf("Ack Byte received from SPI: %#x\n", ackByte);
 80006ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006ee:	4619      	mov	r1, r3
 80006f0:	4858      	ldr	r0, [pc, #352]	; (8000854 <main+0x34c>)
 80006f2:	f000 fe0d 	bl	8001310 <iprintf>

		if(SPI_Verify_Response(ackByte)){
 80006f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fed8 	bl	80004b0 <SPI_Verify_Response>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d03f      	beq.n	8000786 <main+0x27e>
			uint8_t message[] = "Test message";
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <main+0x36c>)
 8000708:	1d3c      	adds	r4, r7, #4
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	c407      	stmia	r4!, {r0, r1, r2}
 800070e:	7023      	strb	r3, [r4, #0]

			args[0] = strlen((char*)message);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd6c 	bl	80001f0 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f887 3020 	strb.w	r3, [r7, #32]

			SPI_SendData(mySPIDevice.pSPIx, args, 1);
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	f107 0120 	add.w	r1, r7, #32
 8000726:	2201      	movs	r2, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd63 	bl	80011f4 <SPI_SendData>

			// Dummy read
			SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 800072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000730:	f107 0182 	add.w	r1, r7, #130	; 0x82
 8000734:	2201      	movs	r2, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fd8d 	bl	8001256 <SPI_ReceiveData>

			delay();
 800073c:	f7ff fdb0 	bl	80002a0 <delay>

			// Send message
			for(int i = 0; i < args[0]; i++){
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000746:	e014      	b.n	8000772 <main+0x26a>
				SPI_SendData(mySPIDevice.pSPIx, &message[i], 1);
 8000748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800074a:	1d3a      	adds	r2, r7, #4
 800074c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000750:	4413      	add	r3, r2
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f000 fd4d 	bl	80011f4 <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &dummy_read, 1);
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	f107 0182 	add.w	r1, r7, #130	; 0x82
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fd77 	bl	8001256 <SPI_ReceiveData>
			for(int i = 0; i < args[0]; i++){
 8000768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800076c:	3301      	adds	r3, #1
 800076e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000776:	461a      	mov	r2, r3
 8000778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800077c:	4293      	cmp	r3, r2
 800077e:	dbe3      	blt.n	8000748 <main+0x240>
			}

			printf("COMMAND_PRINT executed\n");
 8000780:	483d      	ldr	r0, [pc, #244]	; (8000878 <main+0x370>)
 8000782:	f000 fe4b 	bl	800141c <puts>
		}

		//******** 5. COMMAND_ID_READ *********** //
		while ( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000786:	bf00      	nop
 8000788:	2100      	movs	r1, #0
 800078a:	4830      	ldr	r0, [pc, #192]	; (800084c <main+0x344>)
 800078c:	f000 fb3c 	bl	8000e08 <GPIO_ReadFromInputPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f8      	beq.n	8000788 <main+0x280>
		delay();
 8000796:	f7ff fd83 	bl	80002a0 <delay>

		printf("Attempting to do COMMAND_ID_READ\n");
 800079a:	4838      	ldr	r0, [pc, #224]	; (800087c <main+0x374>)
 800079c:	f000 fe3e 	bl	800141c <puts>

		cmdCode = COMMAND_ID_READ;
 80007a0:	2354      	movs	r3, #84	; 0x54
 80007a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		SendCmdGetAckByte(mySPIDevice.pSPIx, &cmdCode, &ackByte);
 80007a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a8:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80007ac:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe59 	bl	8000468 <SendCmdGetAckByte>

		printf("Ack Byte received from SPI: %#x\n", ackByte);
 80007b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007ba:	4619      	mov	r1, r3
 80007bc:	4825      	ldr	r0, [pc, #148]	; (8000854 <main+0x34c>)
 80007be:	f000 fda7 	bl	8001310 <iprintf>

		uint8_t ID[11];

		if(SPI_Verify_Response(ackByte)){
 80007c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe72 	bl	80004b0 <SPI_Verify_Response>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d025      	beq.n	800081e <main+0x316>

			for(uint8_t i = 0; i < 10; i++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80007d8:	e015      	b.n	8000806 <main+0x2fe>
				SPI_SendData(mySPIDevice.pSPIx, &dummy_write, 1);
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	f107 0181 	add.w	r1, r7, #129	; 0x81
 80007e0:	2201      	movs	r2, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fd06 	bl	80011f4 <SPI_SendData>
				SPI_ReceiveData(mySPIDevice.pSPIx, &ID[i], 1);
 80007e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80007ee:	f107 0214 	add.w	r2, r7, #20
 80007f2:	4413      	add	r3, r2
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 fd2d 	bl	8001256 <SPI_ReceiveData>
			for(uint8_t i = 0; i < 10; i++){
 80007fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000800:	3301      	adds	r3, #1
 8000802:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000806:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800080a:	2b09      	cmp	r3, #9
 800080c:	d9e5      	bls.n	80007da <main+0x2d2>
			}

			ID[11] = '\0';
 800080e:	2300      	movs	r3, #0
 8000810:	77fb      	strb	r3, [r7, #31]

			printf("ID retrieved from COMMAND_ID_READ:%s\n", (char*)ID);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <main+0x378>)
 800081a:	f000 fd79 	bl	8001310 <iprintf>
		}

		delay();
 800081e:	f7ff fd3f 	bl	80002a0 <delay>

		while(SPI_GetFlagStatus(mySPIDevice.pSPIx, SPI_BSY_FLAG));
 8000822:	bf00      	nop
 8000824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fccf 	bl	80011cc <SPI_GetFlagStatus>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f7      	bne.n	8000824 <main+0x31c>
		SPI_PeripheralControl(mySPIDevice.pSPIx, DISABLE);
 8000834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fc73 	bl	8001124 <SPI_PeripheralControl>

		printf("SPI Communication closed\n");
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0x37c>)
 8000840:	f000 fdec 	bl	800141c <puts>
	while(1){
 8000844:	e67b      	b.n	800053e <main+0x36>
 8000846:	bf00      	nop
 8000848:	080028c8 	.word	0x080028c8
 800084c:	40020000 	.word	0x40020000
 8000850:	080028e4 	.word	0x080028e4
 8000854:	08002908 	.word	0x08002908
 8000858:	0800292c 	.word	0x0800292c
 800085c:	08002940 	.word	0x08002940
 8000860:	08002968 	.word	0x08002968
 8000864:	08002980 	.word	0x08002980
 8000868:	40003800 	.word	0x40003800
 800086c:	080029a4 	.word	0x080029a4
 8000870:	080029b8 	.word	0x080029b8
 8000874:	08002a58 	.word	0x08002a58
 8000878:	080029d8 	.word	0x080029d8
 800087c:	080029f0 	.word	0x080029f0
 8000880:	08002a14 	.word	0x08002a14
 8000884:	08002a3c 	.word	0x08002a3c

08000888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008b6:	f000 fcff 	bl	80012b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fe25 	bl	8000508 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008cc:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 80008d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008d4:	2000014c 	.word	0x2000014c

080008d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d162      	bne.n	80009b4 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a66      	ldr	r2, [pc, #408]	; (8000a8c <GPIO_PeriClockControl+0x1b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80008f6:	4b66      	ldr	r3, [pc, #408]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a65      	ldr	r2, [pc, #404]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 8000902:	e0bc      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a63      	ldr	r2, [pc, #396]	; (8000a94 <GPIO_PeriClockControl+0x1b8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800090c:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000918:	e0b1      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a5e      	ldr	r2, [pc, #376]	; (8000a98 <GPIO_PeriClockControl+0x1bc>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000922:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a5a      	ldr	r2, [pc, #360]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092e:	e0a6      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a5a      	ldr	r2, [pc, #360]	; (8000a9c <GPIO_PeriClockControl+0x1c0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000938:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000944:	e09b      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a55      	ldr	r2, [pc, #340]	; (8000aa0 <GPIO_PeriClockControl+0x1c4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095a:	e090      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a51      	ldr	r2, [pc, #324]	; (8000aa4 <GPIO_PeriClockControl+0x1c8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000964:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a49      	ldr	r2, [pc, #292]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000970:	e085      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <GPIO_PeriClockControl+0x1cc>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800097a:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000986:	e07a      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a48      	ldr	r2, [pc, #288]	; (8000aac <GPIO_PeriClockControl+0x1d0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a3e      	ldr	r2, [pc, #248]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099c:	e06f      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a43      	ldr	r2, [pc, #268]	; (8000ab0 <GPIO_PeriClockControl+0x1d4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d16b      	bne.n	8000a7e <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a39      	ldr	r2, [pc, #228]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b2:	e064      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
	} else if (EnorDi == DISABLE){
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d161      	bne.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <GPIO_PeriClockControl+0x1b0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ce:	e056      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a30      	ldr	r2, [pc, #192]	; (8000a94 <GPIO_PeriClockControl+0x1b8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009de:	f023 0302 	bic.w	r3, r3, #2
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e4:	e04b      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <GPIO_PeriClockControl+0x1bc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 80009f4:	f023 0304 	bic.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fa:	e040      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <GPIO_PeriClockControl+0x1c0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a0a:	f023 0308 	bic.w	r3, r3, #8
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a10:	e035      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <GPIO_PeriClockControl+0x1c4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a20:	f023 0310 	bic.w	r3, r3, #16
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a26:	e02a      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <GPIO_PeriClockControl+0x1c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a36:	f023 0320 	bic.w	r3, r3, #32
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3c:	e01f      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <GPIO_PeriClockControl+0x1cc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a52:	e014      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <GPIO_PeriClockControl+0x1d0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a68:	e009      	b.n	8000a7e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <GPIO_PeriClockControl+0x1d4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d105      	bne.n	8000a7e <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <GPIO_PeriClockControl+0x1b4>)
 8000a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40021c00 	.word	0x40021c00
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <GPIO_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff0a 	bl	80008dc <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
	// 1. Configure the mode of the GPIO pin

	// This block will execute if the pin mode is a non-interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	795b      	ldrb	r3, [r3, #5]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d820      	bhi.n	8000b16 <GPIO_Init+0x62>
		// this temp variable stores the appropriate pin mode shifted by the number of bits
		// it takes to get to the appropriate bits for the pin in the port mode register.
		// The "2" multiplier is there because there are two bits per pin
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2103      	movs	r1, #3
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;  // settting
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e0d0      	b.n	8000cb8 <GPIO_Init+0x204>
	}
	// This block will execute if the pin mode is an interrupt mode
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	795b      	ldrb	r3, [r3, #5]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d117      	bne.n	8000b4e <GPIO_Init+0x9a>
			// 1. Configure the Falling trigger selection register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <GPIO_Init+0x19c>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	7912      	ldrb	r2, [r2, #4]
 8000b26:	4611      	mov	r1, r2
 8000b28:	2201      	movs	r2, #1
 8000b2a:	408a      	lsls	r2, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a48      	ldr	r2, [pc, #288]	; (8000c50 <GPIO_Init+0x19c>)
 8000b30:	430b      	orrs	r3, r1
 8000b32:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b34:	4b46      	ldr	r3, [pc, #280]	; (8000c50 <GPIO_Init+0x19c>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	7912      	ldrb	r2, [r2, #4]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	2201      	movs	r2, #1
 8000b40:	408a      	lsls	r2, r1
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a42      	ldr	r2, [pc, #264]	; (8000c50 <GPIO_Init+0x19c>)
 8000b48:	400b      	ands	r3, r1
 8000b4a:	6093      	str	r3, [r2, #8]
 8000b4c:	e031      	b.n	8000bb2 <GPIO_Init+0xfe>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d117      	bne.n	8000b86 <GPIO_Init+0xd2>
			// 1. Configure the rising trigger selection register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <GPIO_Init+0x19c>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	7912      	ldrb	r2, [r2, #4]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	2201      	movs	r2, #1
 8000b62:	408a      	lsls	r2, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	4a3a      	ldr	r2, [pc, #232]	; (8000c50 <GPIO_Init+0x19c>)
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6c:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <GPIO_Init+0x19c>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	7912      	ldrb	r2, [r2, #4]
 8000b74:	4611      	mov	r1, r2
 8000b76:	2201      	movs	r2, #1
 8000b78:	408a      	lsls	r2, r1
 8000b7a:	43d2      	mvns	r2, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <GPIO_Init+0x19c>)
 8000b80:	400b      	ands	r3, r1
 8000b82:	60d3      	str	r3, [r2, #12]
 8000b84:	e015      	b.n	8000bb2 <GPIO_Init+0xfe>
		} else {
			// 1. Configure both registers (RSTR and FTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <GPIO_Init+0x19c>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	7912      	ldrb	r2, [r2, #4]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	2201      	movs	r2, #1
 8000b92:	408a      	lsls	r2, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <GPIO_Init+0x19c>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <GPIO_Init+0x19c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	7912      	ldrb	r2, [r2, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	408a      	lsls	r2, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <GPIO_Init+0x19c>)
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <GPIO_Init+0x1a0>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <GPIO_Init+0x1a0>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <GPIO_Init+0x1a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d050      	beq.n	8000c7c <GPIO_Init+0x1c8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <GPIO_Init+0x1a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d032      	beq.n	8000c4a <GPIO_Init+0x196>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <GPIO_Init+0x1ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d02b      	beq.n	8000c46 <GPIO_Init+0x192>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <GPIO_Init+0x1b0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d024      	beq.n	8000c42 <GPIO_Init+0x18e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <GPIO_Init+0x1b4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d01d      	beq.n	8000c3e <GPIO_Init+0x18a>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <GPIO_Init+0x1b8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d016      	beq.n	8000c3a <GPIO_Init+0x186>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <GPIO_Init+0x1bc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00f      	beq.n	8000c36 <GPIO_Init+0x182>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <GPIO_Init+0x1c0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d008      	beq.n	8000c32 <GPIO_Init+0x17e>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <GPIO_Init+0x1c4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <GPIO_Init+0x17a>
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	e027      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e025      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c32:	2307      	movs	r3, #7
 8000c34:	e023      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c36:	2306      	movs	r3, #6
 8000c38:	e021      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e01f      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e01d      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e01b      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e019      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e017      	b.n	8000c7e <GPIO_Init+0x1ca>
 8000c4e:	bf00      	nop
 8000c50:	40013c00 	.word	0x40013c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40021c00 	.word	0x40021c00
 8000c78:	40022000 	.word	0x40022000
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000c80:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <GPIO_Init+0x34c>)
 8000c82:	7cfb      	ldrb	r3, [r7, #19]
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8a:	7c79      	ldrb	r1, [r7, #17]
 8000c8c:	7cbb      	ldrb	r3, [r7, #18]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	495a      	ldr	r1, [pc, #360]	; (8000e00 <GPIO_Init+0x34c>)
 8000c98:	7cfb      	ldrb	r3, [r7, #19]
 8000c9a:	4302      	orrs	r2, r0
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ca2:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <GPIO_Init+0x350>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	7912      	ldrb	r2, [r2, #4]
 8000caa:	4611      	mov	r1, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	408a      	lsls	r2, r1
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a54      	ldr	r2, [pc, #336]	; (8000e04 <GPIO_Init+0x350>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2103      	movs	r1, #3
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	400a      	ands	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6899      	ldr	r1, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	79db      	ldrb	r3, [r3, #7]
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	791b      	ldrb	r3, [r3, #4]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2103      	movs	r1, #3
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68d9      	ldr	r1, [r3, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	795b      	ldrb	r3, [r3, #5]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d11f      	bne.n	8000d8c <GPIO_Init+0x2d8>
		// 4. Configure the output type
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7a1b      	ldrb	r3, [r3, #8]
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	4619      	mov	r1, r3
 8000d68:	2301      	movs	r3, #1
 8000d6a:	408b      	lsls	r3, r1
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4619      	mov	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	400a      	ands	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6859      	ldr	r1, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	605a      	str	r2, [r3, #4]
		temp = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	}

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	795b      	ldrb	r3, [r3, #5]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d131      	bne.n	8000df8 <GPIO_Init+0x344>
		uint8_t temp1, temp2;
		// set temp equal to the alternate functionality mode, bit-shifted to the left by modulus 8 of the pin number multiplied by 4
		// The modulo is because there are two AFR registers, and the 4-times multiplication is because each pin is represented by 4 bits
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	7c3a      	ldrb	r2, [r7, #16]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	7c3a      	ldrb	r2, [r7, #16]
 8000dc6:	4001      	ands	r1, r0
 8000dc8:	3208      	adds	r2, #8
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7c3a      	ldrb	r2, [r7, #16]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7a5b      	ldrb	r3, [r3, #9]
 8000dde:	461a      	mov	r2, r3
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	7c3a      	ldrb	r2, [r7, #16]
 8000df0:	4301      	orrs	r1, r0
 8000df2:	3208      	adds	r2, #8
 8000df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40013c00 	.word	0x40013c00

08000e08 <GPIO_ReadFromInputPin>:
 *
 * @return		- Value read, either 1 or 0
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <GPIO_IRQInterruptConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE){
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d133      	bne.n	8000eb2 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b1f      	cmp	r3, #31
 8000e4e:	d80a      	bhi.n	8000e66 <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <GPIO_IRQInterruptConfig+0xf8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4a33      	ldr	r2, [pc, #204]	; (8000f2c <GPIO_IRQInterruptConfig+0xf8>)
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e058      	b.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b1f      	cmp	r3, #31
 8000e6a:	d90f      	bls.n	8000e8c <GPIO_IRQInterruptConfig+0x58>
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e70:	d80c      	bhi.n	8000e8c <GPIO_IRQInterruptConfig+0x58>
			// Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <GPIO_IRQInterruptConfig+0xfc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	f002 021f 	and.w	r2, r2, #31
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e82:	4611      	mov	r1, r2
 8000e84:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <GPIO_IRQInterruptConfig+0xfc>)
 8000e86:	430b      	orrs	r3, r1
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e045      	b.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e90:	d942      	bls.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b5f      	cmp	r3, #95	; 0x5f
 8000e96:	d83f      	bhi.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
			// Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <GPIO_IRQInterruptConfig+0x100>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <GPIO_IRQInterruptConfig+0x100>)
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e032      	b.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
		}
	} else {
		if (IRQNumber >= 0 && IRQNumber <= 31){
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b1f      	cmp	r3, #31
 8000eb6:	d80a      	bhi.n	8000ece <GPIO_IRQInterruptConfig+0x9a>
			// Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <GPIO_IRQInterruptConfig+0x104>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <GPIO_IRQInterruptConfig+0x104>)
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e024      	b.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 32 && IRQNumber <= 63) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b1f      	cmp	r3, #31
 8000ed2:	d90f      	bls.n	8000ef4 <GPIO_IRQInterruptConfig+0xc0>
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ed8:	d80c      	bhi.n	8000ef4 <GPIO_IRQInterruptConfig+0xc0>
			// Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <GPIO_IRQInterruptConfig+0x108>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	f002 021f 	and.w	r2, r2, #31
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <GPIO_IRQInterruptConfig+0x108>)
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e011      	b.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
		} else if (IRQNumber >= 64 && IRQNumber <= 95) {
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef8:	d90e      	bls.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b5f      	cmp	r3, #95	; 0x5f
 8000efe:	d80b      	bhi.n	8000f18 <GPIO_IRQInterruptConfig+0xe4>
			// Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <GPIO_IRQInterruptConfig+0x10c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	f002 021f 	and.w	r2, r2, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <GPIO_IRQInterruptConfig+0x10c>)
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6013      	str	r3, [r2, #0]
		}
	}

	GPIO_IRQPriorityConfig(IRQNumber, IRQPriority);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f811 	bl	8000f44 <GPIO_IRQPriorityConfig>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000e104 	.word	0xe000e104
 8000f34:	e000e108 	.word	0xe000e108
 8000f38:	e000e180 	.word	0xe000e180
 8000f3c:	e000e184 	.word	0xe000e184
 8000f40:	e000e188 	.word	0xe000e188

08000f44 <GPIO_IRQPriorityConfig>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PRIORITY_BITS_IMPLEMENTED);
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	737b      	strb	r3, [r7, #13]

	__vo uint32_t* iprReg = (__vo uint32_t*)(NVIC_IPR_BASE_ADDR + (4 * iprx));
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f70:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f74:	60bb      	str	r3, [r7, #8]

	*iprReg |= (IRQPriority << (shift_amount));
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	431a      	orrs	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SPI_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d120      	bne.n	8000fe8 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <SPI_PeriClockControl+0xa8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d106      	bne.n	8000fbc <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI2)
			SPI2_PCLK_DI();
		else if (pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 8000fba:	e038      	b.n	800102e <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <SPI_PeriClockControl+0xb0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d106      	bne.n	8000fd2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fd0:	e02d      	b.n	800102e <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <SPI_PeriClockControl+0xb4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d129      	bne.n	800102e <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_EN();
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a18      	ldr	r2, [pc, #96]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fe6:	e022      	b.n	800102e <SPI_PeriClockControl+0x9a>
	} else if (EnorDi == DISABLE){
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11f      	bne.n	800102e <SPI_PeriClockControl+0x9a>
		if(pSPIx == SPI1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <SPI_PeriClockControl+0xa8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <SPI_PeriClockControl+0x70>
			SPI1_PCLK_DI();
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SPI_PeriClockControl+0xac>)
 8000ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001002:	e014      	b.n	800102e <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <SPI_PeriClockControl+0xb0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d106      	bne.n	800101a <SPI_PeriClockControl+0x86>
			SPI2_PCLK_DI();
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <SPI_PeriClockControl+0xac>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <SPI_PeriClockControl+0xac>)
 8001012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001018:	e009      	b.n	800102e <SPI_PeriClockControl+0x9a>
		else if (pSPIx == SPI3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SPI_PeriClockControl+0xb4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d105      	bne.n	800102e <SPI_PeriClockControl+0x9a>
			SPI3_PCLK_DI();
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <SPI_PeriClockControl+0xac>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <SPI_PeriClockControl+0xac>)
 8001028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40013000 	.word	0x40013000
 8001040:	40023800 	.word	0x40023800
 8001044:	40003800 	.word	0x40003800
 8001048:	40003c00 	.word	0x40003c00

0800104c <SPI_Init>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff9a 	bl	8000f94 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

	// 1. Master/Slave configuration
	tempreg |= (pSPIHandle->SPIConfig.DeviceMode << SPI_CR1_MSTR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_FD){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d104      	bne.n	8001084 <SPI_Init+0x38>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e014      	b.n	80010ae <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_HD){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d104      	bne.n	8001096 <SPI_Init+0x4a>
		// Bi-directional mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e00b      	b.n	80010ae <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	795b      	ldrb	r3, [r3, #5]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d107      	bne.n	80010ae <SPI_Init+0x62>
		// Bi-directional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010a4:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ac:	60fb      	str	r3, [r7, #12]
	}

	// 3. Clock speed configuration
	tempreg |= (pSPIHandle->SPIConfig.SclkSpeed << SPI_CR1_BR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

	// 4. DFF Configuration
	tempreg |= (pSPIHandle->SPIConfig.DFF << SPI_CR1_DFF);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	79db      	ldrb	r3, [r3, #7]
 80010c0:	02db      	lsls	r3, r3, #11
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

	// 5. CPOL Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPOL << SPI_CR1_CPOL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7a1b      	ldrb	r3, [r3, #8]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

	// 6. CPHA Configuration
	tempreg |= (pSPIHandle->SPIConfig.CPHA << SPI_CR1_CPHA);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7a5b      	ldrb	r3, [r3, #9]
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

	// 7. SSM Configuration
	tempreg |= (pSPIHandle->SPIConfig.SSM << SPI_CR1_SSM);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7a9b      	ldrb	r3, [r3, #10]
 80010e8:	025b      	lsls	r3, r3, #9
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
	SPI_SSIControl(pSPIHandle->pSPIx, ENABLE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2101      	movs	r1, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f82f 	bl	800115c <SPI_SSIControl>

	// 8. Frame Format Configuration
	tempreg |= (pSPIHandle->SPIConfig.FrameFormat << SPI_CR1_LSB_FIRST);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7adb      	ldrb	r3, [r3, #11]
 8001102:	01db      	lsls	r3, r3, #7
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <SPI_PeripheralControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeripheralControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d106      	bne.n	8001144 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
}
 8001142:	e005      	b.n	8001150 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SPI_SSIControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSIControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d106      	bne.n	800117c <SPI_SSIControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);			// Pull SSI high
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
	else
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
}
 800117a:	e005      	b.n	8001188 <SPI_SSIControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <SPI_SSOEControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SSOEControl(SPI_RegDef_t * pSPIx, uint8_t EnorDi){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d106      	bne.n	80011b4 <SPI_SSOEControl+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f043 0204 	orr.w	r2, r3, #4
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
	else
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
}
 80011b2:	e005      	b.n	80011c0 <SPI_SSOEControl+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 0204 	bic.w	r2, r3, #4
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SPI_GetFlagStatus>:
 *
 * @return		- Boolean which says whether the FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SPI_SendData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t len){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	// Dummy variable for reading from the data register
	// uint32_t dummy;

	while(len > 0){
 8001200:	e021      	b.n	8001246 <SPI_SendData+0x52>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET)
 8001202:	bf00      	nop
 8001204:	2102      	movs	r1, #2
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff ffe0 	bl	80011cc <SPI_GetFlagStatus>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f8      	beq.n	8001204 <SPI_SendData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <SPI_SendData+0x3c>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	60da      	str	r2, [r3, #12]
			pTxBuffer += 2;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3302      	adds	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	e007      	b.n	8001240 <SPI_SendData+0x4c>
		} else {
			pSPIx->DR = *((uint8_t*)pTxBuffer);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3301      	adds	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1da      	bne.n	8001202 <SPI_SendData+0xe>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <SPI_ReceiveData>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t* pRxBuffer, uint32_t len){
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	while(len > 0){
 8001262:	e021      	b.n	80012a8 <SPI_ReceiveData+0x52>
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
 8001264:	bf00      	nop
 8001266:	2101      	movs	r1, #1
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff ffaf 	bl	80011cc <SPI_GetFlagStatus>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f8      	beq.n	8001266 <SPI_ReceiveData+0x10>
			;

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <SPI_ReceiveData+0x3c>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	b29a      	uxth	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	801a      	strh	r2, [r3, #0]
			pRxBuffer += 2;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3302      	adds	r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	e007      	b.n	80012a2 <SPI_ReceiveData+0x4c>
		} else {
			*((uint8_t*)pRxBuffer) = pSPIx->DR;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
		}
		len--;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
	while(len > 0){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1da      	bne.n	8001264 <SPI_ReceiveData+0xe>
	}
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <__libc_init_array>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4d0d      	ldr	r5, [pc, #52]	; (80012f0 <__libc_init_array+0x38>)
 80012bc:	4c0d      	ldr	r4, [pc, #52]	; (80012f4 <__libc_init_array+0x3c>)
 80012be:	1b64      	subs	r4, r4, r5
 80012c0:	10a4      	asrs	r4, r4, #2
 80012c2:	2600      	movs	r6, #0
 80012c4:	42a6      	cmp	r6, r4
 80012c6:	d109      	bne.n	80012dc <__libc_init_array+0x24>
 80012c8:	4d0b      	ldr	r5, [pc, #44]	; (80012f8 <__libc_init_array+0x40>)
 80012ca:	4c0c      	ldr	r4, [pc, #48]	; (80012fc <__libc_init_array+0x44>)
 80012cc:	f001 faf0 	bl	80028b0 <_init>
 80012d0:	1b64      	subs	r4, r4, r5
 80012d2:	10a4      	asrs	r4, r4, #2
 80012d4:	2600      	movs	r6, #0
 80012d6:	42a6      	cmp	r6, r4
 80012d8:	d105      	bne.n	80012e6 <__libc_init_array+0x2e>
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e0:	4798      	blx	r3
 80012e2:	3601      	adds	r6, #1
 80012e4:	e7ee      	b.n	80012c4 <__libc_init_array+0xc>
 80012e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ea:	4798      	blx	r3
 80012ec:	3601      	adds	r6, #1
 80012ee:	e7f2      	b.n	80012d6 <__libc_init_array+0x1e>
 80012f0:	08002b1c 	.word	0x08002b1c
 80012f4:	08002b1c 	.word	0x08002b1c
 80012f8:	08002b1c 	.word	0x08002b1c
 80012fc:	08002b20 	.word	0x08002b20

08001300 <memset>:
 8001300:	4402      	add	r2, r0
 8001302:	4603      	mov	r3, r0
 8001304:	4293      	cmp	r3, r2
 8001306:	d100      	bne.n	800130a <memset+0xa>
 8001308:	4770      	bx	lr
 800130a:	f803 1b01 	strb.w	r1, [r3], #1
 800130e:	e7f9      	b.n	8001304 <memset+0x4>

08001310 <iprintf>:
 8001310:	b40f      	push	{r0, r1, r2, r3}
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <iprintf+0x2c>)
 8001314:	b513      	push	{r0, r1, r4, lr}
 8001316:	681c      	ldr	r4, [r3, #0]
 8001318:	b124      	cbz	r4, 8001324 <iprintf+0x14>
 800131a:	69a3      	ldr	r3, [r4, #24]
 800131c:	b913      	cbnz	r3, 8001324 <iprintf+0x14>
 800131e:	4620      	mov	r0, r4
 8001320:	f000 fa5e 	bl	80017e0 <__sinit>
 8001324:	ab05      	add	r3, sp, #20
 8001326:	9a04      	ldr	r2, [sp, #16]
 8001328:	68a1      	ldr	r1, [r4, #8]
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	4620      	mov	r0, r4
 800132e:	f000 fc67 	bl	8001c00 <_vfiprintf_r>
 8001332:	b002      	add	sp, #8
 8001334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001338:	b004      	add	sp, #16
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000

08001340 <_puts_r>:
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	460e      	mov	r6, r1
 8001344:	4605      	mov	r5, r0
 8001346:	b118      	cbz	r0, 8001350 <_puts_r+0x10>
 8001348:	6983      	ldr	r3, [r0, #24]
 800134a:	b90b      	cbnz	r3, 8001350 <_puts_r+0x10>
 800134c:	f000 fa48 	bl	80017e0 <__sinit>
 8001350:	69ab      	ldr	r3, [r5, #24]
 8001352:	68ac      	ldr	r4, [r5, #8]
 8001354:	b913      	cbnz	r3, 800135c <_puts_r+0x1c>
 8001356:	4628      	mov	r0, r5
 8001358:	f000 fa42 	bl	80017e0 <__sinit>
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <_puts_r+0xd0>)
 800135e:	429c      	cmp	r4, r3
 8001360:	d120      	bne.n	80013a4 <_puts_r+0x64>
 8001362:	686c      	ldr	r4, [r5, #4]
 8001364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001366:	07db      	lsls	r3, r3, #31
 8001368:	d405      	bmi.n	8001376 <_puts_r+0x36>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	0598      	lsls	r0, r3, #22
 800136e:	d402      	bmi.n	8001376 <_puts_r+0x36>
 8001370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001372:	f000 fad3 	bl	800191c <__retarget_lock_acquire_recursive>
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	0719      	lsls	r1, r3, #28
 800137a:	d51d      	bpl.n	80013b8 <_puts_r+0x78>
 800137c:	6923      	ldr	r3, [r4, #16]
 800137e:	b1db      	cbz	r3, 80013b8 <_puts_r+0x78>
 8001380:	3e01      	subs	r6, #1
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001388:	3b01      	subs	r3, #1
 800138a:	60a3      	str	r3, [r4, #8]
 800138c:	bb39      	cbnz	r1, 80013de <_puts_r+0x9e>
 800138e:	2b00      	cmp	r3, #0
 8001390:	da38      	bge.n	8001404 <_puts_r+0xc4>
 8001392:	4622      	mov	r2, r4
 8001394:	210a      	movs	r1, #10
 8001396:	4628      	mov	r0, r5
 8001398:	f000 f848 	bl	800142c <__swbuf_r>
 800139c:	3001      	adds	r0, #1
 800139e:	d011      	beq.n	80013c4 <_puts_r+0x84>
 80013a0:	250a      	movs	r5, #10
 80013a2:	e011      	b.n	80013c8 <_puts_r+0x88>
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <_puts_r+0xd4>)
 80013a6:	429c      	cmp	r4, r3
 80013a8:	d101      	bne.n	80013ae <_puts_r+0x6e>
 80013aa:	68ac      	ldr	r4, [r5, #8]
 80013ac:	e7da      	b.n	8001364 <_puts_r+0x24>
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <_puts_r+0xd8>)
 80013b0:	429c      	cmp	r4, r3
 80013b2:	bf08      	it	eq
 80013b4:	68ec      	ldreq	r4, [r5, #12]
 80013b6:	e7d5      	b.n	8001364 <_puts_r+0x24>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4628      	mov	r0, r5
 80013bc:	f000 f888 	bl	80014d0 <__swsetup_r>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d0dd      	beq.n	8001380 <_puts_r+0x40>
 80013c4:	f04f 35ff 	mov.w	r5, #4294967295
 80013c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013ca:	07da      	lsls	r2, r3, #31
 80013cc:	d405      	bmi.n	80013da <_puts_r+0x9a>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	d402      	bmi.n	80013da <_puts_r+0x9a>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f000 faa2 	bl	800191e <__retarget_lock_release_recursive>
 80013da:	4628      	mov	r0, r5
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da04      	bge.n	80013ec <_puts_r+0xac>
 80013e2:	69a2      	ldr	r2, [r4, #24]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dc06      	bgt.n	80013f6 <_puts_r+0xb6>
 80013e8:	290a      	cmp	r1, #10
 80013ea:	d004      	beq.n	80013f6 <_puts_r+0xb6>
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	6022      	str	r2, [r4, #0]
 80013f2:	7019      	strb	r1, [r3, #0]
 80013f4:	e7c5      	b.n	8001382 <_puts_r+0x42>
 80013f6:	4622      	mov	r2, r4
 80013f8:	4628      	mov	r0, r5
 80013fa:	f000 f817 	bl	800142c <__swbuf_r>
 80013fe:	3001      	adds	r0, #1
 8001400:	d1bf      	bne.n	8001382 <_puts_r+0x42>
 8001402:	e7df      	b.n	80013c4 <_puts_r+0x84>
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	250a      	movs	r5, #10
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	6022      	str	r2, [r4, #0]
 800140c:	701d      	strb	r5, [r3, #0]
 800140e:	e7db      	b.n	80013c8 <_puts_r+0x88>
 8001410:	08002a8c 	.word	0x08002a8c
 8001414:	08002aac 	.word	0x08002aac
 8001418:	08002a6c 	.word	0x08002a6c

0800141c <puts>:
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <puts+0xc>)
 800141e:	4601      	mov	r1, r0
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f7ff bf8d 	b.w	8001340 <_puts_r>
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <__swbuf_r>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	460e      	mov	r6, r1
 8001430:	4614      	mov	r4, r2
 8001432:	4605      	mov	r5, r0
 8001434:	b118      	cbz	r0, 800143e <__swbuf_r+0x12>
 8001436:	6983      	ldr	r3, [r0, #24]
 8001438:	b90b      	cbnz	r3, 800143e <__swbuf_r+0x12>
 800143a:	f000 f9d1 	bl	80017e0 <__sinit>
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <__swbuf_r+0x98>)
 8001440:	429c      	cmp	r4, r3
 8001442:	d12b      	bne.n	800149c <__swbuf_r+0x70>
 8001444:	686c      	ldr	r4, [r5, #4]
 8001446:	69a3      	ldr	r3, [r4, #24]
 8001448:	60a3      	str	r3, [r4, #8]
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	071a      	lsls	r2, r3, #28
 800144e:	d52f      	bpl.n	80014b0 <__swbuf_r+0x84>
 8001450:	6923      	ldr	r3, [r4, #16]
 8001452:	b36b      	cbz	r3, 80014b0 <__swbuf_r+0x84>
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	1ac0      	subs	r0, r0, r3
 800145a:	6963      	ldr	r3, [r4, #20]
 800145c:	b2f6      	uxtb	r6, r6
 800145e:	4283      	cmp	r3, r0
 8001460:	4637      	mov	r7, r6
 8001462:	dc04      	bgt.n	800146e <__swbuf_r+0x42>
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
 8001468:	f000 f926 	bl	80016b8 <_fflush_r>
 800146c:	bb30      	cbnz	r0, 80014bc <__swbuf_r+0x90>
 800146e:	68a3      	ldr	r3, [r4, #8]
 8001470:	3b01      	subs	r3, #1
 8001472:	60a3      	str	r3, [r4, #8]
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	6022      	str	r2, [r4, #0]
 800147a:	701e      	strb	r6, [r3, #0]
 800147c:	6963      	ldr	r3, [r4, #20]
 800147e:	3001      	adds	r0, #1
 8001480:	4283      	cmp	r3, r0
 8001482:	d004      	beq.n	800148e <__swbuf_r+0x62>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	07db      	lsls	r3, r3, #31
 8001488:	d506      	bpl.n	8001498 <__swbuf_r+0x6c>
 800148a:	2e0a      	cmp	r6, #10
 800148c:	d104      	bne.n	8001498 <__swbuf_r+0x6c>
 800148e:	4621      	mov	r1, r4
 8001490:	4628      	mov	r0, r5
 8001492:	f000 f911 	bl	80016b8 <_fflush_r>
 8001496:	b988      	cbnz	r0, 80014bc <__swbuf_r+0x90>
 8001498:	4638      	mov	r0, r7
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <__swbuf_r+0x9c>)
 800149e:	429c      	cmp	r4, r3
 80014a0:	d101      	bne.n	80014a6 <__swbuf_r+0x7a>
 80014a2:	68ac      	ldr	r4, [r5, #8]
 80014a4:	e7cf      	b.n	8001446 <__swbuf_r+0x1a>
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <__swbuf_r+0xa0>)
 80014a8:	429c      	cmp	r4, r3
 80014aa:	bf08      	it	eq
 80014ac:	68ec      	ldreq	r4, [r5, #12]
 80014ae:	e7ca      	b.n	8001446 <__swbuf_r+0x1a>
 80014b0:	4621      	mov	r1, r4
 80014b2:	4628      	mov	r0, r5
 80014b4:	f000 f80c 	bl	80014d0 <__swsetup_r>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d0cb      	beq.n	8001454 <__swbuf_r+0x28>
 80014bc:	f04f 37ff 	mov.w	r7, #4294967295
 80014c0:	e7ea      	b.n	8001498 <__swbuf_r+0x6c>
 80014c2:	bf00      	nop
 80014c4:	08002a8c 	.word	0x08002a8c
 80014c8:	08002aac 	.word	0x08002aac
 80014cc:	08002a6c 	.word	0x08002a6c

080014d0 <__swsetup_r>:
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <__swsetup_r+0xcc>)
 80014d2:	b570      	push	{r4, r5, r6, lr}
 80014d4:	681d      	ldr	r5, [r3, #0]
 80014d6:	4606      	mov	r6, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	b125      	cbz	r5, 80014e6 <__swsetup_r+0x16>
 80014dc:	69ab      	ldr	r3, [r5, #24]
 80014de:	b913      	cbnz	r3, 80014e6 <__swsetup_r+0x16>
 80014e0:	4628      	mov	r0, r5
 80014e2:	f000 f97d 	bl	80017e0 <__sinit>
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <__swsetup_r+0xd0>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d10f      	bne.n	800150c <__swsetup_r+0x3c>
 80014ec:	686c      	ldr	r4, [r5, #4]
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014f4:	0719      	lsls	r1, r3, #28
 80014f6:	d42c      	bmi.n	8001552 <__swsetup_r+0x82>
 80014f8:	06dd      	lsls	r5, r3, #27
 80014fa:	d411      	bmi.n	8001520 <__swsetup_r+0x50>
 80014fc:	2309      	movs	r3, #9
 80014fe:	6033      	str	r3, [r6, #0]
 8001500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	e03e      	b.n	800158a <__swsetup_r+0xba>
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <__swsetup_r+0xd4>)
 800150e:	429c      	cmp	r4, r3
 8001510:	d101      	bne.n	8001516 <__swsetup_r+0x46>
 8001512:	68ac      	ldr	r4, [r5, #8]
 8001514:	e7eb      	b.n	80014ee <__swsetup_r+0x1e>
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <__swsetup_r+0xd8>)
 8001518:	429c      	cmp	r4, r3
 800151a:	bf08      	it	eq
 800151c:	68ec      	ldreq	r4, [r5, #12]
 800151e:	e7e6      	b.n	80014ee <__swsetup_r+0x1e>
 8001520:	0758      	lsls	r0, r3, #29
 8001522:	d512      	bpl.n	800154a <__swsetup_r+0x7a>
 8001524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001526:	b141      	cbz	r1, 800153a <__swsetup_r+0x6a>
 8001528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800152c:	4299      	cmp	r1, r3
 800152e:	d002      	beq.n	8001536 <__swsetup_r+0x66>
 8001530:	4630      	mov	r0, r6
 8001532:	f000 fa5b 	bl	80019ec <_free_r>
 8001536:	2300      	movs	r3, #0
 8001538:	6363      	str	r3, [r4, #52]	; 0x34
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	6063      	str	r3, [r4, #4]
 8001546:	6923      	ldr	r3, [r4, #16]
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	89a3      	ldrh	r3, [r4, #12]
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	81a3      	strh	r3, [r4, #12]
 8001552:	6923      	ldr	r3, [r4, #16]
 8001554:	b94b      	cbnz	r3, 800156a <__swsetup_r+0x9a>
 8001556:	89a3      	ldrh	r3, [r4, #12]
 8001558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d003      	beq.n	800156a <__swsetup_r+0x9a>
 8001562:	4621      	mov	r1, r4
 8001564:	4630      	mov	r0, r6
 8001566:	f000 fa01 	bl	800196c <__smakebuf_r>
 800156a:	89a0      	ldrh	r0, [r4, #12]
 800156c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001570:	f010 0301 	ands.w	r3, r0, #1
 8001574:	d00a      	beq.n	800158c <__swsetup_r+0xbc>
 8001576:	2300      	movs	r3, #0
 8001578:	60a3      	str	r3, [r4, #8]
 800157a:	6963      	ldr	r3, [r4, #20]
 800157c:	425b      	negs	r3, r3
 800157e:	61a3      	str	r3, [r4, #24]
 8001580:	6923      	ldr	r3, [r4, #16]
 8001582:	b943      	cbnz	r3, 8001596 <__swsetup_r+0xc6>
 8001584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001588:	d1ba      	bne.n	8001500 <__swsetup_r+0x30>
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	0781      	lsls	r1, r0, #30
 800158e:	bf58      	it	pl
 8001590:	6963      	ldrpl	r3, [r4, #20]
 8001592:	60a3      	str	r3, [r4, #8]
 8001594:	e7f4      	b.n	8001580 <__swsetup_r+0xb0>
 8001596:	2000      	movs	r0, #0
 8001598:	e7f7      	b.n	800158a <__swsetup_r+0xba>
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000
 80015a0:	08002a8c 	.word	0x08002a8c
 80015a4:	08002aac 	.word	0x08002aac
 80015a8:	08002a6c 	.word	0x08002a6c

080015ac <__sflush_r>:
 80015ac:	898a      	ldrh	r2, [r1, #12]
 80015ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b2:	4605      	mov	r5, r0
 80015b4:	0710      	lsls	r0, r2, #28
 80015b6:	460c      	mov	r4, r1
 80015b8:	d458      	bmi.n	800166c <__sflush_r+0xc0>
 80015ba:	684b      	ldr	r3, [r1, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dc05      	bgt.n	80015cc <__sflush_r+0x20>
 80015c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dc02      	bgt.n	80015cc <__sflush_r+0x20>
 80015c6:	2000      	movs	r0, #0
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d0f9      	beq.n	80015c6 <__sflush_r+0x1a>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015d8:	682f      	ldr	r7, [r5, #0]
 80015da:	602b      	str	r3, [r5, #0]
 80015dc:	d032      	beq.n	8001644 <__sflush_r+0x98>
 80015de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	075a      	lsls	r2, r3, #29
 80015e4:	d505      	bpl.n	80015f2 <__sflush_r+0x46>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	1ac0      	subs	r0, r0, r3
 80015ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015ec:	b10b      	cbz	r3, 80015f2 <__sflush_r+0x46>
 80015ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f0:	1ac0      	subs	r0, r0, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	4602      	mov	r2, r0
 80015f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	4628      	mov	r0, r5
 80015fc:	47b0      	blx	r6
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	d106      	bne.n	8001612 <__sflush_r+0x66>
 8001604:	6829      	ldr	r1, [r5, #0]
 8001606:	291d      	cmp	r1, #29
 8001608:	d82c      	bhi.n	8001664 <__sflush_r+0xb8>
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <__sflush_r+0x108>)
 800160c:	40ca      	lsrs	r2, r1
 800160e:	07d6      	lsls	r6, r2, #31
 8001610:	d528      	bpl.n	8001664 <__sflush_r+0xb8>
 8001612:	2200      	movs	r2, #0
 8001614:	6062      	str	r2, [r4, #4]
 8001616:	04d9      	lsls	r1, r3, #19
 8001618:	6922      	ldr	r2, [r4, #16]
 800161a:	6022      	str	r2, [r4, #0]
 800161c:	d504      	bpl.n	8001628 <__sflush_r+0x7c>
 800161e:	1c42      	adds	r2, r0, #1
 8001620:	d101      	bne.n	8001626 <__sflush_r+0x7a>
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	b903      	cbnz	r3, 8001628 <__sflush_r+0x7c>
 8001626:	6560      	str	r0, [r4, #84]	; 0x54
 8001628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800162a:	602f      	str	r7, [r5, #0]
 800162c:	2900      	cmp	r1, #0
 800162e:	d0ca      	beq.n	80015c6 <__sflush_r+0x1a>
 8001630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001634:	4299      	cmp	r1, r3
 8001636:	d002      	beq.n	800163e <__sflush_r+0x92>
 8001638:	4628      	mov	r0, r5
 800163a:	f000 f9d7 	bl	80019ec <_free_r>
 800163e:	2000      	movs	r0, #0
 8001640:	6360      	str	r0, [r4, #52]	; 0x34
 8001642:	e7c1      	b.n	80015c8 <__sflush_r+0x1c>
 8001644:	6a21      	ldr	r1, [r4, #32]
 8001646:	2301      	movs	r3, #1
 8001648:	4628      	mov	r0, r5
 800164a:	47b0      	blx	r6
 800164c:	1c41      	adds	r1, r0, #1
 800164e:	d1c7      	bne.n	80015e0 <__sflush_r+0x34>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0c4      	beq.n	80015e0 <__sflush_r+0x34>
 8001656:	2b1d      	cmp	r3, #29
 8001658:	d001      	beq.n	800165e <__sflush_r+0xb2>
 800165a:	2b16      	cmp	r3, #22
 800165c:	d101      	bne.n	8001662 <__sflush_r+0xb6>
 800165e:	602f      	str	r7, [r5, #0]
 8001660:	e7b1      	b.n	80015c6 <__sflush_r+0x1a>
 8001662:	89a3      	ldrh	r3, [r4, #12]
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7ad      	b.n	80015c8 <__sflush_r+0x1c>
 800166c:	690f      	ldr	r7, [r1, #16]
 800166e:	2f00      	cmp	r7, #0
 8001670:	d0a9      	beq.n	80015c6 <__sflush_r+0x1a>
 8001672:	0793      	lsls	r3, r2, #30
 8001674:	680e      	ldr	r6, [r1, #0]
 8001676:	bf08      	it	eq
 8001678:	694b      	ldreq	r3, [r1, #20]
 800167a:	600f      	str	r7, [r1, #0]
 800167c:	bf18      	it	ne
 800167e:	2300      	movne	r3, #0
 8001680:	eba6 0807 	sub.w	r8, r6, r7
 8001684:	608b      	str	r3, [r1, #8]
 8001686:	f1b8 0f00 	cmp.w	r8, #0
 800168a:	dd9c      	ble.n	80015c6 <__sflush_r+0x1a>
 800168c:	6a21      	ldr	r1, [r4, #32]
 800168e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001690:	4643      	mov	r3, r8
 8001692:	463a      	mov	r2, r7
 8001694:	4628      	mov	r0, r5
 8001696:	47b0      	blx	r6
 8001698:	2800      	cmp	r0, #0
 800169a:	dc06      	bgt.n	80016aa <__sflush_r+0xfe>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e78e      	b.n	80015c8 <__sflush_r+0x1c>
 80016aa:	4407      	add	r7, r0
 80016ac:	eba8 0800 	sub.w	r8, r8, r0
 80016b0:	e7e9      	b.n	8001686 <__sflush_r+0xda>
 80016b2:	bf00      	nop
 80016b4:	20400001 	.word	0x20400001

080016b8 <_fflush_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	690b      	ldr	r3, [r1, #16]
 80016bc:	4605      	mov	r5, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	b913      	cbnz	r3, 80016c8 <_fflush_r+0x10>
 80016c2:	2500      	movs	r5, #0
 80016c4:	4628      	mov	r0, r5
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	b118      	cbz	r0, 80016d2 <_fflush_r+0x1a>
 80016ca:	6983      	ldr	r3, [r0, #24]
 80016cc:	b90b      	cbnz	r3, 80016d2 <_fflush_r+0x1a>
 80016ce:	f000 f887 	bl	80017e0 <__sinit>
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <_fflush_r+0x6c>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d11b      	bne.n	8001710 <_fflush_r+0x58>
 80016d8:	686c      	ldr	r4, [r5, #4]
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ef      	beq.n	80016c2 <_fflush_r+0xa>
 80016e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016e4:	07d0      	lsls	r0, r2, #31
 80016e6:	d404      	bmi.n	80016f2 <_fflush_r+0x3a>
 80016e8:	0599      	lsls	r1, r3, #22
 80016ea:	d402      	bmi.n	80016f2 <_fflush_r+0x3a>
 80016ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ee:	f000 f915 	bl	800191c <__retarget_lock_acquire_recursive>
 80016f2:	4628      	mov	r0, r5
 80016f4:	4621      	mov	r1, r4
 80016f6:	f7ff ff59 	bl	80015ac <__sflush_r>
 80016fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016fc:	07da      	lsls	r2, r3, #31
 80016fe:	4605      	mov	r5, r0
 8001700:	d4e0      	bmi.n	80016c4 <_fflush_r+0xc>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	059b      	lsls	r3, r3, #22
 8001706:	d4dd      	bmi.n	80016c4 <_fflush_r+0xc>
 8001708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800170a:	f000 f908 	bl	800191e <__retarget_lock_release_recursive>
 800170e:	e7d9      	b.n	80016c4 <_fflush_r+0xc>
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <_fflush_r+0x70>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <_fflush_r+0x62>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7df      	b.n	80016da <_fflush_r+0x22>
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <_fflush_r+0x74>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7da      	b.n	80016da <_fflush_r+0x22>
 8001724:	08002a8c 	.word	0x08002a8c
 8001728:	08002aac 	.word	0x08002aac
 800172c:	08002a6c 	.word	0x08002a6c

08001730 <std>:
 8001730:	2300      	movs	r3, #0
 8001732:	b510      	push	{r4, lr}
 8001734:	4604      	mov	r4, r0
 8001736:	e9c0 3300 	strd	r3, r3, [r0]
 800173a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800173e:	6083      	str	r3, [r0, #8]
 8001740:	8181      	strh	r1, [r0, #12]
 8001742:	6643      	str	r3, [r0, #100]	; 0x64
 8001744:	81c2      	strh	r2, [r0, #14]
 8001746:	6183      	str	r3, [r0, #24]
 8001748:	4619      	mov	r1, r3
 800174a:	2208      	movs	r2, #8
 800174c:	305c      	adds	r0, #92	; 0x5c
 800174e:	f7ff fdd7 	bl	8001300 <memset>
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <std+0x38>)
 8001754:	6263      	str	r3, [r4, #36]	; 0x24
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <std+0x3c>)
 8001758:	62a3      	str	r3, [r4, #40]	; 0x28
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <std+0x40>)
 800175c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <std+0x44>)
 8001760:	6224      	str	r4, [r4, #32]
 8001762:	6323      	str	r3, [r4, #48]	; 0x30
 8001764:	bd10      	pop	{r4, pc}
 8001766:	bf00      	nop
 8001768:	080021a9 	.word	0x080021a9
 800176c:	080021cb 	.word	0x080021cb
 8001770:	08002203 	.word	0x08002203
 8001774:	08002227 	.word	0x08002227

08001778 <_cleanup_r>:
 8001778:	4901      	ldr	r1, [pc, #4]	; (8001780 <_cleanup_r+0x8>)
 800177a:	f000 b8af 	b.w	80018dc <_fwalk_reent>
 800177e:	bf00      	nop
 8001780:	080016b9 	.word	0x080016b9

08001784 <__sfmoreglue>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	2268      	movs	r2, #104	; 0x68
 8001788:	1e4d      	subs	r5, r1, #1
 800178a:	4355      	muls	r5, r2
 800178c:	460e      	mov	r6, r1
 800178e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001792:	f000 f997 	bl	8001ac4 <_malloc_r>
 8001796:	4604      	mov	r4, r0
 8001798:	b140      	cbz	r0, 80017ac <__sfmoreglue+0x28>
 800179a:	2100      	movs	r1, #0
 800179c:	e9c0 1600 	strd	r1, r6, [r0]
 80017a0:	300c      	adds	r0, #12
 80017a2:	60a0      	str	r0, [r4, #8]
 80017a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017a8:	f7ff fdaa 	bl	8001300 <memset>
 80017ac:	4620      	mov	r0, r4
 80017ae:	bd70      	pop	{r4, r5, r6, pc}

080017b0 <__sfp_lock_acquire>:
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <__sfp_lock_acquire+0x8>)
 80017b2:	f000 b8b3 	b.w	800191c <__retarget_lock_acquire_recursive>
 80017b6:	bf00      	nop
 80017b8:	2000008d 	.word	0x2000008d

080017bc <__sfp_lock_release>:
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <__sfp_lock_release+0x8>)
 80017be:	f000 b8ae 	b.w	800191e <__retarget_lock_release_recursive>
 80017c2:	bf00      	nop
 80017c4:	2000008d 	.word	0x2000008d

080017c8 <__sinit_lock_acquire>:
 80017c8:	4801      	ldr	r0, [pc, #4]	; (80017d0 <__sinit_lock_acquire+0x8>)
 80017ca:	f000 b8a7 	b.w	800191c <__retarget_lock_acquire_recursive>
 80017ce:	bf00      	nop
 80017d0:	2000008e 	.word	0x2000008e

080017d4 <__sinit_lock_release>:
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <__sinit_lock_release+0x8>)
 80017d6:	f000 b8a2 	b.w	800191e <__retarget_lock_release_recursive>
 80017da:	bf00      	nop
 80017dc:	2000008e 	.word	0x2000008e

080017e0 <__sinit>:
 80017e0:	b510      	push	{r4, lr}
 80017e2:	4604      	mov	r4, r0
 80017e4:	f7ff fff0 	bl	80017c8 <__sinit_lock_acquire>
 80017e8:	69a3      	ldr	r3, [r4, #24]
 80017ea:	b11b      	cbz	r3, 80017f4 <__sinit+0x14>
 80017ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f0:	f7ff bff0 	b.w	80017d4 <__sinit_lock_release>
 80017f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017f8:	6523      	str	r3, [r4, #80]	; 0x50
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <__sinit+0x68>)
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <__sinit+0x6c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	62a2      	str	r2, [r4, #40]	; 0x28
 8001802:	42a3      	cmp	r3, r4
 8001804:	bf04      	itt	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	61a3      	streq	r3, [r4, #24]
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f820 	bl	8001850 <__sfp>
 8001810:	6060      	str	r0, [r4, #4]
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f81c 	bl	8001850 <__sfp>
 8001818:	60a0      	str	r0, [r4, #8]
 800181a:	4620      	mov	r0, r4
 800181c:	f000 f818 	bl	8001850 <__sfp>
 8001820:	2200      	movs	r2, #0
 8001822:	60e0      	str	r0, [r4, #12]
 8001824:	2104      	movs	r1, #4
 8001826:	6860      	ldr	r0, [r4, #4]
 8001828:	f7ff ff82 	bl	8001730 <std>
 800182c:	68a0      	ldr	r0, [r4, #8]
 800182e:	2201      	movs	r2, #1
 8001830:	2109      	movs	r1, #9
 8001832:	f7ff ff7d 	bl	8001730 <std>
 8001836:	68e0      	ldr	r0, [r4, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	2112      	movs	r1, #18
 800183c:	f7ff ff78 	bl	8001730 <std>
 8001840:	2301      	movs	r3, #1
 8001842:	61a3      	str	r3, [r4, #24]
 8001844:	e7d2      	b.n	80017ec <__sinit+0xc>
 8001846:	bf00      	nop
 8001848:	08002a68 	.word	0x08002a68
 800184c:	08001779 	.word	0x08001779

08001850 <__sfp>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	4607      	mov	r7, r0
 8001854:	f7ff ffac 	bl	80017b0 <__sfp_lock_acquire>
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <__sfp+0x84>)
 800185a:	681e      	ldr	r6, [r3, #0]
 800185c:	69b3      	ldr	r3, [r6, #24]
 800185e:	b913      	cbnz	r3, 8001866 <__sfp+0x16>
 8001860:	4630      	mov	r0, r6
 8001862:	f7ff ffbd 	bl	80017e0 <__sinit>
 8001866:	3648      	adds	r6, #72	; 0x48
 8001868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800186c:	3b01      	subs	r3, #1
 800186e:	d503      	bpl.n	8001878 <__sfp+0x28>
 8001870:	6833      	ldr	r3, [r6, #0]
 8001872:	b30b      	cbz	r3, 80018b8 <__sfp+0x68>
 8001874:	6836      	ldr	r6, [r6, #0]
 8001876:	e7f7      	b.n	8001868 <__sfp+0x18>
 8001878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800187c:	b9d5      	cbnz	r5, 80018b4 <__sfp+0x64>
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <__sfp+0x88>)
 8001880:	60e3      	str	r3, [r4, #12]
 8001882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001886:	6665      	str	r5, [r4, #100]	; 0x64
 8001888:	f000 f847 	bl	800191a <__retarget_lock_init_recursive>
 800188c:	f7ff ff96 	bl	80017bc <__sfp_lock_release>
 8001890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001898:	6025      	str	r5, [r4, #0]
 800189a:	61a5      	str	r5, [r4, #24]
 800189c:	2208      	movs	r2, #8
 800189e:	4629      	mov	r1, r5
 80018a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018a4:	f7ff fd2c 	bl	8001300 <memset>
 80018a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018b0:	4620      	mov	r0, r4
 80018b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b4:	3468      	adds	r4, #104	; 0x68
 80018b6:	e7d9      	b.n	800186c <__sfp+0x1c>
 80018b8:	2104      	movs	r1, #4
 80018ba:	4638      	mov	r0, r7
 80018bc:	f7ff ff62 	bl	8001784 <__sfmoreglue>
 80018c0:	4604      	mov	r4, r0
 80018c2:	6030      	str	r0, [r6, #0]
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d1d5      	bne.n	8001874 <__sfp+0x24>
 80018c8:	f7ff ff78 	bl	80017bc <__sfp_lock_release>
 80018cc:	230c      	movs	r3, #12
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	e7ee      	b.n	80018b0 <__sfp+0x60>
 80018d2:	bf00      	nop
 80018d4:	08002a68 	.word	0x08002a68
 80018d8:	ffff0001 	.word	0xffff0001

080018dc <_fwalk_reent>:
 80018dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018e0:	4606      	mov	r6, r0
 80018e2:	4688      	mov	r8, r1
 80018e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e8:	2700      	movs	r7, #0
 80018ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ee:	f1b9 0901 	subs.w	r9, r9, #1
 80018f2:	d505      	bpl.n	8001900 <_fwalk_reent+0x24>
 80018f4:	6824      	ldr	r4, [r4, #0]
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d1f7      	bne.n	80018ea <_fwalk_reent+0xe>
 80018fa:	4638      	mov	r0, r7
 80018fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001900:	89ab      	ldrh	r3, [r5, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d907      	bls.n	8001916 <_fwalk_reent+0x3a>
 8001906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800190a:	3301      	adds	r3, #1
 800190c:	d003      	beq.n	8001916 <_fwalk_reent+0x3a>
 800190e:	4629      	mov	r1, r5
 8001910:	4630      	mov	r0, r6
 8001912:	47c0      	blx	r8
 8001914:	4307      	orrs	r7, r0
 8001916:	3568      	adds	r5, #104	; 0x68
 8001918:	e7e9      	b.n	80018ee <_fwalk_reent+0x12>

0800191a <__retarget_lock_init_recursive>:
 800191a:	4770      	bx	lr

0800191c <__retarget_lock_acquire_recursive>:
 800191c:	4770      	bx	lr

0800191e <__retarget_lock_release_recursive>:
 800191e:	4770      	bx	lr

08001920 <__swhatbuf_r>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	460e      	mov	r6, r1
 8001924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001928:	2900      	cmp	r1, #0
 800192a:	b096      	sub	sp, #88	; 0x58
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	da08      	bge.n	8001944 <__swhatbuf_r+0x24>
 8001932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	602a      	str	r2, [r5, #0]
 800193a:	061a      	lsls	r2, r3, #24
 800193c:	d410      	bmi.n	8001960 <__swhatbuf_r+0x40>
 800193e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001942:	e00e      	b.n	8001962 <__swhatbuf_r+0x42>
 8001944:	466a      	mov	r2, sp
 8001946:	f000 fc95 	bl	8002274 <_fstat_r>
 800194a:	2800      	cmp	r0, #0
 800194c:	dbf1      	blt.n	8001932 <__swhatbuf_r+0x12>
 800194e:	9a01      	ldr	r2, [sp, #4]
 8001950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001958:	425a      	negs	r2, r3
 800195a:	415a      	adcs	r2, r3
 800195c:	602a      	str	r2, [r5, #0]
 800195e:	e7ee      	b.n	800193e <__swhatbuf_r+0x1e>
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	2000      	movs	r0, #0
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	b016      	add	sp, #88	; 0x58
 8001968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800196c <__smakebuf_r>:
 800196c:	898b      	ldrh	r3, [r1, #12]
 800196e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001970:	079d      	lsls	r5, r3, #30
 8001972:	4606      	mov	r6, r0
 8001974:	460c      	mov	r4, r1
 8001976:	d507      	bpl.n	8001988 <__smakebuf_r+0x1c>
 8001978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	6123      	str	r3, [r4, #16]
 8001980:	2301      	movs	r3, #1
 8001982:	6163      	str	r3, [r4, #20]
 8001984:	b002      	add	sp, #8
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	ab01      	add	r3, sp, #4
 800198a:	466a      	mov	r2, sp
 800198c:	f7ff ffc8 	bl	8001920 <__swhatbuf_r>
 8001990:	9900      	ldr	r1, [sp, #0]
 8001992:	4605      	mov	r5, r0
 8001994:	4630      	mov	r0, r6
 8001996:	f000 f895 	bl	8001ac4 <_malloc_r>
 800199a:	b948      	cbnz	r0, 80019b0 <__smakebuf_r+0x44>
 800199c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a0:	059a      	lsls	r2, r3, #22
 80019a2:	d4ef      	bmi.n	8001984 <__smakebuf_r+0x18>
 80019a4:	f023 0303 	bic.w	r3, r3, #3
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	e7e3      	b.n	8001978 <__smakebuf_r+0xc>
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <__smakebuf_r+0x7c>)
 80019b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80019b4:	89a3      	ldrh	r3, [r4, #12]
 80019b6:	6020      	str	r0, [r4, #0]
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	81a3      	strh	r3, [r4, #12]
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	6163      	str	r3, [r4, #20]
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	6120      	str	r0, [r4, #16]
 80019c6:	b15b      	cbz	r3, 80019e0 <__smakebuf_r+0x74>
 80019c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019cc:	4630      	mov	r0, r6
 80019ce:	f000 fc63 	bl	8002298 <_isatty_r>
 80019d2:	b128      	cbz	r0, 80019e0 <__smakebuf_r+0x74>
 80019d4:	89a3      	ldrh	r3, [r4, #12]
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	81a3      	strh	r3, [r4, #12]
 80019e0:	89a0      	ldrh	r0, [r4, #12]
 80019e2:	4305      	orrs	r5, r0
 80019e4:	81a5      	strh	r5, [r4, #12]
 80019e6:	e7cd      	b.n	8001984 <__smakebuf_r+0x18>
 80019e8:	08001779 	.word	0x08001779

080019ec <_free_r>:
 80019ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d044      	beq.n	8001a7c <_free_r+0x90>
 80019f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019f6:	9001      	str	r0, [sp, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f1a1 0404 	sub.w	r4, r1, #4
 80019fe:	bfb8      	it	lt
 8001a00:	18e4      	addlt	r4, r4, r3
 8001a02:	f000 fc6b 	bl	80022dc <__malloc_lock>
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <_free_r+0x94>)
 8001a08:	9801      	ldr	r0, [sp, #4]
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	b933      	cbnz	r3, 8001a1c <_free_r+0x30>
 8001a0e:	6063      	str	r3, [r4, #4]
 8001a10:	6014      	str	r4, [r2, #0]
 8001a12:	b003      	add	sp, #12
 8001a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a18:	f000 bc66 	b.w	80022e8 <__malloc_unlock>
 8001a1c:	42a3      	cmp	r3, r4
 8001a1e:	d908      	bls.n	8001a32 <_free_r+0x46>
 8001a20:	6825      	ldr	r5, [r4, #0]
 8001a22:	1961      	adds	r1, r4, r5
 8001a24:	428b      	cmp	r3, r1
 8001a26:	bf01      	itttt	eq
 8001a28:	6819      	ldreq	r1, [r3, #0]
 8001a2a:	685b      	ldreq	r3, [r3, #4]
 8001a2c:	1949      	addeq	r1, r1, r5
 8001a2e:	6021      	streq	r1, [r4, #0]
 8001a30:	e7ed      	b.n	8001a0e <_free_r+0x22>
 8001a32:	461a      	mov	r2, r3
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	b10b      	cbz	r3, 8001a3c <_free_r+0x50>
 8001a38:	42a3      	cmp	r3, r4
 8001a3a:	d9fa      	bls.n	8001a32 <_free_r+0x46>
 8001a3c:	6811      	ldr	r1, [r2, #0]
 8001a3e:	1855      	adds	r5, r2, r1
 8001a40:	42a5      	cmp	r5, r4
 8001a42:	d10b      	bne.n	8001a5c <_free_r+0x70>
 8001a44:	6824      	ldr	r4, [r4, #0]
 8001a46:	4421      	add	r1, r4
 8001a48:	1854      	adds	r4, r2, r1
 8001a4a:	42a3      	cmp	r3, r4
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	d1e0      	bne.n	8001a12 <_free_r+0x26>
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	6053      	str	r3, [r2, #4]
 8001a56:	4421      	add	r1, r4
 8001a58:	6011      	str	r1, [r2, #0]
 8001a5a:	e7da      	b.n	8001a12 <_free_r+0x26>
 8001a5c:	d902      	bls.n	8001a64 <_free_r+0x78>
 8001a5e:	230c      	movs	r3, #12
 8001a60:	6003      	str	r3, [r0, #0]
 8001a62:	e7d6      	b.n	8001a12 <_free_r+0x26>
 8001a64:	6825      	ldr	r5, [r4, #0]
 8001a66:	1961      	adds	r1, r4, r5
 8001a68:	428b      	cmp	r3, r1
 8001a6a:	bf04      	itt	eq
 8001a6c:	6819      	ldreq	r1, [r3, #0]
 8001a6e:	685b      	ldreq	r3, [r3, #4]
 8001a70:	6063      	str	r3, [r4, #4]
 8001a72:	bf04      	itt	eq
 8001a74:	1949      	addeq	r1, r1, r5
 8001a76:	6021      	streq	r1, [r4, #0]
 8001a78:	6054      	str	r4, [r2, #4]
 8001a7a:	e7ca      	b.n	8001a12 <_free_r+0x26>
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bd30      	pop	{r4, r5, pc}
 8001a80:	20000090 	.word	0x20000090

08001a84 <sbrk_aligned>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4e0e      	ldr	r6, [pc, #56]	; (8001ac0 <sbrk_aligned+0x3c>)
 8001a88:	460c      	mov	r4, r1
 8001a8a:	6831      	ldr	r1, [r6, #0]
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	b911      	cbnz	r1, 8001a96 <sbrk_aligned+0x12>
 8001a90:	f000 fb7a 	bl	8002188 <_sbrk_r>
 8001a94:	6030      	str	r0, [r6, #0]
 8001a96:	4621      	mov	r1, r4
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 fb75 	bl	8002188 <_sbrk_r>
 8001a9e:	1c43      	adds	r3, r0, #1
 8001aa0:	d00a      	beq.n	8001ab8 <sbrk_aligned+0x34>
 8001aa2:	1cc4      	adds	r4, r0, #3
 8001aa4:	f024 0403 	bic.w	r4, r4, #3
 8001aa8:	42a0      	cmp	r0, r4
 8001aaa:	d007      	beq.n	8001abc <sbrk_aligned+0x38>
 8001aac:	1a21      	subs	r1, r4, r0
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f000 fb6a 	bl	8002188 <_sbrk_r>
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	d101      	bne.n	8001abc <sbrk_aligned+0x38>
 8001ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8001abc:	4620      	mov	r0, r4
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	20000094 	.word	0x20000094

08001ac4 <_malloc_r>:
 8001ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac8:	1ccd      	adds	r5, r1, #3
 8001aca:	f025 0503 	bic.w	r5, r5, #3
 8001ace:	3508      	adds	r5, #8
 8001ad0:	2d0c      	cmp	r5, #12
 8001ad2:	bf38      	it	cc
 8001ad4:	250c      	movcc	r5, #12
 8001ad6:	2d00      	cmp	r5, #0
 8001ad8:	4607      	mov	r7, r0
 8001ada:	db01      	blt.n	8001ae0 <_malloc_r+0x1c>
 8001adc:	42a9      	cmp	r1, r5
 8001ade:	d905      	bls.n	8001aec <_malloc_r+0x28>
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	4630      	mov	r0, r6
 8001ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aec:	4e2e      	ldr	r6, [pc, #184]	; (8001ba8 <_malloc_r+0xe4>)
 8001aee:	f000 fbf5 	bl	80022dc <__malloc_lock>
 8001af2:	6833      	ldr	r3, [r6, #0]
 8001af4:	461c      	mov	r4, r3
 8001af6:	bb34      	cbnz	r4, 8001b46 <_malloc_r+0x82>
 8001af8:	4629      	mov	r1, r5
 8001afa:	4638      	mov	r0, r7
 8001afc:	f7ff ffc2 	bl	8001a84 <sbrk_aligned>
 8001b00:	1c43      	adds	r3, r0, #1
 8001b02:	4604      	mov	r4, r0
 8001b04:	d14d      	bne.n	8001ba2 <_malloc_r+0xde>
 8001b06:	6834      	ldr	r4, [r6, #0]
 8001b08:	4626      	mov	r6, r4
 8001b0a:	2e00      	cmp	r6, #0
 8001b0c:	d140      	bne.n	8001b90 <_malloc_r+0xcc>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	4631      	mov	r1, r6
 8001b12:	4638      	mov	r0, r7
 8001b14:	eb04 0803 	add.w	r8, r4, r3
 8001b18:	f000 fb36 	bl	8002188 <_sbrk_r>
 8001b1c:	4580      	cmp	r8, r0
 8001b1e:	d13a      	bne.n	8001b96 <_malloc_r+0xd2>
 8001b20:	6821      	ldr	r1, [r4, #0]
 8001b22:	3503      	adds	r5, #3
 8001b24:	1a6d      	subs	r5, r5, r1
 8001b26:	f025 0503 	bic.w	r5, r5, #3
 8001b2a:	3508      	adds	r5, #8
 8001b2c:	2d0c      	cmp	r5, #12
 8001b2e:	bf38      	it	cc
 8001b30:	250c      	movcc	r5, #12
 8001b32:	4629      	mov	r1, r5
 8001b34:	4638      	mov	r0, r7
 8001b36:	f7ff ffa5 	bl	8001a84 <sbrk_aligned>
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d02b      	beq.n	8001b96 <_malloc_r+0xd2>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	442b      	add	r3, r5
 8001b42:	6023      	str	r3, [r4, #0]
 8001b44:	e00e      	b.n	8001b64 <_malloc_r+0xa0>
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	1b52      	subs	r2, r2, r5
 8001b4a:	d41e      	bmi.n	8001b8a <_malloc_r+0xc6>
 8001b4c:	2a0b      	cmp	r2, #11
 8001b4e:	d916      	bls.n	8001b7e <_malloc_r+0xba>
 8001b50:	1961      	adds	r1, r4, r5
 8001b52:	42a3      	cmp	r3, r4
 8001b54:	6025      	str	r5, [r4, #0]
 8001b56:	bf18      	it	ne
 8001b58:	6059      	strne	r1, [r3, #4]
 8001b5a:	6863      	ldr	r3, [r4, #4]
 8001b5c:	bf08      	it	eq
 8001b5e:	6031      	streq	r1, [r6, #0]
 8001b60:	5162      	str	r2, [r4, r5]
 8001b62:	604b      	str	r3, [r1, #4]
 8001b64:	4638      	mov	r0, r7
 8001b66:	f104 060b 	add.w	r6, r4, #11
 8001b6a:	f000 fbbd 	bl	80022e8 <__malloc_unlock>
 8001b6e:	f026 0607 	bic.w	r6, r6, #7
 8001b72:	1d23      	adds	r3, r4, #4
 8001b74:	1af2      	subs	r2, r6, r3
 8001b76:	d0b6      	beq.n	8001ae6 <_malloc_r+0x22>
 8001b78:	1b9b      	subs	r3, r3, r6
 8001b7a:	50a3      	str	r3, [r4, r2]
 8001b7c:	e7b3      	b.n	8001ae6 <_malloc_r+0x22>
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	42a3      	cmp	r3, r4
 8001b82:	bf0c      	ite	eq
 8001b84:	6032      	streq	r2, [r6, #0]
 8001b86:	605a      	strne	r2, [r3, #4]
 8001b88:	e7ec      	b.n	8001b64 <_malloc_r+0xa0>
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	6864      	ldr	r4, [r4, #4]
 8001b8e:	e7b2      	b.n	8001af6 <_malloc_r+0x32>
 8001b90:	4634      	mov	r4, r6
 8001b92:	6876      	ldr	r6, [r6, #4]
 8001b94:	e7b9      	b.n	8001b0a <_malloc_r+0x46>
 8001b96:	230c      	movs	r3, #12
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	f000 fba4 	bl	80022e8 <__malloc_unlock>
 8001ba0:	e7a1      	b.n	8001ae6 <_malloc_r+0x22>
 8001ba2:	6025      	str	r5, [r4, #0]
 8001ba4:	e7de      	b.n	8001b64 <_malloc_r+0xa0>
 8001ba6:	bf00      	nop
 8001ba8:	20000090 	.word	0x20000090

08001bac <__sfputc_r>:
 8001bac:	6893      	ldr	r3, [r2, #8]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	b410      	push	{r4}
 8001bb4:	6093      	str	r3, [r2, #8]
 8001bb6:	da08      	bge.n	8001bca <__sfputc_r+0x1e>
 8001bb8:	6994      	ldr	r4, [r2, #24]
 8001bba:	42a3      	cmp	r3, r4
 8001bbc:	db01      	blt.n	8001bc2 <__sfputc_r+0x16>
 8001bbe:	290a      	cmp	r1, #10
 8001bc0:	d103      	bne.n	8001bca <__sfputc_r+0x1e>
 8001bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bc6:	f7ff bc31 	b.w	800142c <__swbuf_r>
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	1c58      	adds	r0, r3, #1
 8001bce:	6010      	str	r0, [r2, #0]
 8001bd0:	7019      	strb	r1, [r3, #0]
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <__sfputs_r>:
 8001bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bdc:	4606      	mov	r6, r0
 8001bde:	460f      	mov	r7, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	18d5      	adds	r5, r2, r3
 8001be4:	42ac      	cmp	r4, r5
 8001be6:	d101      	bne.n	8001bec <__sfputs_r+0x12>
 8001be8:	2000      	movs	r0, #0
 8001bea:	e007      	b.n	8001bfc <__sfputs_r+0x22>
 8001bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	f7ff ffda 	bl	8001bac <__sfputc_r>
 8001bf8:	1c43      	adds	r3, r0, #1
 8001bfa:	d1f3      	bne.n	8001be4 <__sfputs_r+0xa>
 8001bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c00 <_vfiprintf_r>:
 8001c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c04:	460d      	mov	r5, r1
 8001c06:	b09d      	sub	sp, #116	; 0x74
 8001c08:	4614      	mov	r4, r2
 8001c0a:	4698      	mov	r8, r3
 8001c0c:	4606      	mov	r6, r0
 8001c0e:	b118      	cbz	r0, 8001c18 <_vfiprintf_r+0x18>
 8001c10:	6983      	ldr	r3, [r0, #24]
 8001c12:	b90b      	cbnz	r3, 8001c18 <_vfiprintf_r+0x18>
 8001c14:	f7ff fde4 	bl	80017e0 <__sinit>
 8001c18:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <_vfiprintf_r+0x240>)
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	d11b      	bne.n	8001c56 <_vfiprintf_r+0x56>
 8001c1e:	6875      	ldr	r5, [r6, #4]
 8001c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c22:	07d9      	lsls	r1, r3, #31
 8001c24:	d405      	bmi.n	8001c32 <_vfiprintf_r+0x32>
 8001c26:	89ab      	ldrh	r3, [r5, #12]
 8001c28:	059a      	lsls	r2, r3, #22
 8001c2a:	d402      	bmi.n	8001c32 <_vfiprintf_r+0x32>
 8001c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c2e:	f7ff fe75 	bl	800191c <__retarget_lock_acquire_recursive>
 8001c32:	89ab      	ldrh	r3, [r5, #12]
 8001c34:	071b      	lsls	r3, r3, #28
 8001c36:	d501      	bpl.n	8001c3c <_vfiprintf_r+0x3c>
 8001c38:	692b      	ldr	r3, [r5, #16]
 8001c3a:	b9eb      	cbnz	r3, 8001c78 <_vfiprintf_r+0x78>
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f7ff fc46 	bl	80014d0 <__swsetup_r>
 8001c44:	b1c0      	cbz	r0, 8001c78 <_vfiprintf_r+0x78>
 8001c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c48:	07dc      	lsls	r4, r3, #31
 8001c4a:	d50e      	bpl.n	8001c6a <_vfiprintf_r+0x6a>
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	b01d      	add	sp, #116	; 0x74
 8001c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <_vfiprintf_r+0x244>)
 8001c58:	429d      	cmp	r5, r3
 8001c5a:	d101      	bne.n	8001c60 <_vfiprintf_r+0x60>
 8001c5c:	68b5      	ldr	r5, [r6, #8]
 8001c5e:	e7df      	b.n	8001c20 <_vfiprintf_r+0x20>
 8001c60:	4b79      	ldr	r3, [pc, #484]	; (8001e48 <_vfiprintf_r+0x248>)
 8001c62:	429d      	cmp	r5, r3
 8001c64:	bf08      	it	eq
 8001c66:	68f5      	ldreq	r5, [r6, #12]
 8001c68:	e7da      	b.n	8001c20 <_vfiprintf_r+0x20>
 8001c6a:	89ab      	ldrh	r3, [r5, #12]
 8001c6c:	0598      	lsls	r0, r3, #22
 8001c6e:	d4ed      	bmi.n	8001c4c <_vfiprintf_r+0x4c>
 8001c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c72:	f7ff fe54 	bl	800191e <__retarget_lock_release_recursive>
 8001c76:	e7e9      	b.n	8001c4c <_vfiprintf_r+0x4c>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c86:	2330      	movs	r3, #48	; 0x30
 8001c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e4c <_vfiprintf_r+0x24c>
 8001c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c90:	f04f 0901 	mov.w	r9, #1
 8001c94:	4623      	mov	r3, r4
 8001c96:	469a      	mov	sl, r3
 8001c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c9c:	b10a      	cbz	r2, 8001ca2 <_vfiprintf_r+0xa2>
 8001c9e:	2a25      	cmp	r2, #37	; 0x25
 8001ca0:	d1f9      	bne.n	8001c96 <_vfiprintf_r+0x96>
 8001ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ca6:	d00b      	beq.n	8001cc0 <_vfiprintf_r+0xc0>
 8001ca8:	465b      	mov	r3, fp
 8001caa:	4622      	mov	r2, r4
 8001cac:	4629      	mov	r1, r5
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f7ff ff93 	bl	8001bda <__sfputs_r>
 8001cb4:	3001      	adds	r0, #1
 8001cb6:	f000 80aa 	beq.w	8001e0e <_vfiprintf_r+0x20e>
 8001cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cbc:	445a      	add	r2, fp
 8001cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8001cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a2 	beq.w	8001e0e <_vfiprintf_r+0x20e>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cd4:	f10a 0a01 	add.w	sl, sl, #1
 8001cd8:	9304      	str	r3, [sp, #16]
 8001cda:	9307      	str	r3, [sp, #28]
 8001cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8001ce2:	4654      	mov	r4, sl
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cea:	4858      	ldr	r0, [pc, #352]	; (8001e4c <_vfiprintf_r+0x24c>)
 8001cec:	f7fe fa88 	bl	8000200 <memchr>
 8001cf0:	9a04      	ldr	r2, [sp, #16]
 8001cf2:	b9d8      	cbnz	r0, 8001d2c <_vfiprintf_r+0x12c>
 8001cf4:	06d1      	lsls	r1, r2, #27
 8001cf6:	bf44      	itt	mi
 8001cf8:	2320      	movmi	r3, #32
 8001cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cfe:	0713      	lsls	r3, r2, #28
 8001d00:	bf44      	itt	mi
 8001d02:	232b      	movmi	r3, #43	; 0x2b
 8001d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d08:	f89a 3000 	ldrb.w	r3, [sl]
 8001d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d0e:	d015      	beq.n	8001d3c <_vfiprintf_r+0x13c>
 8001d10:	9a07      	ldr	r2, [sp, #28]
 8001d12:	4654      	mov	r4, sl
 8001d14:	2000      	movs	r0, #0
 8001d16:	f04f 0c0a 	mov.w	ip, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d20:	3b30      	subs	r3, #48	; 0x30
 8001d22:	2b09      	cmp	r3, #9
 8001d24:	d94e      	bls.n	8001dc4 <_vfiprintf_r+0x1c4>
 8001d26:	b1b0      	cbz	r0, 8001d56 <_vfiprintf_r+0x156>
 8001d28:	9207      	str	r2, [sp, #28]
 8001d2a:	e014      	b.n	8001d56 <_vfiprintf_r+0x156>
 8001d2c:	eba0 0308 	sub.w	r3, r0, r8
 8001d30:	fa09 f303 	lsl.w	r3, r9, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	9304      	str	r3, [sp, #16]
 8001d38:	46a2      	mov	sl, r4
 8001d3a:	e7d2      	b.n	8001ce2 <_vfiprintf_r+0xe2>
 8001d3c:	9b03      	ldr	r3, [sp, #12]
 8001d3e:	1d19      	adds	r1, r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	9103      	str	r1, [sp, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bfbb      	ittet	lt
 8001d48:	425b      	neglt	r3, r3
 8001d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8001d4e:	9307      	strge	r3, [sp, #28]
 8001d50:	9307      	strlt	r3, [sp, #28]
 8001d52:	bfb8      	it	lt
 8001d54:	9204      	strlt	r2, [sp, #16]
 8001d56:	7823      	ldrb	r3, [r4, #0]
 8001d58:	2b2e      	cmp	r3, #46	; 0x2e
 8001d5a:	d10c      	bne.n	8001d76 <_vfiprintf_r+0x176>
 8001d5c:	7863      	ldrb	r3, [r4, #1]
 8001d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d60:	d135      	bne.n	8001dce <_vfiprintf_r+0x1ce>
 8001d62:	9b03      	ldr	r3, [sp, #12]
 8001d64:	1d1a      	adds	r2, r3, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	9203      	str	r2, [sp, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bfb8      	it	lt
 8001d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d72:	3402      	adds	r4, #2
 8001d74:	9305      	str	r3, [sp, #20]
 8001d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e5c <_vfiprintf_r+0x25c>
 8001d7a:	7821      	ldrb	r1, [r4, #0]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4650      	mov	r0, sl
 8001d80:	f7fe fa3e 	bl	8000200 <memchr>
 8001d84:	b140      	cbz	r0, 8001d98 <_vfiprintf_r+0x198>
 8001d86:	2340      	movs	r3, #64	; 0x40
 8001d88:	eba0 000a 	sub.w	r0, r0, sl
 8001d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8001d90:	9b04      	ldr	r3, [sp, #16]
 8001d92:	4303      	orrs	r3, r0
 8001d94:	3401      	adds	r4, #1
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d9c:	482c      	ldr	r0, [pc, #176]	; (8001e50 <_vfiprintf_r+0x250>)
 8001d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001da2:	2206      	movs	r2, #6
 8001da4:	f7fe fa2c 	bl	8000200 <memchr>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d03f      	beq.n	8001e2c <_vfiprintf_r+0x22c>
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <_vfiprintf_r+0x254>)
 8001dae:	bb1b      	cbnz	r3, 8001df8 <_vfiprintf_r+0x1f8>
 8001db0:	9b03      	ldr	r3, [sp, #12]
 8001db2:	3307      	adds	r3, #7
 8001db4:	f023 0307 	bic.w	r3, r3, #7
 8001db8:	3308      	adds	r3, #8
 8001dba:	9303      	str	r3, [sp, #12]
 8001dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dbe:	443b      	add	r3, r7
 8001dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8001dc2:	e767      	b.n	8001c94 <_vfiprintf_r+0x94>
 8001dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dc8:	460c      	mov	r4, r1
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e7a5      	b.n	8001d1a <_vfiprintf_r+0x11a>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	3401      	adds	r4, #1
 8001dd2:	9305      	str	r3, [sp, #20]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0c0a 	mov.w	ip, #10
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001de0:	3a30      	subs	r2, #48	; 0x30
 8001de2:	2a09      	cmp	r2, #9
 8001de4:	d903      	bls.n	8001dee <_vfiprintf_r+0x1ee>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0c5      	beq.n	8001d76 <_vfiprintf_r+0x176>
 8001dea:	9105      	str	r1, [sp, #20]
 8001dec:	e7c3      	b.n	8001d76 <_vfiprintf_r+0x176>
 8001dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001df2:	4604      	mov	r4, r0
 8001df4:	2301      	movs	r3, #1
 8001df6:	e7f0      	b.n	8001dda <_vfiprintf_r+0x1da>
 8001df8:	ab03      	add	r3, sp, #12
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	462a      	mov	r2, r5
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <_vfiprintf_r+0x258>)
 8001e00:	a904      	add	r1, sp, #16
 8001e02:	4630      	mov	r0, r6
 8001e04:	f3af 8000 	nop.w
 8001e08:	4607      	mov	r7, r0
 8001e0a:	1c78      	adds	r0, r7, #1
 8001e0c:	d1d6      	bne.n	8001dbc <_vfiprintf_r+0x1bc>
 8001e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e10:	07d9      	lsls	r1, r3, #31
 8001e12:	d405      	bmi.n	8001e20 <_vfiprintf_r+0x220>
 8001e14:	89ab      	ldrh	r3, [r5, #12]
 8001e16:	059a      	lsls	r2, r3, #22
 8001e18:	d402      	bmi.n	8001e20 <_vfiprintf_r+0x220>
 8001e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e1c:	f7ff fd7f 	bl	800191e <__retarget_lock_release_recursive>
 8001e20:	89ab      	ldrh	r3, [r5, #12]
 8001e22:	065b      	lsls	r3, r3, #25
 8001e24:	f53f af12 	bmi.w	8001c4c <_vfiprintf_r+0x4c>
 8001e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e2a:	e711      	b.n	8001c50 <_vfiprintf_r+0x50>
 8001e2c:	ab03      	add	r3, sp, #12
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	462a      	mov	r2, r5
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <_vfiprintf_r+0x258>)
 8001e34:	a904      	add	r1, sp, #16
 8001e36:	4630      	mov	r0, r6
 8001e38:	f000 f880 	bl	8001f3c <_printf_i>
 8001e3c:	e7e4      	b.n	8001e08 <_vfiprintf_r+0x208>
 8001e3e:	bf00      	nop
 8001e40:	08002a8c 	.word	0x08002a8c
 8001e44:	08002aac 	.word	0x08002aac
 8001e48:	08002a6c 	.word	0x08002a6c
 8001e4c:	08002acc 	.word	0x08002acc
 8001e50:	08002ad6 	.word	0x08002ad6
 8001e54:	00000000 	.word	0x00000000
 8001e58:	08001bdb 	.word	0x08001bdb
 8001e5c:	08002ad2 	.word	0x08002ad2

08001e60 <_printf_common>:
 8001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	4616      	mov	r6, r2
 8001e66:	4699      	mov	r9, r3
 8001e68:	688a      	ldr	r2, [r1, #8]
 8001e6a:	690b      	ldr	r3, [r1, #16]
 8001e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bfb8      	it	lt
 8001e74:	4613      	movlt	r3, r2
 8001e76:	6033      	str	r3, [r6, #0]
 8001e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	b10a      	cbz	r2, 8001e86 <_printf_common+0x26>
 8001e82:	3301      	adds	r3, #1
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	0699      	lsls	r1, r3, #26
 8001e8a:	bf42      	ittt	mi
 8001e8c:	6833      	ldrmi	r3, [r6, #0]
 8001e8e:	3302      	addmi	r3, #2
 8001e90:	6033      	strmi	r3, [r6, #0]
 8001e92:	6825      	ldr	r5, [r4, #0]
 8001e94:	f015 0506 	ands.w	r5, r5, #6
 8001e98:	d106      	bne.n	8001ea8 <_printf_common+0x48>
 8001e9a:	f104 0a19 	add.w	sl, r4, #25
 8001e9e:	68e3      	ldr	r3, [r4, #12]
 8001ea0:	6832      	ldr	r2, [r6, #0]
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	42ab      	cmp	r3, r5
 8001ea6:	dc26      	bgt.n	8001ef6 <_printf_common+0x96>
 8001ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001eac:	1e13      	subs	r3, r2, #0
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	bf18      	it	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	0692      	lsls	r2, r2, #26
 8001eb6:	d42b      	bmi.n	8001f10 <_printf_common+0xb0>
 8001eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	47c0      	blx	r8
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d01e      	beq.n	8001f04 <_printf_common+0xa4>
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	68e5      	ldr	r5, [r4, #12]
 8001eca:	6832      	ldr	r2, [r6, #0]
 8001ecc:	f003 0306 	and.w	r3, r3, #6
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	bf08      	it	eq
 8001ed4:	1aad      	subeq	r5, r5, r2
 8001ed6:	68a3      	ldr	r3, [r4, #8]
 8001ed8:	6922      	ldr	r2, [r4, #16]
 8001eda:	bf0c      	ite	eq
 8001edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ee0:	2500      	movne	r5, #0
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	bfc4      	itt	gt
 8001ee6:	1a9b      	subgt	r3, r3, r2
 8001ee8:	18ed      	addgt	r5, r5, r3
 8001eea:	2600      	movs	r6, #0
 8001eec:	341a      	adds	r4, #26
 8001eee:	42b5      	cmp	r5, r6
 8001ef0:	d11a      	bne.n	8001f28 <_printf_common+0xc8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	e008      	b.n	8001f08 <_printf_common+0xa8>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4652      	mov	r2, sl
 8001efa:	4649      	mov	r1, r9
 8001efc:	4638      	mov	r0, r7
 8001efe:	47c0      	blx	r8
 8001f00:	3001      	adds	r0, #1
 8001f02:	d103      	bne.n	8001f0c <_printf_common+0xac>
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f0c:	3501      	adds	r5, #1
 8001f0e:	e7c6      	b.n	8001e9e <_printf_common+0x3e>
 8001f10:	18e1      	adds	r1, r4, r3
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	2030      	movs	r0, #48	; 0x30
 8001f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f1a:	4422      	add	r2, r4
 8001f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f24:	3302      	adds	r3, #2
 8001f26:	e7c7      	b.n	8001eb8 <_printf_common+0x58>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	4638      	mov	r0, r7
 8001f30:	47c0      	blx	r8
 8001f32:	3001      	adds	r0, #1
 8001f34:	d0e6      	beq.n	8001f04 <_printf_common+0xa4>
 8001f36:	3601      	adds	r6, #1
 8001f38:	e7d9      	b.n	8001eee <_printf_common+0x8e>
	...

08001f3c <_printf_i>:
 8001f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f40:	7e0f      	ldrb	r7, [r1, #24]
 8001f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f44:	2f78      	cmp	r7, #120	; 0x78
 8001f46:	4691      	mov	r9, r2
 8001f48:	4680      	mov	r8, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f52:	d807      	bhi.n	8001f64 <_printf_i+0x28>
 8001f54:	2f62      	cmp	r7, #98	; 0x62
 8001f56:	d80a      	bhi.n	8001f6e <_printf_i+0x32>
 8001f58:	2f00      	cmp	r7, #0
 8001f5a:	f000 80d8 	beq.w	800210e <_printf_i+0x1d2>
 8001f5e:	2f58      	cmp	r7, #88	; 0x58
 8001f60:	f000 80a3 	beq.w	80020aa <_printf_i+0x16e>
 8001f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f6c:	e03a      	b.n	8001fe4 <_printf_i+0xa8>
 8001f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f72:	2b15      	cmp	r3, #21
 8001f74:	d8f6      	bhi.n	8001f64 <_printf_i+0x28>
 8001f76:	a101      	add	r1, pc, #4	; (adr r1, 8001f7c <_printf_i+0x40>)
 8001f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f7c:	08001fd5 	.word	0x08001fd5
 8001f80:	08001fe9 	.word	0x08001fe9
 8001f84:	08001f65 	.word	0x08001f65
 8001f88:	08001f65 	.word	0x08001f65
 8001f8c:	08001f65 	.word	0x08001f65
 8001f90:	08001f65 	.word	0x08001f65
 8001f94:	08001fe9 	.word	0x08001fe9
 8001f98:	08001f65 	.word	0x08001f65
 8001f9c:	08001f65 	.word	0x08001f65
 8001fa0:	08001f65 	.word	0x08001f65
 8001fa4:	08001f65 	.word	0x08001f65
 8001fa8:	080020f5 	.word	0x080020f5
 8001fac:	08002019 	.word	0x08002019
 8001fb0:	080020d7 	.word	0x080020d7
 8001fb4:	08001f65 	.word	0x08001f65
 8001fb8:	08001f65 	.word	0x08001f65
 8001fbc:	08002117 	.word	0x08002117
 8001fc0:	08001f65 	.word	0x08001f65
 8001fc4:	08002019 	.word	0x08002019
 8001fc8:	08001f65 	.word	0x08001f65
 8001fcc:	08001f65 	.word	0x08001f65
 8001fd0:	080020df 	.word	0x080020df
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	602a      	str	r2, [r5, #0]
 8001fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0a3      	b.n	8002130 <_printf_i+0x1f4>
 8001fe8:	6820      	ldr	r0, [r4, #0]
 8001fea:	6829      	ldr	r1, [r5, #0]
 8001fec:	0606      	lsls	r6, r0, #24
 8001fee:	f101 0304 	add.w	r3, r1, #4
 8001ff2:	d50a      	bpl.n	800200a <_printf_i+0xce>
 8001ff4:	680e      	ldr	r6, [r1, #0]
 8001ff6:	602b      	str	r3, [r5, #0]
 8001ff8:	2e00      	cmp	r6, #0
 8001ffa:	da03      	bge.n	8002004 <_printf_i+0xc8>
 8001ffc:	232d      	movs	r3, #45	; 0x2d
 8001ffe:	4276      	negs	r6, r6
 8002000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002004:	485e      	ldr	r0, [pc, #376]	; (8002180 <_printf_i+0x244>)
 8002006:	230a      	movs	r3, #10
 8002008:	e019      	b.n	800203e <_printf_i+0x102>
 800200a:	680e      	ldr	r6, [r1, #0]
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002012:	bf18      	it	ne
 8002014:	b236      	sxthne	r6, r6
 8002016:	e7ef      	b.n	8001ff8 <_printf_i+0xbc>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	6820      	ldr	r0, [r4, #0]
 800201c:	1d19      	adds	r1, r3, #4
 800201e:	6029      	str	r1, [r5, #0]
 8002020:	0601      	lsls	r1, r0, #24
 8002022:	d501      	bpl.n	8002028 <_printf_i+0xec>
 8002024:	681e      	ldr	r6, [r3, #0]
 8002026:	e002      	b.n	800202e <_printf_i+0xf2>
 8002028:	0646      	lsls	r6, r0, #25
 800202a:	d5fb      	bpl.n	8002024 <_printf_i+0xe8>
 800202c:	881e      	ldrh	r6, [r3, #0]
 800202e:	4854      	ldr	r0, [pc, #336]	; (8002180 <_printf_i+0x244>)
 8002030:	2f6f      	cmp	r7, #111	; 0x6f
 8002032:	bf0c      	ite	eq
 8002034:	2308      	moveq	r3, #8
 8002036:	230a      	movne	r3, #10
 8002038:	2100      	movs	r1, #0
 800203a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800203e:	6865      	ldr	r5, [r4, #4]
 8002040:	60a5      	str	r5, [r4, #8]
 8002042:	2d00      	cmp	r5, #0
 8002044:	bfa2      	ittt	ge
 8002046:	6821      	ldrge	r1, [r4, #0]
 8002048:	f021 0104 	bicge.w	r1, r1, #4
 800204c:	6021      	strge	r1, [r4, #0]
 800204e:	b90e      	cbnz	r6, 8002054 <_printf_i+0x118>
 8002050:	2d00      	cmp	r5, #0
 8002052:	d04d      	beq.n	80020f0 <_printf_i+0x1b4>
 8002054:	4615      	mov	r5, r2
 8002056:	fbb6 f1f3 	udiv	r1, r6, r3
 800205a:	fb03 6711 	mls	r7, r3, r1, r6
 800205e:	5dc7      	ldrb	r7, [r0, r7]
 8002060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002064:	4637      	mov	r7, r6
 8002066:	42bb      	cmp	r3, r7
 8002068:	460e      	mov	r6, r1
 800206a:	d9f4      	bls.n	8002056 <_printf_i+0x11a>
 800206c:	2b08      	cmp	r3, #8
 800206e:	d10b      	bne.n	8002088 <_printf_i+0x14c>
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	07de      	lsls	r6, r3, #31
 8002074:	d508      	bpl.n	8002088 <_printf_i+0x14c>
 8002076:	6923      	ldr	r3, [r4, #16]
 8002078:	6861      	ldr	r1, [r4, #4]
 800207a:	4299      	cmp	r1, r3
 800207c:	bfde      	ittt	le
 800207e:	2330      	movle	r3, #48	; 0x30
 8002080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002088:	1b52      	subs	r2, r2, r5
 800208a:	6122      	str	r2, [r4, #16]
 800208c:	f8cd a000 	str.w	sl, [sp]
 8002090:	464b      	mov	r3, r9
 8002092:	aa03      	add	r2, sp, #12
 8002094:	4621      	mov	r1, r4
 8002096:	4640      	mov	r0, r8
 8002098:	f7ff fee2 	bl	8001e60 <_printf_common>
 800209c:	3001      	adds	r0, #1
 800209e:	d14c      	bne.n	800213a <_printf_i+0x1fe>
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	b004      	add	sp, #16
 80020a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020aa:	4835      	ldr	r0, [pc, #212]	; (8002180 <_printf_i+0x244>)
 80020ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80020b0:	6829      	ldr	r1, [r5, #0]
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80020b8:	6029      	str	r1, [r5, #0]
 80020ba:	061d      	lsls	r5, r3, #24
 80020bc:	d514      	bpl.n	80020e8 <_printf_i+0x1ac>
 80020be:	07df      	lsls	r7, r3, #31
 80020c0:	bf44      	itt	mi
 80020c2:	f043 0320 	orrmi.w	r3, r3, #32
 80020c6:	6023      	strmi	r3, [r4, #0]
 80020c8:	b91e      	cbnz	r6, 80020d2 <_printf_i+0x196>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	f023 0320 	bic.w	r3, r3, #32
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	2310      	movs	r3, #16
 80020d4:	e7b0      	b.n	8002038 <_printf_i+0xfc>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f043 0320 	orr.w	r3, r3, #32
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	2378      	movs	r3, #120	; 0x78
 80020e0:	4828      	ldr	r0, [pc, #160]	; (8002184 <_printf_i+0x248>)
 80020e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020e6:	e7e3      	b.n	80020b0 <_printf_i+0x174>
 80020e8:	0659      	lsls	r1, r3, #25
 80020ea:	bf48      	it	mi
 80020ec:	b2b6      	uxthmi	r6, r6
 80020ee:	e7e6      	b.n	80020be <_printf_i+0x182>
 80020f0:	4615      	mov	r5, r2
 80020f2:	e7bb      	b.n	800206c <_printf_i+0x130>
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	6826      	ldr	r6, [r4, #0]
 80020f8:	6961      	ldr	r1, [r4, #20]
 80020fa:	1d18      	adds	r0, r3, #4
 80020fc:	6028      	str	r0, [r5, #0]
 80020fe:	0635      	lsls	r5, r6, #24
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	d501      	bpl.n	8002108 <_printf_i+0x1cc>
 8002104:	6019      	str	r1, [r3, #0]
 8002106:	e002      	b.n	800210e <_printf_i+0x1d2>
 8002108:	0670      	lsls	r0, r6, #25
 800210a:	d5fb      	bpl.n	8002104 <_printf_i+0x1c8>
 800210c:	8019      	strh	r1, [r3, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	6123      	str	r3, [r4, #16]
 8002112:	4615      	mov	r5, r2
 8002114:	e7ba      	b.n	800208c <_printf_i+0x150>
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	1d1a      	adds	r2, r3, #4
 800211a:	602a      	str	r2, [r5, #0]
 800211c:	681d      	ldr	r5, [r3, #0]
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	2100      	movs	r1, #0
 8002122:	4628      	mov	r0, r5
 8002124:	f7fe f86c 	bl	8000200 <memchr>
 8002128:	b108      	cbz	r0, 800212e <_printf_i+0x1f2>
 800212a:	1b40      	subs	r0, r0, r5
 800212c:	6060      	str	r0, [r4, #4]
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	6123      	str	r3, [r4, #16]
 8002132:	2300      	movs	r3, #0
 8002134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002138:	e7a8      	b.n	800208c <_printf_i+0x150>
 800213a:	6923      	ldr	r3, [r4, #16]
 800213c:	462a      	mov	r2, r5
 800213e:	4649      	mov	r1, r9
 8002140:	4640      	mov	r0, r8
 8002142:	47d0      	blx	sl
 8002144:	3001      	adds	r0, #1
 8002146:	d0ab      	beq.n	80020a0 <_printf_i+0x164>
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	079b      	lsls	r3, r3, #30
 800214c:	d413      	bmi.n	8002176 <_printf_i+0x23a>
 800214e:	68e0      	ldr	r0, [r4, #12]
 8002150:	9b03      	ldr	r3, [sp, #12]
 8002152:	4298      	cmp	r0, r3
 8002154:	bfb8      	it	lt
 8002156:	4618      	movlt	r0, r3
 8002158:	e7a4      	b.n	80020a4 <_printf_i+0x168>
 800215a:	2301      	movs	r3, #1
 800215c:	4632      	mov	r2, r6
 800215e:	4649      	mov	r1, r9
 8002160:	4640      	mov	r0, r8
 8002162:	47d0      	blx	sl
 8002164:	3001      	adds	r0, #1
 8002166:	d09b      	beq.n	80020a0 <_printf_i+0x164>
 8002168:	3501      	adds	r5, #1
 800216a:	68e3      	ldr	r3, [r4, #12]
 800216c:	9903      	ldr	r1, [sp, #12]
 800216e:	1a5b      	subs	r3, r3, r1
 8002170:	42ab      	cmp	r3, r5
 8002172:	dcf2      	bgt.n	800215a <_printf_i+0x21e>
 8002174:	e7eb      	b.n	800214e <_printf_i+0x212>
 8002176:	2500      	movs	r5, #0
 8002178:	f104 0619 	add.w	r6, r4, #25
 800217c:	e7f5      	b.n	800216a <_printf_i+0x22e>
 800217e:	bf00      	nop
 8002180:	08002add 	.word	0x08002add
 8002184:	08002aee 	.word	0x08002aee

08002188 <_sbrk_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4d06      	ldr	r5, [pc, #24]	; (80021a4 <_sbrk_r+0x1c>)
 800218c:	2300      	movs	r3, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	f000 f9be 	bl	8002514 <_sbrk>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_sbrk_r+0x1a>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_sbrk_r+0x1a>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000098 	.word	0x20000098

080021a8 <__sread>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	460c      	mov	r4, r1
 80021ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b0:	f000 f8a0 	bl	80022f4 <_read_r>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	bfab      	itete	ge
 80021b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ba:	89a3      	ldrhlt	r3, [r4, #12]
 80021bc:	181b      	addge	r3, r3, r0
 80021be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021c2:	bfac      	ite	ge
 80021c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021c6:	81a3      	strhlt	r3, [r4, #12]
 80021c8:	bd10      	pop	{r4, pc}

080021ca <__swrite>:
 80021ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ce:	461f      	mov	r7, r3
 80021d0:	898b      	ldrh	r3, [r1, #12]
 80021d2:	05db      	lsls	r3, r3, #23
 80021d4:	4605      	mov	r5, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	4616      	mov	r6, r2
 80021da:	d505      	bpl.n	80021e8 <__swrite+0x1e>
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	2302      	movs	r3, #2
 80021e2:	2200      	movs	r2, #0
 80021e4:	f000 f868 	bl	80022b8 <_lseek_r>
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f2:	81a3      	strh	r3, [r4, #12]
 80021f4:	4632      	mov	r2, r6
 80021f6:	463b      	mov	r3, r7
 80021f8:	4628      	mov	r0, r5
 80021fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021fe:	f000 b817 	b.w	8002230 <_write_r>

08002202 <__sseek>:
 8002202:	b510      	push	{r4, lr}
 8002204:	460c      	mov	r4, r1
 8002206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800220a:	f000 f855 	bl	80022b8 <_lseek_r>
 800220e:	1c43      	adds	r3, r0, #1
 8002210:	89a3      	ldrh	r3, [r4, #12]
 8002212:	bf15      	itete	ne
 8002214:	6560      	strne	r0, [r4, #84]	; 0x54
 8002216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800221a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800221e:	81a3      	strheq	r3, [r4, #12]
 8002220:	bf18      	it	ne
 8002222:	81a3      	strhne	r3, [r4, #12]
 8002224:	bd10      	pop	{r4, pc}

08002226 <__sclose>:
 8002226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222a:	f000 b813 	b.w	8002254 <_close_r>
	...

08002230 <_write_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4d07      	ldr	r5, [pc, #28]	; (8002250 <_write_r+0x20>)
 8002234:	4604      	mov	r4, r0
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	2200      	movs	r2, #0
 800223c:	602a      	str	r2, [r5, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f000 f911 	bl	8002466 <_write>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_write_r+0x1e>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_write_r+0x1e>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000098 	.word	0x20000098

08002254 <_close_r>:
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4d06      	ldr	r5, [pc, #24]	; (8002270 <_close_r+0x1c>)
 8002258:	2300      	movs	r3, #0
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	602b      	str	r3, [r5, #0]
 8002260:	f000 f932 	bl	80024c8 <_close>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	d102      	bne.n	800226e <_close_r+0x1a>
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	b103      	cbz	r3, 800226e <_close_r+0x1a>
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	20000098 	.word	0x20000098

08002274 <_fstat_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d07      	ldr	r5, [pc, #28]	; (8002294 <_fstat_r+0x20>)
 8002278:	2300      	movs	r3, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	f000 f98c 	bl	800259e <_fstat>
 8002286:	1c43      	adds	r3, r0, #1
 8002288:	d102      	bne.n	8002290 <_fstat_r+0x1c>
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	b103      	cbz	r3, 8002290 <_fstat_r+0x1c>
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	20000098 	.word	0x20000098

08002298 <_isatty_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	4d06      	ldr	r5, [pc, #24]	; (80022b4 <_isatty_r+0x1c>)
 800229c:	2300      	movs	r3, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	f000 fae2 	bl	800286c <_isatty>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_isatty_r+0x1a>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_isatty_r+0x1a>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	20000098 	.word	0x20000098

080022b8 <_lseek_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4d07      	ldr	r5, [pc, #28]	; (80022d8 <_lseek_r+0x20>)
 80022bc:	4604      	mov	r4, r0
 80022be:	4608      	mov	r0, r1
 80022c0:	4611      	mov	r1, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	602a      	str	r2, [r5, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f000 f8bb 	bl	8002442 <_lseek>
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	d102      	bne.n	80022d6 <_lseek_r+0x1e>
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	b103      	cbz	r3, 80022d6 <_lseek_r+0x1e>
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
 80022d8:	20000098 	.word	0x20000098

080022dc <__malloc_lock>:
 80022dc:	4801      	ldr	r0, [pc, #4]	; (80022e4 <__malloc_lock+0x8>)
 80022de:	f7ff bb1d 	b.w	800191c <__retarget_lock_acquire_recursive>
 80022e2:	bf00      	nop
 80022e4:	2000008c 	.word	0x2000008c

080022e8 <__malloc_unlock>:
 80022e8:	4801      	ldr	r0, [pc, #4]	; (80022f0 <__malloc_unlock+0x8>)
 80022ea:	f7ff bb18 	b.w	800191e <__retarget_lock_release_recursive>
 80022ee:	bf00      	nop
 80022f0:	2000008c 	.word	0x2000008c

080022f4 <_read_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4d07      	ldr	r5, [pc, #28]	; (8002314 <_read_r+0x20>)
 80022f8:	4604      	mov	r4, r0
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	2200      	movs	r2, #0
 8002300:	602a      	str	r2, [r5, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f000 f845 	bl	8002392 <_read>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d102      	bne.n	8002312 <_read_r+0x1e>
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	b103      	cbz	r3, 8002312 <_read_r+0x1e>
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	20000098 	.word	0x20000098

08002318 <findslot>:
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <findslot+0x2c>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	b118      	cbz	r0, 800232a <findslot+0x12>
 8002322:	6983      	ldr	r3, [r0, #24]
 8002324:	b90b      	cbnz	r3, 800232a <findslot+0x12>
 8002326:	f7ff fa5b 	bl	80017e0 <__sinit>
 800232a:	2c13      	cmp	r4, #19
 800232c:	d807      	bhi.n	800233e <findslot+0x26>
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <findslot+0x30>)
 8002330:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002334:	3201      	adds	r2, #1
 8002336:	d002      	beq.n	800233e <findslot+0x26>
 8002338:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800233c:	bd10      	pop	{r4, pc}
 800233e:	2000      	movs	r0, #0
 8002340:	e7fc      	b.n	800233c <findslot+0x24>
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000
 8002348:	200000ac 	.word	0x200000ac

0800234c <error>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	4604      	mov	r4, r0
 8002350:	f000 faa8 	bl	80028a4 <__errno>
 8002354:	2613      	movs	r6, #19
 8002356:	4605      	mov	r5, r0
 8002358:	2700      	movs	r7, #0
 800235a:	4630      	mov	r0, r6
 800235c:	4639      	mov	r1, r7
 800235e:	beab      	bkpt	0x00ab
 8002360:	4606      	mov	r6, r0
 8002362:	602e      	str	r6, [r5, #0]
 8002364:	4620      	mov	r0, r4
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002368 <checkerror>:
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d101      	bne.n	8002370 <checkerror+0x8>
 800236c:	f7ff bfee 	b.w	800234c <error>
 8002370:	4770      	bx	lr

08002372 <_swiread>:
 8002372:	b530      	push	{r4, r5, lr}
 8002374:	b085      	sub	sp, #20
 8002376:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800237a:	9203      	str	r2, [sp, #12]
 800237c:	2406      	movs	r4, #6
 800237e:	ad01      	add	r5, sp, #4
 8002380:	4620      	mov	r0, r4
 8002382:	4629      	mov	r1, r5
 8002384:	beab      	bkpt	0x00ab
 8002386:	4604      	mov	r4, r0
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff ffed 	bl	8002368 <checkerror>
 800238e:	b005      	add	sp, #20
 8002390:	bd30      	pop	{r4, r5, pc}

08002392 <_read>:
 8002392:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002394:	4615      	mov	r5, r2
 8002396:	9101      	str	r1, [sp, #4]
 8002398:	f7ff ffbe 	bl	8002318 <findslot>
 800239c:	9901      	ldr	r1, [sp, #4]
 800239e:	4604      	mov	r4, r0
 80023a0:	b938      	cbnz	r0, 80023b2 <_read+0x20>
 80023a2:	f000 fa7f 	bl	80028a4 <__errno>
 80023a6:	2309      	movs	r3, #9
 80023a8:	6003      	str	r3, [r0, #0]
 80023aa:	f04f 30ff 	mov.w	r0, #4294967295
 80023ae:	b003      	add	sp, #12
 80023b0:	bd30      	pop	{r4, r5, pc}
 80023b2:	6800      	ldr	r0, [r0, #0]
 80023b4:	462a      	mov	r2, r5
 80023b6:	f7ff ffdc 	bl	8002372 <_swiread>
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	d0f7      	beq.n	80023ae <_read+0x1c>
 80023be:	6863      	ldr	r3, [r4, #4]
 80023c0:	1a2a      	subs	r2, r5, r0
 80023c2:	4413      	add	r3, r2
 80023c4:	6063      	str	r3, [r4, #4]
 80023c6:	4610      	mov	r0, r2
 80023c8:	e7f1      	b.n	80023ae <_read+0x1c>

080023ca <_swilseek>:
 80023ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023cc:	460c      	mov	r4, r1
 80023ce:	4616      	mov	r6, r2
 80023d0:	f7ff ffa2 	bl	8002318 <findslot>
 80023d4:	4605      	mov	r5, r0
 80023d6:	b940      	cbnz	r0, 80023ea <_swilseek+0x20>
 80023d8:	f000 fa64 	bl	80028a4 <__errno>
 80023dc:	2309      	movs	r3, #9
 80023de:	6003      	str	r3, [r0, #0]
 80023e0:	f04f 34ff 	mov.w	r4, #4294967295
 80023e4:	4620      	mov	r0, r4
 80023e6:	b003      	add	sp, #12
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	2e02      	cmp	r6, #2
 80023ec:	d903      	bls.n	80023f6 <_swilseek+0x2c>
 80023ee:	f000 fa59 	bl	80028a4 <__errno>
 80023f2:	2316      	movs	r3, #22
 80023f4:	e7f3      	b.n	80023de <_swilseek+0x14>
 80023f6:	2e01      	cmp	r6, #1
 80023f8:	d112      	bne.n	8002420 <_swilseek+0x56>
 80023fa:	6843      	ldr	r3, [r0, #4]
 80023fc:	18e4      	adds	r4, r4, r3
 80023fe:	d4f6      	bmi.n	80023ee <_swilseek+0x24>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	260a      	movs	r6, #10
 8002404:	e9cd 3400 	strd	r3, r4, [sp]
 8002408:	466f      	mov	r7, sp
 800240a:	4630      	mov	r0, r6
 800240c:	4639      	mov	r1, r7
 800240e:	beab      	bkpt	0x00ab
 8002410:	4606      	mov	r6, r0
 8002412:	4630      	mov	r0, r6
 8002414:	f7ff ffa8 	bl	8002368 <checkerror>
 8002418:	2800      	cmp	r0, #0
 800241a:	dbe1      	blt.n	80023e0 <_swilseek+0x16>
 800241c:	606c      	str	r4, [r5, #4]
 800241e:	e7e1      	b.n	80023e4 <_swilseek+0x1a>
 8002420:	2e02      	cmp	r6, #2
 8002422:	d1ed      	bne.n	8002400 <_swilseek+0x36>
 8002424:	6803      	ldr	r3, [r0, #0]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	260c      	movs	r6, #12
 800242a:	466f      	mov	r7, sp
 800242c:	4630      	mov	r0, r6
 800242e:	4639      	mov	r1, r7
 8002430:	beab      	bkpt	0x00ab
 8002432:	4606      	mov	r6, r0
 8002434:	4630      	mov	r0, r6
 8002436:	f7ff ff97 	bl	8002368 <checkerror>
 800243a:	1c43      	adds	r3, r0, #1
 800243c:	d0d0      	beq.n	80023e0 <_swilseek+0x16>
 800243e:	4404      	add	r4, r0
 8002440:	e7de      	b.n	8002400 <_swilseek+0x36>

08002442 <_lseek>:
 8002442:	f7ff bfc2 	b.w	80023ca <_swilseek>

08002446 <_swiwrite>:
 8002446:	b530      	push	{r4, r5, lr}
 8002448:	b085      	sub	sp, #20
 800244a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800244e:	9203      	str	r2, [sp, #12]
 8002450:	2405      	movs	r4, #5
 8002452:	ad01      	add	r5, sp, #4
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	beab      	bkpt	0x00ab
 800245a:	4604      	mov	r4, r0
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff83 	bl	8002368 <checkerror>
 8002462:	b005      	add	sp, #20
 8002464:	bd30      	pop	{r4, r5, pc}

08002466 <_write>:
 8002466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002468:	4615      	mov	r5, r2
 800246a:	9101      	str	r1, [sp, #4]
 800246c:	f7ff ff54 	bl	8002318 <findslot>
 8002470:	9901      	ldr	r1, [sp, #4]
 8002472:	4604      	mov	r4, r0
 8002474:	b930      	cbnz	r0, 8002484 <_write+0x1e>
 8002476:	f000 fa15 	bl	80028a4 <__errno>
 800247a:	2309      	movs	r3, #9
 800247c:	6003      	str	r3, [r0, #0]
 800247e:	f04f 30ff 	mov.w	r0, #4294967295
 8002482:	e012      	b.n	80024aa <_write+0x44>
 8002484:	6800      	ldr	r0, [r0, #0]
 8002486:	462a      	mov	r2, r5
 8002488:	f7ff ffdd 	bl	8002446 <_swiwrite>
 800248c:	2800      	cmp	r0, #0
 800248e:	dbf6      	blt.n	800247e <_write+0x18>
 8002490:	6862      	ldr	r2, [r4, #4]
 8002492:	1a2b      	subs	r3, r5, r0
 8002494:	441a      	add	r2, r3
 8002496:	42a8      	cmp	r0, r5
 8002498:	6062      	str	r2, [r4, #4]
 800249a:	d105      	bne.n	80024a8 <_write+0x42>
 800249c:	2000      	movs	r0, #0
 800249e:	b003      	add	sp, #12
 80024a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024a4:	f7ff bf52 	b.w	800234c <error>
 80024a8:	4618      	mov	r0, r3
 80024aa:	b003      	add	sp, #12
 80024ac:	bd30      	pop	{r4, r5, pc}

080024ae <_swiclose>:
 80024ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024b0:	2402      	movs	r4, #2
 80024b2:	9001      	str	r0, [sp, #4]
 80024b4:	ad01      	add	r5, sp, #4
 80024b6:	4620      	mov	r0, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	beab      	bkpt	0x00ab
 80024bc:	4604      	mov	r4, r0
 80024be:	4620      	mov	r0, r4
 80024c0:	f7ff ff52 	bl	8002368 <checkerror>
 80024c4:	b003      	add	sp, #12
 80024c6:	bd30      	pop	{r4, r5, pc}

080024c8 <_close>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	f7ff ff24 	bl	8002318 <findslot>
 80024d0:	4604      	mov	r4, r0
 80024d2:	b930      	cbnz	r0, 80024e2 <_close+0x1a>
 80024d4:	f000 f9e6 	bl	80028a4 <__errno>
 80024d8:	2309      	movs	r3, #9
 80024da:	6003      	str	r3, [r0, #0]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
 80024e2:	3d01      	subs	r5, #1
 80024e4:	2d01      	cmp	r5, #1
 80024e6:	d809      	bhi.n	80024fc <_close+0x34>
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <_close+0x48>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d104      	bne.n	80024fc <_close+0x34>
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	6003      	str	r3, [r0, #0]
 80024f8:	2000      	movs	r0, #0
 80024fa:	e7f1      	b.n	80024e0 <_close+0x18>
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	f7ff ffd6 	bl	80024ae <_swiclose>
 8002502:	2800      	cmp	r0, #0
 8002504:	d1ec      	bne.n	80024e0 <_close+0x18>
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	6023      	str	r3, [r4, #0]
 800250c:	e7e8      	b.n	80024e0 <_close+0x18>
 800250e:	bf00      	nop
 8002510:	200000ac 	.word	0x200000ac

08002514 <_sbrk>:
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <_sbrk+0x38>)
 8002516:	6811      	ldr	r1, [r2, #0]
 8002518:	b510      	push	{r4, lr}
 800251a:	4603      	mov	r3, r0
 800251c:	b909      	cbnz	r1, 8002522 <_sbrk+0xe>
 800251e:	490c      	ldr	r1, [pc, #48]	; (8002550 <_sbrk+0x3c>)
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	6810      	ldr	r0, [r2, #0]
 8002524:	4669      	mov	r1, sp
 8002526:	4403      	add	r3, r0
 8002528:	428b      	cmp	r3, r1
 800252a:	d806      	bhi.n	800253a <_sbrk+0x26>
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <_sbrk+0x40>)
 800252e:	4c0a      	ldr	r4, [pc, #40]	; (8002558 <_sbrk+0x44>)
 8002530:	6809      	ldr	r1, [r1, #0]
 8002532:	42a1      	cmp	r1, r4
 8002534:	d008      	beq.n	8002548 <_sbrk+0x34>
 8002536:	428b      	cmp	r3, r1
 8002538:	d906      	bls.n	8002548 <_sbrk+0x34>
 800253a:	f000 f9b3 	bl	80028a4 <__errno>
 800253e:	230c      	movs	r3, #12
 8002540:	6003      	str	r3, [r0, #0]
 8002542:	f04f 30ff 	mov.w	r0, #4294967295
 8002546:	bd10      	pop	{r4, pc}
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e7fc      	b.n	8002546 <_sbrk+0x32>
 800254c:	2000009c 	.word	0x2000009c
 8002550:	20000150 	.word	0x20000150
 8002554:	20000064 	.word	0x20000064
 8002558:	cafedead 	.word	0xcafedead

0800255c <_swistat>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	460c      	mov	r4, r1
 8002560:	f7ff feda 	bl	8002318 <findslot>
 8002564:	4605      	mov	r5, r0
 8002566:	b930      	cbnz	r0, 8002576 <_swistat+0x1a>
 8002568:	f000 f99c 	bl	80028a4 <__errno>
 800256c:	2309      	movs	r3, #9
 800256e:	6003      	str	r3, [r0, #0]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800257c:	6063      	str	r3, [r4, #4]
 800257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002582:	64a3      	str	r3, [r4, #72]	; 0x48
 8002584:	260c      	movs	r6, #12
 8002586:	4630      	mov	r0, r6
 8002588:	4629      	mov	r1, r5
 800258a:	beab      	bkpt	0x00ab
 800258c:	4605      	mov	r5, r0
 800258e:	4628      	mov	r0, r5
 8002590:	f7ff feea 	bl	8002368 <checkerror>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	bf1c      	itt	ne
 8002598:	6120      	strne	r0, [r4, #16]
 800259a:	2000      	movne	r0, #0
 800259c:	e7ea      	b.n	8002574 <_swistat+0x18>

0800259e <_fstat>:
 800259e:	460b      	mov	r3, r1
 80025a0:	b510      	push	{r4, lr}
 80025a2:	2100      	movs	r1, #0
 80025a4:	4604      	mov	r4, r0
 80025a6:	2258      	movs	r2, #88	; 0x58
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fea9 	bl	8001300 <memset>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4620      	mov	r0, r4
 80025b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b6:	f7ff bfd1 	b.w	800255c <_swistat>

080025ba <_stat>:
 80025ba:	b538      	push	{r3, r4, r5, lr}
 80025bc:	460d      	mov	r5, r1
 80025be:	4604      	mov	r4, r0
 80025c0:	2258      	movs	r2, #88	; 0x58
 80025c2:	2100      	movs	r1, #0
 80025c4:	4628      	mov	r0, r5
 80025c6:	f7fe fe9b 	bl	8001300 <memset>
 80025ca:	4620      	mov	r0, r4
 80025cc:	2100      	movs	r1, #0
 80025ce:	f000 f811 	bl	80025f4 <_swiopen>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	4604      	mov	r4, r0
 80025d6:	d00b      	beq.n	80025f0 <_stat+0x36>
 80025d8:	686b      	ldr	r3, [r5, #4]
 80025da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80025de:	606b      	str	r3, [r5, #4]
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7ff ffbb 	bl	800255c <_swistat>
 80025e6:	4605      	mov	r5, r0
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff ff6d 	bl	80024c8 <_close>
 80025ee:	462c      	mov	r4, r5
 80025f0:	4620      	mov	r0, r4
 80025f2:	bd38      	pop	{r3, r4, r5, pc}

080025f4 <_swiopen>:
 80025f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80026a4 <_swiopen+0xb0>
 80025fc:	b097      	sub	sp, #92	; 0x5c
 80025fe:	4607      	mov	r7, r0
 8002600:	460e      	mov	r6, r1
 8002602:	2500      	movs	r5, #0
 8002604:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002608:	1c61      	adds	r1, r4, #1
 800260a:	d037      	beq.n	800267c <_swiopen+0x88>
 800260c:	3501      	adds	r5, #1
 800260e:	2d14      	cmp	r5, #20
 8002610:	d1f8      	bne.n	8002604 <_swiopen+0x10>
 8002612:	f000 f947 	bl	80028a4 <__errno>
 8002616:	2318      	movs	r3, #24
 8002618:	6003      	str	r3, [r0, #0]
 800261a:	f04f 34ff 	mov.w	r4, #4294967295
 800261e:	e03d      	b.n	800269c <_swiopen+0xa8>
 8002620:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002624:	f240 6301 	movw	r3, #1537	; 0x601
 8002628:	07b2      	lsls	r2, r6, #30
 800262a:	bf48      	it	mi
 800262c:	f044 0402 	orrmi.w	r4, r4, #2
 8002630:	421e      	tst	r6, r3
 8002632:	bf18      	it	ne
 8002634:	f044 0404 	orrne.w	r4, r4, #4
 8002638:	0733      	lsls	r3, r6, #28
 800263a:	bf48      	it	mi
 800263c:	f024 0404 	bicmi.w	r4, r4, #4
 8002640:	4638      	mov	r0, r7
 8002642:	bf48      	it	mi
 8002644:	f044 0408 	orrmi.w	r4, r4, #8
 8002648:	9700      	str	r7, [sp, #0]
 800264a:	f7fd fdd1 	bl	80001f0 <strlen>
 800264e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002652:	2401      	movs	r4, #1
 8002654:	4620      	mov	r0, r4
 8002656:	4649      	mov	r1, r9
 8002658:	beab      	bkpt	0x00ab
 800265a:	4604      	mov	r4, r0
 800265c:	2c00      	cmp	r4, #0
 800265e:	db08      	blt.n	8002672 <_swiopen+0x7e>
 8002660:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002664:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002668:	2300      	movs	r3, #0
 800266a:	f8c8 3004 	str.w	r3, [r8, #4]
 800266e:	462c      	mov	r4, r5
 8002670:	e014      	b.n	800269c <_swiopen+0xa8>
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fe6a 	bl	800234c <error>
 8002678:	4604      	mov	r4, r0
 800267a:	e00f      	b.n	800269c <_swiopen+0xa8>
 800267c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002680:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002684:	46e9      	mov	r9, sp
 8002686:	d1cb      	bne.n	8002620 <_swiopen+0x2c>
 8002688:	4649      	mov	r1, r9
 800268a:	4638      	mov	r0, r7
 800268c:	f7ff ff95 	bl	80025ba <_stat>
 8002690:	3001      	adds	r0, #1
 8002692:	d0c5      	beq.n	8002620 <_swiopen+0x2c>
 8002694:	f000 f906 	bl	80028a4 <__errno>
 8002698:	2311      	movs	r3, #17
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	4620      	mov	r0, r4
 800269e:	b017      	add	sp, #92	; 0x5c
 80026a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026a4:	200000ac 	.word	0x200000ac

080026a8 <_get_semihosting_exts>:
 80026a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026ac:	4606      	mov	r6, r0
 80026ae:	460f      	mov	r7, r1
 80026b0:	482a      	ldr	r0, [pc, #168]	; (800275c <_get_semihosting_exts+0xb4>)
 80026b2:	2100      	movs	r1, #0
 80026b4:	4615      	mov	r5, r2
 80026b6:	f7ff ff9d 	bl	80025f4 <_swiopen>
 80026ba:	462a      	mov	r2, r5
 80026bc:	4604      	mov	r4, r0
 80026be:	2100      	movs	r1, #0
 80026c0:	4630      	mov	r0, r6
 80026c2:	f7fe fe1d 	bl	8001300 <memset>
 80026c6:	1c63      	adds	r3, r4, #1
 80026c8:	d016      	beq.n	80026f8 <_get_semihosting_exts+0x50>
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff fe24 	bl	8002318 <findslot>
 80026d0:	f04f 090c 	mov.w	r9, #12
 80026d4:	4680      	mov	r8, r0
 80026d6:	4648      	mov	r0, r9
 80026d8:	4641      	mov	r1, r8
 80026da:	beab      	bkpt	0x00ab
 80026dc:	4680      	mov	r8, r0
 80026de:	4640      	mov	r0, r8
 80026e0:	f7ff fe42 	bl	8002368 <checkerror>
 80026e4:	2803      	cmp	r0, #3
 80026e6:	dd02      	ble.n	80026ee <_get_semihosting_exts+0x46>
 80026e8:	1ec3      	subs	r3, r0, #3
 80026ea:	42ab      	cmp	r3, r5
 80026ec:	dc08      	bgt.n	8002700 <_get_semihosting_exts+0x58>
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff feea 	bl	80024c8 <_close>
 80026f4:	f04f 34ff 	mov.w	r4, #4294967295
 80026f8:	4620      	mov	r0, r4
 80026fa:	b003      	add	sp, #12
 80026fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002700:	2204      	movs	r2, #4
 8002702:	eb0d 0102 	add.w	r1, sp, r2
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff fe43 	bl	8002392 <_read>
 800270c:	2803      	cmp	r0, #3
 800270e:	ddee      	ble.n	80026ee <_get_semihosting_exts+0x46>
 8002710:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002714:	2b53      	cmp	r3, #83	; 0x53
 8002716:	d1ea      	bne.n	80026ee <_get_semihosting_exts+0x46>
 8002718:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800271c:	2b48      	cmp	r3, #72	; 0x48
 800271e:	d1e6      	bne.n	80026ee <_get_semihosting_exts+0x46>
 8002720:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002724:	2b46      	cmp	r3, #70	; 0x46
 8002726:	d1e2      	bne.n	80026ee <_get_semihosting_exts+0x46>
 8002728:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800272c:	2b42      	cmp	r3, #66	; 0x42
 800272e:	d1de      	bne.n	80026ee <_get_semihosting_exts+0x46>
 8002730:	2201      	movs	r2, #1
 8002732:	4639      	mov	r1, r7
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff fe48 	bl	80023ca <_swilseek>
 800273a:	2800      	cmp	r0, #0
 800273c:	dbd7      	blt.n	80026ee <_get_semihosting_exts+0x46>
 800273e:	462a      	mov	r2, r5
 8002740:	4631      	mov	r1, r6
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fe25 	bl	8002392 <_read>
 8002748:	4605      	mov	r5, r0
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff febc 	bl	80024c8 <_close>
 8002750:	4628      	mov	r0, r5
 8002752:	f7ff fe09 	bl	8002368 <checkerror>
 8002756:	4604      	mov	r4, r0
 8002758:	e7ce      	b.n	80026f8 <_get_semihosting_exts+0x50>
 800275a:	bf00      	nop
 800275c:	08002aff 	.word	0x08002aff

08002760 <initialise_semihosting_exts>:
 8002760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002762:	4d0a      	ldr	r5, [pc, #40]	; (800278c <initialise_semihosting_exts+0x2c>)
 8002764:	4c0a      	ldr	r4, [pc, #40]	; (8002790 <initialise_semihosting_exts+0x30>)
 8002766:	2100      	movs	r1, #0
 8002768:	2201      	movs	r2, #1
 800276a:	a801      	add	r0, sp, #4
 800276c:	6029      	str	r1, [r5, #0]
 800276e:	6022      	str	r2, [r4, #0]
 8002770:	f7ff ff9a 	bl	80026a8 <_get_semihosting_exts>
 8002774:	2800      	cmp	r0, #0
 8002776:	dd07      	ble.n	8002788 <initialise_semihosting_exts+0x28>
 8002778:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800277c:	f003 0201 	and.w	r2, r3, #1
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	602a      	str	r2, [r5, #0]
 8002786:	6023      	str	r3, [r4, #0]
 8002788:	b003      	add	sp, #12
 800278a:	bd30      	pop	{r4, r5, pc}
 800278c:	20000068 	.word	0x20000068
 8002790:	2000006c 	.word	0x2000006c

08002794 <_has_ext_stdout_stderr>:
 8002794:	b510      	push	{r4, lr}
 8002796:	4c04      	ldr	r4, [pc, #16]	; (80027a8 <_has_ext_stdout_stderr+0x14>)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	da01      	bge.n	80027a2 <_has_ext_stdout_stderr+0xe>
 800279e:	f7ff ffdf 	bl	8002760 <initialise_semihosting_exts>
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	bf00      	nop
 80027a8:	2000006c 	.word	0x2000006c

080027ac <initialise_monitor_handles>:
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b0:	b085      	sub	sp, #20
 80027b2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002864 <initialise_monitor_handles+0xb8>
 80027b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80027ba:	2303      	movs	r3, #3
 80027bc:	2400      	movs	r4, #0
 80027be:	9303      	str	r3, [sp, #12]
 80027c0:	af01      	add	r7, sp, #4
 80027c2:	9402      	str	r4, [sp, #8]
 80027c4:	2501      	movs	r5, #1
 80027c6:	4628      	mov	r0, r5
 80027c8:	4639      	mov	r1, r7
 80027ca:	beab      	bkpt	0x00ab
 80027cc:	4605      	mov	r5, r0
 80027ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002868 <initialise_monitor_handles+0xbc>
 80027d2:	4623      	mov	r3, r4
 80027d4:	4c20      	ldr	r4, [pc, #128]	; (8002858 <initialise_monitor_handles+0xac>)
 80027d6:	f8c8 5000 	str.w	r5, [r8]
 80027da:	f04f 32ff 	mov.w	r2, #4294967295
 80027de:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80027e2:	3301      	adds	r3, #1
 80027e4:	2b14      	cmp	r3, #20
 80027e6:	d1fa      	bne.n	80027de <initialise_monitor_handles+0x32>
 80027e8:	f7ff ffd4 	bl	8002794 <_has_ext_stdout_stderr>
 80027ec:	4d1b      	ldr	r5, [pc, #108]	; (800285c <initialise_monitor_handles+0xb0>)
 80027ee:	b1d0      	cbz	r0, 8002826 <initialise_monitor_handles+0x7a>
 80027f0:	f04f 0a03 	mov.w	sl, #3
 80027f4:	2304      	movs	r3, #4
 80027f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80027fa:	2601      	movs	r6, #1
 80027fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	4630      	mov	r0, r6
 8002804:	4639      	mov	r1, r7
 8002806:	beab      	bkpt	0x00ab
 8002808:	4683      	mov	fp, r0
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <initialise_monitor_handles+0xb4>)
 800280c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002810:	f8c3 b000 	str.w	fp, [r3]
 8002814:	2308      	movs	r3, #8
 8002816:	f8cd a00c 	str.w	sl, [sp, #12]
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	4630      	mov	r0, r6
 800281e:	4639      	mov	r1, r7
 8002820:	beab      	bkpt	0x00ab
 8002822:	4606      	mov	r6, r0
 8002824:	602e      	str	r6, [r5, #0]
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	bf02      	ittt	eq
 800282c:	4b0c      	ldreq	r3, [pc, #48]	; (8002860 <initialise_monitor_handles+0xb4>)
 800282e:	681b      	ldreq	r3, [r3, #0]
 8002830:	602b      	streq	r3, [r5, #0]
 8002832:	2600      	movs	r6, #0
 8002834:	f8d8 3000 	ldr.w	r3, [r8]
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	6066      	str	r6, [r4, #4]
 800283c:	f7ff ffaa 	bl	8002794 <_has_ext_stdout_stderr>
 8002840:	b130      	cbz	r0, 8002850 <initialise_monitor_handles+0xa4>
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <initialise_monitor_handles+0xb4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800284a:	682b      	ldr	r3, [r5, #0]
 800284c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002850:	b005      	add	sp, #20
 8002852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	200000ac 	.word	0x200000ac
 800285c:	200000a0 	.word	0x200000a0
 8002860:	200000a8 	.word	0x200000a8
 8002864:	08002b15 	.word	0x08002b15
 8002868:	200000a4 	.word	0x200000a4

0800286c <_isatty>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	f7ff fd53 	bl	8002318 <findslot>
 8002872:	2509      	movs	r5, #9
 8002874:	4604      	mov	r4, r0
 8002876:	b920      	cbnz	r0, 8002882 <_isatty+0x16>
 8002878:	f000 f814 	bl	80028a4 <__errno>
 800287c:	6005      	str	r5, [r0, #0]
 800287e:	4620      	mov	r0, r4
 8002880:	bd70      	pop	{r4, r5, r6, pc}
 8002882:	4628      	mov	r0, r5
 8002884:	4621      	mov	r1, r4
 8002886:	beab      	bkpt	0x00ab
 8002888:	4604      	mov	r4, r0
 800288a:	2c01      	cmp	r4, #1
 800288c:	d0f7      	beq.n	800287e <_isatty+0x12>
 800288e:	f000 f809 	bl	80028a4 <__errno>
 8002892:	2400      	movs	r4, #0
 8002894:	4605      	mov	r5, r0
 8002896:	2613      	movs	r6, #19
 8002898:	4630      	mov	r0, r6
 800289a:	4621      	mov	r1, r4
 800289c:	beab      	bkpt	0x00ab
 800289e:	4606      	mov	r6, r0
 80028a0:	602e      	str	r6, [r5, #0]
 80028a2:	e7ec      	b.n	800287e <_isatty+0x12>

080028a4 <__errno>:
 80028a4:	4b01      	ldr	r3, [pc, #4]	; (80028ac <__errno+0x8>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
