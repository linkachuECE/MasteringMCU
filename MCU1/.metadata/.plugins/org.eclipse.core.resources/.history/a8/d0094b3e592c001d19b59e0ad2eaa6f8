/*
 * stm324707xx_gpio_driver.c
 *
 *  Created on: Sep 3, 2022
 *      Author: linkachu
 */

#include "stm32407xx_gpio_driver.h"
#include "stm32f407xx.h"
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <stdlib.h>

// *********** API IMPLEMENTATIONS ************* //

// Peripheral clock setup

/*****************************************************************
 * @fn			- GPIO_PeriClockControl
 *
 * @brief		- This function enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]	- Base address of the GPIO peripheral
 * @param[in]	- ENABLE or DISABLE macros
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
	if(EnorDi == ENABLE){
		switch ((uint32_t)pGPIOx){
			case (uint32_t)GPIOA:
				GPIOA_PCLK_EN();
				break;
			case (uint32_t)GPIOB:
				GPIOB_PCLK_EN();
				break;
			case (uint32_t)GPIOC:
				GPIOC_PCLK_EN();
				break;
			case (uint32_t)GPIOD:
				GPIOD_PCLK_EN();
				break;
			case (uint32_t)GPIOE:
				GPIOE_PCLK_EN();
				break;
			case (uint32_t)GPIOF:
				GPIOF_PCLK_EN();
				break;
			case (uint32_t)GPIOG:
				GPIOH_PCLK_EN();
				break;
			case (uint32_t)GPIOI:
				GPIOI_PCLK_EN();
				break;
			default:
				perror("Invalid pointer passed to GPIO_PeriClockControl()");
				exit(1);
		}
	} else if (EnorDi == DISABLE){
		switch ((uint32_t)pGPIOx){
			case (uint32_t)GPIOA:
				GPIOA_PCLK_DI();
				break;
			case (uint32_t)GPIOB:
				GPIOB_PCLK_DI();
				break;
			case (uint32_t)GPIOC:
				GPIOC_PCLK_DI();
				break;
			case (uint32_t)GPIOD:
				GPIOD_PCLK_DI();
				break;
			case (uint32_t)GPIOE:
				GPIOE_PCLK_DI();
				break;
			case (uint32_t)GPIOF:
				GPIOF_PCLK_DI();
				break;
			case (uint32_t)GPIOG:
				GPIOH_PCLK_DI();
				break;
			case (uint32_t)GPIOI:
				GPIOI_PCLK_DI();
				break;
			default:
				perror("Invalid pointer passed to GPIO_PeriClockControl()");
				exit(1);
		}
	}
}

// Init and de-enit
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
	// 1. Configure the mode of the GPIO pin

	// 2. Configure the speed

	// 3. Configure the PUPD settings

	// 4. Configure the output type

	// 5. Configure the alternate functionality

}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){}

// Data read and write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){}
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t value){}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value){}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber){}

// IRQ
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi){}
void GPIO_IRQHandling(uint8_t pinNumber){}
